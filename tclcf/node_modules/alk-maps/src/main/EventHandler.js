var helpers = require('./helpers')

module.exports = function(ALKMaps, map, activeLayers, options) {
    var selectFeature

    //event handler api
    var api = {
        destroy: function() {
            map.removeControl(selectFeature)
            selectFeature.destroy()
            selectFeature = null
        },

        enable: function() {
            selectFeature.activate()
        },

        disable: function() {
            selectFeature.deactivate()
        },

        onSelect: function(item) {
            if (!item.popup) {
                if (item.cluster && item.layer.options.clusterPopupContent) {
                    api.generateClusterPopup(item)
                } else if (item.layer.options.popupContent) {
                    api.generatePopup(item)
                }
            }
            if (item.popup) {
                map.addPopup(item.popup, true)
                item.popup.show()
                setTimeout(function() {
                    item.popup.updateSize()
                })
            }
        },

        onUnselect: function(item) {
            if (item.popup) {
                item.popup.hide()
                map.removePopup(item.popup)
                item.popup.destroy()
                item.popup = null
            }
        },

        generatePopup: function(item) {
            var content = helpers.parseString(item.layer.options.popupContent, item.attributes)
            item.popup = new ALKMaps.Popup.FramedCloud(
                'FramedCloud',
                new ALKMaps.LonLat(
                    item.geometry.x,
                    item.geometry.y
                ),
                null,
                content,
                null,
                true,
                api.onUnselect.bind(api, item)
            )

            item.createPopup(true)
        },

        generateClusterPopup: function(item) {
            var template = item.layer.options.clusterPopupContent || ''
            template = template.replace(/\r?\n|\r/g, ' ')
            var rex = /(.+)<repeat>(.+)<\/repeat>(.+)/
            var matches = template.match(rex) || ['', '', template + '<br>', '']

            //build content in loop
            var content = matches[1]
            for (var i = 0; i < item.cluster.length; i++) {
                content += helpers.parseString(matches[2], item.cluster[i].attributes)
            }
            content += matches[3]

            item.popup = new ALKMaps.Popup.FramedCloud(
                'FramedCloud',
                new ALKMaps.LonLat(
                    item.geometry.x,
                    item.geometry.y
                ),
                null,
                content,
                null,
                true,
                api.onUnselect.bind(api, item)
            )

            item.createPopup(true)
        }
    }

    var layers = []
    Object.keys(activeLayers).forEach(function(layerName) {
        if (activeLayers[layerName].eventsEnabled) {
            layers.push(activeLayers[layerName].layer)
        }
    })

    selectFeature = new ALKMaps.Control.SelectFeature(
        layers,
        {
            onSelect: function(item) {
                if (options.onSelect) {
                    options.onSelect(item, ALKMaps, map, api.onSelect)
                } else {
                    api.onSelect(item)
                }
            },
            onUnselect: function(item) {
                if (options.onUnselect) {
                    options.onUnselect(item, ALKMaps, map, api.onUnselect)
                } else {
                    api.onUnselect(item)
                }
            }
        }
    )
    map.addControl(selectFeature)

    //save selectFeature for usage in other places
    Object.keys(activeLayers).forEach(function(layerName) {
        if (activeLayers[layerName].eventsEnabled) {
            activeLayers[layerName].selectFeature = selectFeature
        }
    })

    return api
}
