var layers = require('./layers')
var EventHandler = require('./EventHandler')
var BaseLayer = require('./layers/BaseLayer')
var helpers = require('./helpers')

var PnetMap = function() {
    var map
    var activeLayers = {}
    var baseLayer
    var eventHandler
    var panel

    return {
        Layer: layers,

        getActiveLayers: function() {
            return activeLayers
        },

        getMap: function() {
            return map
        },

        init: function init(apiKey, div, options) {
            options = options || {}

            //set the API key
            ALKMaps.APIKey = apiKey

            //create the controls array
            var controls
            if (options.fixed) {
                //no controls means you can't even pan/zoom/etc
                controls = []
            } else if (options.minimalist) {
                //minimum required control to move around the map
                controls = [
                    new ALKMaps.Control.Navigation()
                ]
            } else {
                //default control set
                controls = [
                    new ALKMaps.Control.Geolocate(),
                    new ALKMaps.Control.MousePosition(),
                    new ALKMaps.Control.Navigation(),
                    new ALKMaps.Control.OverviewMap(),
                    new ALKMaps.Control.PanZoomBar(),
                    new ALKMaps.Control.ScaleLine()
                ]
            }

            //create the alk map
            map = new ALKMaps.Map(div, {
                displayProjection: new ALKMaps.Projection('EPSG:4326'),
                controls: controls
            })

            baseLayer = new BaseLayer(ALKMaps, map, options)

            return this
        },

        destroy: function() {
            if (eventHandler) {
                eventHandler.destroy()
            }
            eventHandler = null

            var keys = Object.keys(activeLayers)
            keys.forEach(this.removeLayer)
            activeLayers = {}

            if (baseLayer) {
                baseLayer.destroy()
            }
            baseLayer = null

            if (panel) {
                panel.destroy()
            }
            panel = null

            if (map) {
                map.destroy()
            }
            map = null

            return this
        },

        setBaseStyle: function(style) {
            baseLayer.layer.changeStyle(style)
            return this
        },

        addLayer: function(layerType, layerName, options) {
            options = options || {}
            options.layerName = layerName
            var Layer = layers[layerType]
            activeLayers[layerName] = new Layer(ALKMaps, map, options)
            return this
        },

        plotPoints: function(layerName, items, options) {
            options = options || {}

            var layer = activeLayers[layerName]

            for (var i = 0; i < items.length; i++) {
                var item = items[i]

                if (helpers.isValidGps(item.location)) {
                    layer.addItem(item, options)
                }
            }
            layer.doneAddingItems()

            return this
        },

        removePoints: function(layerName) {
            activeLayers[layerName].clearItems()
            return this
        },
        
        selectPoints: function(layerName, callback) {
            var layer = activeLayers[layerName]
            
            layer.selectFeatures(callback)
            
            return this
        },
        
        unselectPoints: function(layerName) {
            var layer = activeLayers[layerName]
            
            layer.unselectFeatures()
            
            return this
        },

        enableEvents: function(options) {
            options = options || {}

            if (!eventHandler) {
                eventHandler = new EventHandler(ALKMaps, map, activeLayers, options)
            }

            eventHandler.enable()

            return this
        },

        disableEvents: function() {
            if (eventHandler) {
                eventHandler.disable()
            }

            return this
        },

        hidePopups: function() {
            map.popups.forEach(function(popup) {
                popup.hide()
                map.removePopup(popup)
            })

            return this
        },

        setLayerVisibility: function(layerName, visibility) {
            var layer = activeLayers[layerName]
            if (layer.layer.getVisibility() !== !!visibility) {
                layer.layer.setVisibility(!!visibility)
            }

            return this
        },

        removeLayer: function(layerName) {
            activeLayers[layerName].destroy()
            delete activeLayers[layerName]
            return this
        },

        addPanel: function(options) {
            options = options || {}

            if (!panel) {
                if (options.minimalist) {
                    panel = new ALKMaps.Control.NavPanel()
                    map.addControl(panel)

                    while (panel.controls.length) {
                        panel.controls.pop()
                    }
                } else {
                    panel = new ALKMaps.Control.NavPanel({
                        addSelectButton: true
                    })
                    map.addControl(panel)

                    //put select button first, and toggle it
                    var select = panel.controls.pop()
                    panel.controls.shift()
                    panel.controls.unshift(select)
                }
            }
            return this
        },

        addPanelButton: function(options) {
            var button = new ALKMaps.Control.Button(options)
            panel.addControls([button])
            if (options.autoActivate) {
                button.activate()
            }
            return this
        },

        reverseGeocode: function(lon, lat, success, failure, options) {
            options = options || {}

            return ALKMaps.Geocoder.reverseGeocode({
                lonLat: new ALKMaps.LonLat(lon, lat),
                region: options.region || 'NA',
                listSize: options.listSize || null,
                async: !options.sync,
                success: success,
                failure: failure
            })
        },

        setCenter: function(lon, lat, zoom) {
            var lonLat = helpers.createLonLat(lon, lat, map, ALKMaps)

            map.setCenter(
                lonLat,
                zoom
            )

            return this
        }
    }
}

//vanilla js support
module.exports = PnetMap
global.PnetMap = PnetMap

//angular support
if (angular) {
    angular.module('PnetMaps', [])
        .factory('pnetMap', PnetMap)
        .service('ALKMaps', function() {
            return ALKMaps
        })
}
