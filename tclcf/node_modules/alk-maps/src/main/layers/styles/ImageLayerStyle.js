module.exports = function(ALKMaps, options) {
    return new ALKMaps.Style({
        strokeColor: '${strokeColor}',
        pointRadius: '${radius}',
        strokeWidth: 1,
        fillColor: '${fill}',
        fontSize: '11px',
        fontColor: '${fontColor}',
        label: '${label}',
        graphicName: '${graphicName}',
        externalGraphic: '${externalGraphic}',
        graphicHeight: '${graphicHeight}',
        graphicWidth: '${graphicWidth}',
        graphicXOffset: '${graphicXOffset}',
        graphicYOffset: '${graphicYOffset}',
        labelYOffset: '${labelOffset}',
        fillOpacity: '${fillOpacity}',
        cursor: 'pointer'
    }, {
        context: {
            externalGraphic: function(feature) {
                return feature.cluster ? '' : feature.externalGraphic || options.externalGraphic || ALKMaps.IMAGE.OTHER
            },
            graphicHeight: function(feature) {
                return feature.graphicHeight || options.graphicHeight || 26
            },
            graphicWidth: function(feature) {
                return feature.graphicWidth || options.graphicWidth || 26
            },
            graphicXOffset: function(feature) {
                return feature.graphicXOffset || options.graphicXOffset || -13
            },
            graphicYOffset: function(feature) {
                return feature.graphicYOffset || options.graphicYOffset || -13
            },
            graphicName: function(feature) {
                return feature.cluster ? 'circle' : ''
            },
            fill: function(feature) {
                return feature.colorCode || options.colorCode || '#222222'
            },
            fillOpacity: function(feature) {
                return feature.cluster ? options.clusterFillOpacity || 0.7 : options.fillOpacity || 1
            },
            fontColor: function(feature) {
                return feature.fontColor || options.fontColor || 'black'
            },
            radius: function(feature) {
                return feature.cluster ? Math.sqrt(feature.cluster.length / Math.PI) * 8 : 11
            },
            label: function(feature) {
                return feature.cluster ? feature.cluster.length : ''
            },
            labelOffset: function(feature) {
                return feature.cluster ? 0 : -12
            },
            strokeColor: function(feature) {
                if (feature.cluster) {
                    return feature.clusterStrokeColor || options.clusterStrokeColor || '#666666'
                } else {
                    return options.strokeColor || '#000000'
                }
            }
        }
    })
}
