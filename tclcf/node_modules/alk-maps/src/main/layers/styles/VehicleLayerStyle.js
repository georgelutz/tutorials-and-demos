//The truck icon is oriented towards the west, so rotate them to reflect the heading accurately.
var headings = {
    'NORTH': {angle: 90, graphic: 'truck'},
    'N': {angle: 90, graphic: 'truck'},
    'NORTHEAST': {angle: 315, graphic: 'flipTruck'},
    'NE': {angle: 315, graphic: 'flipTruck'},
    'EAST': {angle: 0, graphic: 'flipTruck'},
    'E': {angle: 0, graphic: 'flipTruck'},
    'SOUTHEAST': {angle: 45, graphic: 'flipTruck'},
    'SE': {angle: 45, graphic: 'flipTruck'},
    'SOUTH': {angle: 90, graphic: 'flipTruck'},
    'S': {angle: 90, graphic: 'flipTruck'},
    'SOUTHWEST': {angle: 315, graphic: 'truck'},
    'SW': {angle: 315, graphic: 'truck'},
    'WEST': {angle: 0, graphic: 'truck'},
    'W': {angle: 0, graphic: 'truck'},
    'NORTHWEST': {angle: 45, graphic: 'truck'},
    'NW': {angle: 45, graphic: 'truck'}
}

module.exports = function(ALKMaps, options) {
    //create the flipped truck icon
    var trucks = ALKMaps.Renderer.symbol.truck
    ALKMaps.Renderer.symbol.flipTruck = []
    trucks.forEach(function(truck, index) {
        if (truck >= 0 && (index % 2) === 0) {
            truck = 32 - truck
        }
        ALKMaps.Renderer.symbol.flipTruck.push(truck)
    })

    return new ALKMaps.Style({
        strokeColor: '${strokeColor}',
        pointRadius: '${radius}',
        strokeWidth: 1,
        fillColor: '${fill}',
        fontSize: '11px',
        fontColor: '${fontColor}',
        label: '${label}',
        graphicName: '${graphic}',
        graphicYOffset: -10,
        rotation: '${heading}',
        labelYOffset: '${labelOffset}',
        fillOpacity: '${fillOpacity}',
        cursor: 'pointer'
    }, {
        context: {
            fill: function(feature) {
                return feature.colorCode || options.colorCode || '#222222'
            },
            fillOpacity: function(feature) {
                return feature.cluster ? options.clusterFillOpacity || 0.7 : options.fillOpacity || 1
            },
            fontColor: function() {
                return options.fontColor || 'black'
            },
            radius: function(feature) {
                return feature.cluster ? Math.sqrt(feature.cluster.length / Math.PI) * 8 : 11
            },
            graphic: function(feature) {
                return feature.cluster ? 'circle' : headings[feature.attributes.heading || 'EAST'].graphic
            },
            heading: function(feature) {
                return feature.cluster ? 0 : headings[feature.attributes.heading || 'EAST'].angle
            },
            label: function(feature) {
                return feature.cluster ? feature.cluster.length : ''
            },
            labelOffset: function(feature) {
                return feature.cluster ? 0 : -12
            },
            strokeColor: function(feature) {
                return feature.cluster ? options.clusterStrokeColor || '#666666' : options.strokeColor || '#000000'
            }
        }
    })
}
