describe('EventHandler', function() {
    var ALKMaps
    var map
    var api
    var EventHandler
    var clock
    var helpers

    beforeEach(function() {
        clock = sinon.useFakeTimers()

        map = new MockMap()

        ALKMaps = new MockALKMaps()

        helpers = {}
        helpers.parseString = sinon.stub()

        EventHandler = proxyquire('../main/EventHandler', {
            './helpers': helpers
        })
    })

    afterEach(function() {
        clock.restore()
    })

    it('should instantiate', function() {
        var selectFeature = {}
        selectFeature.activate = sinon.stub()
        selectFeature.deactivate = sinon.stub()
        ALKMaps.Control.SelectFeature.returns(selectFeature)

        var item = {item: 123}
        var activeLayers = [
            {eventsEnabled: true, layer: 1},
            {eventsEnabled: false, layer: 2},
            {eventsEnabled: true, layer: 3}
        ]

        //instantiate and init
        api = new EventHandler(ALKMaps, map, activeLayers, {})
        api.onSelect = sinon.stub()
        api.onUnselect = sinon.stub()

        map.addControl.should.have.been.calledWith(selectFeature)
        ALKMaps.Control.SelectFeature.should.have.been.calledWith(
            [activeLayers[0].layer, activeLayers[2].layer],
            sinon.match.object
        )
        var handlers = ALKMaps.Control.SelectFeature.getCall(0).args[1]
        handlers.should.have.property('onSelect').that.is.a('function')
        handlers.should.have.property('onUnselect').that.is.a('function')

        activeLayers.every(function(layer) {
            layer.selectFeature.should.equal(selectFeature)
        })

        //call onSelect handler
        handlers.onSelect(item)

        api.onSelect.should.have.been.calledWith(item)

        //call onUnselect handler
        handlers.onUnselect(item)

        api.onUnselect.should.have.been.calledWith(item)

        //enable
        api.enable()

        selectFeature.activate.should.have.been.calledWith()

        //disable
        api.disable()

        selectFeature.deactivate.should.have.been.calledWith()
    })

    it('should support custom handlers', function() {
        var item = {item: 123}
        var options = {
            onSelect: sinon.stub(),
            onUnselect: sinon.stub()
        }

        //instantiate and init
        api = new EventHandler(ALKMaps, map, [], options)
        api.onSelect = sinon.stub()
        api.onUnselect = sinon.stub()

        var handlers = ALKMaps.Control.SelectFeature.getCall(0).args[1]
        handlers.should.have.property('onSelect').that.is.a('function')
        handlers.should.have.property('onUnselect').that.is.a('function')

        //call onSelect handler
        handlers.onSelect(item)

        options.onSelect.should.have.been.calledWith(item, ALKMaps, map, api.onSelect)

        //call onUnselect handler
        handlers.onUnselect(item)

        options.onUnselect.should.have.been.calledWith(item, ALKMaps, map, api.onUnselect)
    })

    describe('once instantiated', function() {
        var selectFeature

        beforeEach(function() {
            selectFeature = {}
            ALKMaps.Control.SelectFeature.returns(selectFeature)

            api = new EventHandler(ALKMaps, map, [], {})
        })

        it('should support destroying', function() {
            map.removeControl = sinon.stub()
            selectFeature.destroy = sinon.stub()

            api.destroy()

            map.removeControl.should.have.been.calledWith(selectFeature)
            selectFeature.destroy.should.have.been.calledWith()
        })

        it('should not generate popups onSelect unless necessary', function() {
            api.generatePopup = sinon.stub()
            api.generateClusterPopup = sinon.stub()
            var item = {item: true, layer: {options: {}}}

            api.onSelect(item)

            map.addPopup.should.not.have.been.called
            api.generatePopup.should.not.have.been.called
            api.generateClusterPopup.should.not.have.been.called
        })

        it('should generate feature popups onSelect', function() {
            api.generatePopup = sinon.stub()
            api.generateClusterPopup = sinon.stub()
            var item = {item: true, layer: {options: {popupContent: 'abcd'}}}

            api.onSelect(item)

            map.addPopup.should.not.have.been.called
            api.generatePopup.should.have.been.calledWith(item)
            api.generateClusterPopup.should.not.have.been.called
        })

        it('should generate cluster popups onSelect', function() {
            api.generatePopup = sinon.stub()
            api.generateClusterPopup = sinon.stub()
            var item = {item: true, cluster: true, layer: {options: {clusterPopupContent: 'abcd'}}}

            api.onSelect(item)

            map.addPopup.should.not.have.been.called
            api.generatePopup.should.not.have.been.called
            api.generateClusterPopup.should.have.been.calledWith(item)
        })

        it('should add popups to the map onSelect', function() {
            api.generatePopup = sinon.stub()
            api.generateClusterPopup = sinon.stub()
            var item = {
                item: true,
                popup: {
                    show: sinon.stub(),
                    updateSize: sinon.stub()
                }
            }

            api.onSelect(item)
            clock.tick(1)

            map.addPopup.should.have.been.calledWith(item.popup, true)
            api.generatePopup.should.not.have.been.called
            api.generateClusterPopup.should.not.have.been.called
            item.popup.show.should.have.been.called
            item.popup.updateSize.should.have.been.called
        })

        it('should hide popups onUnselect', function() {
            var popup = {
                hide: sinon.stub(),
                destroy: sinon.stub()
            }
            var item = {item: true}

            //nothing to hide
            api.onUnselect(item)

            map.removePopup.should.not.have.been.called

            //something to hide
            item.popup = popup
            api.onUnselect(item)

            popup.hide.should.have.been.called
            popup.destroy.should.have.been.called
            map.removePopup.should.have.been.calledWith(popup)
            should.not.exist(item.popup)
        })

        it('should support generating feature popup content', function() {
            var item = {
                item: true,
                geometry: {
                    x: 123,
                    y: 456
                },
                layer: {
                    options: {
                        popupContent: 'abcd'
                    }
                },
                attributes: { attr: true },
                createPopup: sinon.stub()
            }
            helpers.parseString.withArgs('abcd', item.attributes).returns('parsedString')
            ALKMaps.LonLat = function(x, y) {
                return { x: x, y: y }
            }
            ALKMaps.Size = function(x, y) {
                return { w: x, h: y }
            }
            var popup = { a: 'popup' }
            ALKMaps.Popup.FramedCloud.returns(popup)
            api.onUnselect = { bind: sinon.stub().returns('bind') }

            api.generatePopup(item)

            ALKMaps.Popup.FramedCloud.should.have.been.calledWith(
                'FramedCloud',
                { x: 123, y: 456 },
                null,
                'parsedString',
                null,
                true,
                'bind'
            )
            item.createPopup.should.have.been.calledWith(true)
            item.popup.should.equal(popup)
            api.onUnselect.bind.should.have.been.calledWith(api, item)
        })

        it('should support generating cluster popup content', function() {
            var item = {
                item: true,
                cluster: [
                    { attributes: 1 },
                    { attributes: 2 },
                    { attributes: 3 }
                ],
                geometry: {
                    x: 123,
                    y: 456
                },
                layer: {
                    options: {
                        clusterPopupContent: 'def'
                    }
                },
                attributes: { attr: true },
                createPopup: sinon.stub()
            }
            helpers.parseString.withArgs('def<br>', item.cluster[0].attributes).returns('content1<br>')
            helpers.parseString.withArgs('def<br>', item.cluster[1].attributes).returns('content2<br>')
            helpers.parseString.withArgs('def<br>', item.cluster[2].attributes).returns('content3<br>')
            ALKMaps.LonLat = function(x, y) {
                return { x: x, y: y }
            }
            ALKMaps.Size = function(x, y) {
                return { w: x, h: y }
            }
            var popup = { a: 'popup' }
            ALKMaps.Popup.FramedCloud.returns(popup)
            api.onUnselect = { bind: sinon.stub().returns('bind') }

            api.generateClusterPopup(item)

            ALKMaps.Popup.FramedCloud.should.have.been.calledWith(
                'FramedCloud',
                { x: 123, y: 456 },
                null,
                'content1<br>content2<br>content3<br>',
                null,
                true,
                'bind'
            )
            item.createPopup.should.have.been.calledWith(true)
            item.popup.should.equal(popup)
            api.onUnselect.bind.should.have.been.calledWith(api, item)
        })

        it('should support generating cluster popup content with custom template', function() {
            var item = {
                item: true,
                cluster: [
                    { attributes: 1 },
                    { attributes: 2 },
                    { attributes: 3 }
                ],
                geometry: {
                    x: 123,
                    y: 456
                },
                layer: {
                    options: {
                        clusterPopupContent: 'abc<repeat>def</repeat>ghi'
                    }
                },
                attributes: { attr: true },
                createPopup: sinon.stub()
            }
            helpers.parseString.withArgs('def', item.cluster[0].attributes).returns('content1')
            helpers.parseString.withArgs('def', item.cluster[1].attributes).returns('content2')
            helpers.parseString.withArgs('def', item.cluster[2].attributes).returns('content3')
            ALKMaps.LonLat = function(x, y) {
                return { x: x, y: y }
            }
            ALKMaps.Size = function(x, y) {
                return { w: x, h: y }
            }
            var popup = { a: 'popup' }
            ALKMaps.Popup.FramedCloud.returns(popup)
            api.onUnselect = { bind: sinon.stub().returns('bind') }

            api.generateClusterPopup(item)

            ALKMaps.Popup.FramedCloud.should.have.been.calledWith(
                'FramedCloud',
                { x: 123, y: 456 },
                null,
                'abccontent1content2content3ghi',
                null,
                true,
                'bind'
            )
            item.createPopup.should.have.been.calledWith(true)
            item.popup.should.equal(popup)
            api.onUnselect.bind.should.have.been.calledWith(api, item)
        })
    })
})
