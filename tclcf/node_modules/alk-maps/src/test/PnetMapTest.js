describe('PnetMap', function() {
    var PnetMap
    var pnetMapInstance
    var ALKMaps
    var angular
    var layers
    var BaseLayer
    var baseLayerApi
    var map
    var EventHandler
    var eventHandler
    var helpers

    beforeEach(function() {
        baseLayerApi = {}
        baseLayerApi.layer = {}
        baseLayerApi.layer.changeStyle = sinon.stub()
        baseLayerApi.destroy = sinon.stub()
        BaseLayer = sinon.stub().returns(baseLayerApi)

        layers = {}

        eventHandler = {}
        eventHandler.enable = sinon.stub()
        eventHandler.disable = sinon.stub()
        EventHandler = sinon.stub()
        EventHandler.returns(eventHandler)

        map = new MockMap()

        ALKMaps = new MockALKMaps()
        ALKMaps.Map.returns(map)

        angular = {}
        angular.factory = sinon.stub().returns(angular)
        angular.service = sinon.stub().returns(angular)
        angular.module = sinon.stub().returns(angular)
        global.angular = angular

        helpers = {}
        helpers.isValidGps = sinon.stub()

        PnetMap = proxyquire('../main/PnetMap', {
            './layers': layers,
            './EventHandler': EventHandler,
            './layers/BaseLayer': BaseLayer,
            './helpers': helpers
        })
        pnetMapInstance = new PnetMap()
        global.ALKMaps = ALKMaps
    })

    afterEach(function() {
        delete global.angular
        delete global.ALKMaps
    })

    it('should support initializing alk maps', function() {
        var apiKey = 'someApiKey'
        var div = 'someDiv'
        var options = { abc: 'def'}
        ALKMaps.Projection.returns({ abc: 123 })

        var returned = pnetMapInstance.init(apiKey, div, options)

        returned.should.equal(pnetMapInstance)
        ALKMaps.APIKey.should.equal(apiKey)
        ALKMaps.Map.should.have.been.calledWith(div, {
            displayProjection: { abc: 123 },
            controls: sinon.match.array
        })
        BaseLayer.should.have.been.calledWith(ALKMaps, map, options)
        pnetMapInstance.getMap().should.equal(map)
    })

    it('should support initializing alk maps with fixed view', function() {
        var apiKey = 'someApiKey'
        var div = 'someDiv'
        var options = { fixed: true }
        ALKMaps.Projection.returns({ abc: 123 })

        var returned = pnetMapInstance.init(apiKey, div, options)

        returned.should.equal(pnetMapInstance)
        ALKMaps.APIKey.should.equal(apiKey)
        ALKMaps.Map.should.have.been.calledWith(div, {
            displayProjection: { abc: 123 },
            controls: []
        })
        BaseLayer.should.have.been.calledWith(ALKMaps, map, options)
        pnetMapInstance.getMap().should.equal(map)
    })

    it('should support initializing alk maps without ui controls', function() {
        var apiKey = 'someApiKey'
        var div = 'someDiv'
        var options = { minimalist: true }
        ALKMaps.Projection.returns({ abc: 123 })
        ALKMaps.Control.Navigation.returns({ beep: 'beep' })

        var returned = pnetMapInstance.init(apiKey, div, options)

        returned.should.equal(pnetMapInstance)
        ALKMaps.APIKey.should.equal(apiKey)
        ALKMaps.Map.should.have.been.calledWith(div, {
            displayProjection: { abc: 123 },
            controls: [ { beep: 'beep' } ]
        })
        BaseLayer.should.have.been.calledWith(ALKMaps, map, options)
        pnetMapInstance.getMap().should.equal(map)
    })

    it('should support angular', function() {
        PnetMap = proxyquire('../main/PnetMap', {
            './layers': layers,
            './EventHandler': EventHandler,
            './layers/BaseLayer': BaseLayer
        })

        angular.module.should.have.been.calledWith('PnetMaps', [])
        angular.factory.should.have.been.calledWith('pnetMap', PnetMap)
        angular.service.should.have.been.calledWith('ALKMaps', sinon.match.func)
        angular.service.getCall(0).args[1]().should.equal(ALKMaps)
    })

    describe('once initialized', function() {
        beforeEach(function() {
            pnetMapInstance.init('someApiKey', 'someDiv')
        })

        it('should support changing base layer style', function() {
            var style = { abc: 'def' }
            var returned = pnetMapInstance.setBaseStyle(style)

            returned.should.equal(pnetMapInstance)
            baseLayerApi.layer.changeStyle.should.have.been.calledWith(style)
        })

        it('should support adding layers', function() {
            layers.type = sinon.stub()
            layers.type2 = sinon.stub()
            var layer1 = pnetMapInstance.addLayer('type', 'name')

            layer1.should.equal(pnetMapInstance)
            layers.type.should.have.been.calledWith(ALKMaps, map, { layerName: 'name' })

            var layer2 = pnetMapInstance.addLayer('type2', 'name2', { abc: 'def'})
            layer2
            layers.type2.should.have.been.calledWith(ALKMaps, map, { abc: 'def', layerName: 'name2' })

            var activeLayers = pnetMapInstance.getActiveLayers()
            should.exist(activeLayers.name)
            should.exist(activeLayers.name2)
        })

        it('should support adding a panel and button', function() {
            var hand = { hand: true }
            var select = { select: true }
            var button = { button: true,
                activate: sinon.stub() }
            var panel = { panel: true, controls: [
                hand, {}, {}, select
            ], addControls: sinon.stub() }
            ALKMaps.Control.NavPanel.returns(panel)
            ALKMaps.Control.Button.returns(button)

            //add a panel
            var returned = pnetMapInstance.addPanel()

            returned.should.equal(pnetMapInstance)
            ALKMaps.Control.NavPanel.should.have.been.calledWith({ addSelectButton: true })
            map.addControl.should.have.been.calledWith(panel)
            panel.controls.should.not.contain(hand)
            panel.controls[0].should.equal(select)

            //add a button
            returned = pnetMapInstance.addPanelButton(button)

            returned.should.equal(pnetMapInstance)
            ALKMaps.Control.Button.should.have.been.calledWith(button)
            panel.addControls.should.have.been.calledWith([button])
            button.activate.should.not.have.been.called

            //add an activated button
            button.autoActivate = true
            pnetMapInstance.addPanelButton(button)

            button.activate.should.have.been.called

            //duplicate call panel
            map.addControl.reset()
            pnetMapInstance.addPanel()

            map.addControl.should.not.have.been.called
        })

        it('should support adding an empty panel', function() {
            var panel = { panel: true, controls: [
                {}, {}, {}, {}
            ] }
            ALKMaps.Control.NavPanel.returns(panel)

            //add a panel
            var returned = pnetMapInstance.addPanel({ minimalist: true })

            returned.should.equal(pnetMapInstance)
            ALKMaps.Control.NavPanel.should.have.been.calledWith()
            map.addControl.should.have.been.calledWith(panel)
            panel.controls.should.be.empty
        })

        describe('with an active layer', function() {
            var layer
            var layer2
            var layerName

            beforeEach(function() {
                layerName = 'layerName'

                layer = {}
                layer.clearItems = sinon.stub()
                layer.setVisibility = sinon.stub()
                layer.destroy = sinon.stub()
                layer.addItem = sinon.stub()
                layer.doneAddingItems = sinon.stub()
                layer.eventsEnabled = true
                layers.type = sinon.stub().returns(layer)
                pnetMapInstance.addLayer('type', layerName)

                layer2 = {}
                layer2.destroy = sinon.stub()
                layers.type2 = sinon.stub().returns(layer2)

                pnetMapInstance.addLayer('type2', 'disabledLayer')
            })

            it('should support plotting points', function() {
                var items = [
                    { a: '1', valid: true, location: { lon: 180, lat: 0}},
                    { a: '2', valid: true, location: { lon: -180, lat: 0}},
                    { a: '3', valid: false, location: { lon: -181, lat: 0}}
                ]
                helpers.isValidGps.withArgs(items[0].location).returns(true)
                helpers.isValidGps.withArgs(items[1].location).returns(false)
                helpers.isValidGps.withArgs(items[2].location).returns(true)

                var returned = pnetMapInstance.plotPoints(layerName, items)

                returned.should.equal(pnetMapInstance)
                layer.addItem.should.have.callCount(2)
                layer.addItem.should.have.been.calledWith(items[0], {})
                layer.addItem.should.have.been.calledWith(items[2], {})
                layer.doneAddingItems.should.have.been.calledWith()
            })

            it('should support plotting points with options', function() {
                var options = { options: true }
                var items = [
                    { a: '1', valid: true, location: { lon: 1, lat: 2}},
                    { a: '2', valid: true, location: { lon: 3, lat: 4}},
                    { a: '3', valid: false, location: { lon: 5, lat: 6}}
                ]
                helpers.isValidGps.withArgs(items[0].location).returns(true)
                helpers.isValidGps.withArgs(items[1].location).returns(false)
                helpers.isValidGps.withArgs(items[2].location).returns(true)

                var returned = pnetMapInstance.plotPoints(layerName, items, options)

                returned.should.equal(pnetMapInstance)
                layer.addItem.should.have.callCount(2)
                layer.addItem.should.have.been.calledWith(items[0], options)
                layer.addItem.should.have.been.calledWith(items[2], options)
                layer.doneAddingItems.should.have.been.calledWith()
            })

            it('should support removing points', function() {
                var returned = pnetMapInstance.removePoints(layerName)

                returned.should.equal(pnetMapInstance)
                layer.clearItems.should.have.been.called
            })

            it('should support enabling / disabling events', function() {
                var options = { options: true }

                //disable before enable
                pnetMapInstance.disableEvents()

                eventHandler.disable.should.not.have.been.called

                //enable once
                var returned = pnetMapInstance.enableEvents(options)

                returned.should.equal(pnetMapInstance)
                EventHandler.should.have.been.calledWith(ALKMaps, map, { layerName: layer, disabledLayer: layer2 }, options)
                eventHandler.enable.should.have.been.called

                //enable twice
                EventHandler.reset()
                eventHandler.enable.reset()
                pnetMapInstance.enableEvents()

                EventHandler.should.not.have.been.called
                eventHandler.enable.should.have.been.calledWith()

                //disable again
                returned = pnetMapInstance.disableEvents()

                returned.should.equal(pnetMapInstance)
                eventHandler.disable.should.have.been.calledWith()
            })

            it('should support hiding popups', function() {
                map.popups = [
                    { hide: sinon.stub() },
                    { hide: sinon.stub() }
                ]

                //hide after enabling events
                var returned = pnetMapInstance.hidePopups()

                returned.should.equal(pnetMapInstance)
                map.popups[0].hide.should.have.been.calledWith()
                map.popups[1].hide.should.have.been.calledWith()
                map.removePopup.should.have.been.calledWith(map.popups[0])
                map.removePopup.should.have.been.calledWith(map.popups[1])
            })

            it('should support hiding layers', function() {
                layer.layer = {
                    getVisibility: sinon.stub().returns(true),
                    setVisibility: sinon.stub()
                }

                var returned = pnetMapInstance.setLayerVisibility(layerName, false)

                returned.should.equal(pnetMapInstance)
                layer.layer.setVisibility.should.have.been.calledWith(false)
            })

            it('should support showing layers', function() {
                layer.layer = {
                    getVisibility: sinon.stub().returns(false),
                    setVisibility: sinon.stub()
                }

                var returned = pnetMapInstance.setLayerVisibility(layerName, true)

                returned.should.equal(pnetMapInstance)
                layer.layer.setVisibility.should.have.been.calledWith(true)
            })

            it('should support removing layers', function() {
                var returned = pnetMapInstance.removeLayer(layerName)

                returned.should.equal(pnetMapInstance)
                layer.destroy.should.have.been.called
                should.not.exist(pnetMapInstance.getActiveLayers().layerName)
            })

            it('should support destroying', function() {
                pnetMapInstance = new PnetMap()
                var returned = pnetMapInstance.destroy()

                returned.should.equal(pnetMapInstance)
            })

            it('should support destroying all objects', function() {
                var panel = { panel: true,
                    controls: [
                        {}, {}, {}, {}
                    ],
                    addControls: sinon.stub(),
                    destroy: sinon.stub()
                }
                ALKMaps.Control.NavPanel.returns(panel)
                eventHandler.destroy = sinon.stub()
                pnetMapInstance.enableEvents()
                pnetMapInstance.addPanel()

                pnetMapInstance.destroy()

                layer.destroy.should.have.been.calledWith()
                layer2.destroy.should.have.been.calledWith()
                baseLayerApi.destroy.should.have.been.calledWith()
                map.destroy.should.have.been.calledWith()
                eventHandler.destroy.should.have.been.calledWith()
                panel.destroy.should.have.been.calledWith()
            })

            it('should support reverse geocoding', function() {
                var lon = -93.44903
                var lat = 44.92177
                var success = sinon.stub()
                var failure = sinon.stub()
                ALKMaps.Geocoder.reverseGeocode.returns('abcd')
                ALKMaps.LonLat = function(a, b) {
                    return {lon: a, lat: b}
                }
                var returned = pnetMapInstance.reverseGeocode(lon, lat, success, failure)

                ALKMaps.Geocoder.reverseGeocode.should.have.been.calledWith({
                    lonLat: { lon: lon, lat: lat},
                    region: 'NA',
                    async: true,
                    listSize: null,
                    success: success,
                    failure: failure
                })
                returned.should.equal('abcd')
            })

            it('should support reverse geocoding with options', function() {
                var lon = -93.44903
                var lat = 44.92177
                var success = sinon.stub()
                var failure = sinon.stub()
                ALKMaps.Geocoder.reverseGeocode.returns('abcd')
                ALKMaps.LonLat = function(a, b) {
                    return {lon: a, lat: b}
                }
                var options = {
                    region: 'region2',
                    listSize: 123,
                    sync: true
                }
                var returned = pnetMapInstance.reverseGeocode(lon, lat, success, failure, options)

                ALKMaps.Geocoder.reverseGeocode.should.have.been.calledWith({
                    lonLat: { lon: lon, lat: lat},
                    region: 'region2',
                    async: false,
                    listSize: 123,
                    success: success,
                    failure: failure
                })
                returned.should.equal('abcd')
            })

            it('should support setCenter', function() {
                var lon = 1
                var lat = 2
                var zoom = 3
                helpers.createLonLat = sinon.stub().returns(4)

                pnetMapInstance.setCenter(lon, lat, zoom, ALKMaps)

                helpers.createLonLat.should.have.been.calledWith(1, 2, map)
                map.setCenter.should.have.been.calledWith(4, zoom)
            })

            it('should support selectPoints', function() {
                layer.selectFeatures = sinon.stub()
                var callback = sinon.stub()

                pnetMapInstance.selectPoints(layerName, callback)

                layer.selectFeatures.should.have.been.calledWith(callback)
            })

            it('should support unselectPoints', function() {
                layer.unselectFeatures = sinon.stub()

                pnetMapInstance.unselectPoints(layerName)

                layer.unselectFeatures.should.have.been.called
            })
        })
    })
})
