describe('BaseLayer', function() {
    var BaseLayer
    var ALKMaps
    var LayerApi
    var map

    beforeEach(function() {
        ALKMaps = new MockALKMaps()
        map = new MockMap()
        LayerApi = new MockLayerApi()

        BaseLayer = proxyquire('../main/layers/BaseLayer', {
            './LayerApi': LayerApi.constructor
        })
    })

    it('should create a base layer', function() {
        var layer = { abc: 123 }
        ALKMaps.Layer.BaseMap.returns(layer)

        var baseLayerApi = new BaseLayer(ALKMaps, map, {})

        ALKMaps.Layer.BaseMap.should.have.been.calledWith('Default', {
            style: ALKMaps.STYLE.DEFAULT,
            region: 'NA'
        }, { wrapDateLine: true })
        map.addLayer.should.have.been.calledWith(layer)
        map.setCenter.should.have.been.calledWith({ lon: -98.5, lat: 40 }, 5)
        baseLayerApi.should.equal(LayerApi.api)
        LayerApi.constructor.should.have.been.calledWith(ALKMaps, map, layer, null, {})
    })

    it('should support options', function() {
        var layer = { abc: 123 }
        ALKMaps.Layer.BaseMap.returns(layer)
        var options = {
            style: ALKMaps.STYLE.Blah,
            region: 'Nether',
            defaultLon: 12,
            defaultLat: 34,
            defaultZoom: 56
        }

        var baseLayerApi = new BaseLayer(ALKMaps, map, options)

        ALKMaps.Layer.BaseMap.should.have.been.calledWith('Default', {
            style: ALKMaps.STYLE.Blah,
            region: 'Nether'
        }, { wrapDateLine: true })
        map.setCenter.should.have.been.called
        baseLayerApi.should.equal(LayerApi.api)
        map.setCenter.should.have.been.calledWith({ lon: 12, lat: 34 }, 56)
        LayerApi.constructor.should.have.been.calledWith(ALKMaps, map, layer, null, options)
    })
})
