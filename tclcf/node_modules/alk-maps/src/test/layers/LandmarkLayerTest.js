describe('LandmarkLayer', function() {
    var LandmarkLayer
    var ALKMaps
    var map
    var VectorLayer
    var LandmarkLayerStyle
    var api
    var style
    var options

    beforeEach(function() {
        ALKMaps = new MockALKMaps()
        map = new MockMap()

        api = { api: true }
        style = {
            abc: 123,
            defaultStyle: {},
            clone: sinon.stub().returnsThis()
        }
        options = {}
        VectorLayer = sinon.stub().returns(api)
        LandmarkLayerStyle = sinon.stub().returns(style)

        LandmarkLayer = proxyquire('../main/layers/LandmarkLayer', {
            './VectorLayer': VectorLayer,
            './styles/LandmarkLayerStyle': LandmarkLayerStyle
        })
    })

    it('should be a styled vector layer', function() {
        var landmarkLayerApi = new LandmarkLayer(ALKMaps, map, options)

        LandmarkLayerStyle.should.have.been.calledWith(ALKMaps, options)
        options.defaultStyle.should.equal(style)
        VectorLayer.should.have.been.calledWith(ALKMaps, map, options)
        landmarkLayerApi.should.equal(api)
    })

    it('should honor provided style', function() {
        options.defaultStyle = {
            abc: 123,
            defaultStyle: {},
            clone: sinon.stub().returnsThis()
        }

        var landmarkLayerApi = new LandmarkLayer(ALKMaps, map, options)

        LandmarkLayerStyle.should.not.have.been.called
        options.selectedStyle.should.deep.equal({
            abc: 123,
            defaultStyle: {
                strokeColor: '#000000',
                fontSize: 14
            },
            clone: options.defaultStyle.clone
        })
        VectorLayer.should.have.been.calledWith(ALKMaps, map, options)
        landmarkLayerApi.should.equal(api)
    })
})
