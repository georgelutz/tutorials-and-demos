describe('LayerApi', function() {
    var ALKMaps
    var layerApiInstance
    var LayerApi
    var map
    var layer
    var clusterStrategy
    var options

    beforeEach(function() {
        ALKMaps = new MockALKMaps()
        map = new MockMap()
        layer = { layer: true }
        clusterStrategy = { clusterStrategy: true }
        options = { options: true }

        LayerApi = require('../../main/layers/LayerApi')
        layerApiInstance = new LayerApi(ALKMaps, map, layer, clusterStrategy, options)
    })

    it('should destroy', function() {
        layer.destroy = sinon.stub()
        layerApiInstance.removeLayer = sinon.stub()

        layerApiInstance.destroy()

        layerApiInstance.removeLayer.should.have.been.calledWith()
        layer.destroy.should.have.been.calledWith()
    })

    it('should attach to layer', function() {
        layer.api.should.equal(layerApiInstance)
    })

    it('should expose layer', function() {
        layerApiInstance.layer.should.equal(layer)
    })

    it('should have events disabled by default', function() {
        layerApiInstance.eventsEnabled.should.equal(false)
    })

    it('should expose clusterStrategy', function() {
        layerApiInstance.clusterStrategy.should.equal(clusterStrategy)
    })

    it('should expose options', function() {
        layerApiInstance.options.should.equal(options)
    })

    it('should have an addItem method', function() {
        layerApiInstance.should.have.property('addItem').that.is.a('function')
        layerApiInstance.addItem()
    })

    it('should have a doneAddingItems method', function() {
        layerApiInstance.should.have.property('doneAddingItems').that.is.a('function')
        layerApiInstance.doneAddingItems()
    })

    it('should support clearing items', function() {
        layerApiInstance.clearItems()
    })

    it('should support removing the layer', function() {
        layerApiInstance.clearItems = sinon.stub()

        layerApiInstance.removeLayer()

        layerApiInstance.clearItems.should.have.been.calledWith()
        map.removeLayer.should.have.been.calledWith(layer)
    })

    it('should support setting visibility', function() {
        layer.setVisibility = sinon.stub()
        layer.redraw = sinon.stub()

        layerApiInstance.setVisibility('abc')

        layer.setVisibility.should.have.been.calledWith('abc')
        layer.redraw.should.have.been.calledWith().and.calledAfter(layer.setVisibility)
    })

    it('should support toggling visibility', function() {
        layer.setVisibility = sinon.stub()
        layer.redraw = sinon.stub()
        layer.getVisibility = sinon.stub().returns(true)

        layerApiInstance.setVisibility()

        layer.setVisibility.should.have.been.calledWith(false)
        layer.redraw.should.have.been.calledWith().and.calledAfter(layer.setVisibility)

        layer.getVisibility.returns(false)
        layerApiInstance.setVisibility()

        layer.setVisibility.should.have.been.calledWith(true)
    })

    it('should support creating ALKMaps.LonLat objects', function() {
        var lon = 123
        var lat = 456

        var transformed = { transformed: true }
        var lonLat = {
            transform: sinon.stub().withArgs('abc', 'def').returns(transformed)
        }
        ALKMaps.LonLat.returns(lonLat)
        ALKMaps.Projection.withArgs('EPSG:4326').returns('abc')
        map.getProjectionObject.returns('def')

        var returned = layerApiInstance.createLonLat(lon, lat)

        returned.should.equal(transformed)
    })
})
