describe('VectorLayer', function() {
    var VectorLayer
    var ALKMaps
    var LayerApi
    var map
    var clusterStrategy
    var layer

    beforeEach(function() {
        layer = { layer: true }
        layer.addFeatures = sinon.stub()
        layer.setVisibility = sinon.stub()
        layer.redraw = sinon.stub()

        map = new MockMap()
        LayerApi = new MockLayerApi()

        clusterStrategy = { cluster: true }

        ALKMaps = new MockALKMaps()
        ALKMaps.Strategy.Cluster.returns(clusterStrategy)
        ALKMaps.StyleMap = function(input) {
            return input
        }
        ALKMaps.Layer.Vector.returns(layer)
        ALKMaps.Size = function(width, height) {
            return { size: true, width: width, height: height }
        }

        LayerApi.api.createLonLat = function(lon, lat) {
            return {lon: lon, lat: lat }
        }
        LayerApi.api.parseString = sinon.stub().returnsArg(0)

        VectorLayer = proxyquire('../main/layers/VectorLayer', {
            './LayerApi': LayerApi.constructor
        })
    })

    it('should create a vector layer', function() {
        var vectorLayerApi = new VectorLayer(ALKMaps, map, {})

        ALKMaps.Layer.Vector.should.have.been.calledWith('Vector Layer', {
            strategies: [clusterStrategy],
            styleMap: { }
        })
        map.addLayer.should.have.been.calledWith(layer)
        vectorLayerApi.should.equal(LayerApi.api)
        LayerApi.constructor.should.have.been.calledWith(ALKMaps, map, layer, clusterStrategy, {})
        ALKMaps.Strategy.Cluster.should.have.been.calledWith({ distance: 50, threshold: 2 })
        vectorLayerApi.eventsEnabled.should.equal(true)
    })

    it('should support options', function() {
        var options = {
            layerName: 'name',
            clusterDistance: 123,
            clusterThreshold: 456,
            defaultStyle: 'abc',
            selectedStyle: 'def'
        }

        var vectorLayerApi = new VectorLayer(ALKMaps, map, options)

        ALKMaps.Layer.Vector.should.have.been.calledWith('name', {
            strategies: [clusterStrategy],
            styleMap: {
                default: 'abc',
                select: 'def'
            }
        })
        map.addLayer.should.have.been.calledWith(layer)
        vectorLayerApi.should.equal(LayerApi.api)
        LayerApi.constructor.should.have.been.calledWith(ALKMaps, map, layer, clusterStrategy, options)
        ALKMaps.Strategy.Cluster.should.have.been.calledWith({ distance: 123, threshold: 456 })
    })

    it('should support disabling clustering', function() {
        var options = {
            disableClustering: true
        }

        var vectorLayerApi = new VectorLayer(ALKMaps, map, options)

        ALKMaps.Layer.Vector.should.have.been.calledWith(
            'Vector Layer', {
                strategies: undefined,
                styleMap: { }
            }
        )
        map.addLayer.should.have.been.calledWith(layer)
        vectorLayerApi.should.equal(LayerApi.api)
        LayerApi.constructor.should.have.been.calledWith(ALKMaps, map, layer, undefined, options)
        ALKMaps.Strategy.Cluster.should.not.have.been.called
    })

    it('should support adding items', function() {
        var item1 = {
            item: 1,
            location: { lon: 123, lat: 456 }
        }
        var item2 = {
            item: 2,
            location: { lon: 321, lat: 654 }
        }
        ALKMaps.Geometry.Point = function(lon, lat) {
            return { point: true, lon: lon, lat: lat }
        }
        ALKMaps.Feature.Vector = function(point) {
            return { vector: true, point: point }
        }

        var api = new VectorLayer(ALKMaps, map, {})
        api.addItem(item1, {})
        api.addItem(item2, {})
        api.doneAddingItems()

        layer.addFeatures.should.have.been.calledWith([{
            attributes: item1,
            vector: true, point: {
                point: true, lon: 123, lat: 456
            }
        }, {
            attributes: item2,
            vector: true, point: {
                point: true, lon: 321, lat: 654
            }
        }])
    })

    it('should support clearing items', function() {
        layer.removeAllFeatures = sinon.stub()
        clusterStrategy.clearCache = sinon.stub()

        var api = new VectorLayer(ALKMaps, map, {})
        api.clearItems()

        clusterStrategy.clearCache.should.have.been.calledWith()
        layer.removeAllFeatures.should.have.been.calledWith()
    })

    it('should support clearing items without clustering', function() {
        layer.removeAllFeatures = sinon.stub()

        var api = new VectorLayer(ALKMaps, map, { disableClustering: true })
        api.clearItems()

        layer.removeAllFeatures.should.have.been.calledWith()
    })

    it('should support selecting features', function() {
        var callback = function(i) {
            return i % 2 === 0
        }
        layer.features = [1, 2, 3, 4]

        var api = new VectorLayer(ALKMaps, map, {})
        api.selectFeature = {
            unselectAll: sinon.stub(),
            select: sinon.stub()
        }

        api.selectFeatures(callback)

        api.selectFeature.unselectAll.should.have.been.called
        api.selectFeature.select.should.have.been.calledTwice
        api.selectFeature.select.should.have.always.been.calledOn(api.selectFeature)
        api.selectFeature.select.should.have.been.calledWith(2)
        api.selectFeature.select.should.have.been.calledWith(4)
    })
})
