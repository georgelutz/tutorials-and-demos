'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = configuration => {
	const lines = Object.entries(configuration.description).map(entry => {
		var _entry = _slicedToArray(entry, 2);

		const name = _entry[0];
		const desc = _entry[1];

		const alias = Object.entries(configuration.alias).find(entry => entry[1] === name).map(entry => entry[0])[0];
		const defaults = configuration.default[name];
		return [[name, alias].filter(Boolean), desc, defaults].filter(Boolean);
	});

	const longest = lines.map(line => {
		var _line = _slicedToArray(line, 1);

		const flags = _line[0];

		return flags.reduce((sum, flag) => sum + flag.length, 0);
	}).sort(Number)[0];

	return lines.map(line => {
		var _line2 = _slicedToArray(line, 3);

		const flags = _line2[0];
		const desc = _line2[1];
		const defaults = _line2[2];

		const fs = flags.map(flag => flag.length > 1 ? `--${ flag }` : `-${ flag }`);
		const ds = defaults ? `, defaults to: ${ defaults }` : '';
		const length = flags.reduce((sum, flag) => sum + flag.length, 0);
		return `${ fs.join(',') }${ ' '.repeat(4 + longest - length) }${ desc }${ ds }`;
	}).join('\n');
};

module.exports = exports['default'];