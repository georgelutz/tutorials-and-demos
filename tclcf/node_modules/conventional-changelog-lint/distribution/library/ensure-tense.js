'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _pos = require('pos');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

const lexer = new _pos.Lexer();
const tagger = new _pos.Tagger();

const tenses = {
	'past-tense': ['VB', 'VBD'],
	'present-imperative': ['VB', 'VBN', 'VBP'],
	'present-participle': ['VB', 'VBG'],
	'present-third-person': ['VB', 'VBZ']
};

function getLemmata(input) {
	try {
		return lexer.lex(input);
	} catch (err) {
		return [];
	}
}

function getTags(lemmata) {
	try {
		return tagger.tag(lemmata);
	} catch (err) {
		return [];
	}
}

exports.default = (input, allowed) => {
	const lemmata = getLemmata(input);
	const tagged = getTags(lemmata);
	const verbs = tagged.filter(tag => tag[1][0] === 'V');
	const tags = allowed.reduce((registry, name) => {
		return [].concat(_toConsumableArray(registry), _toConsumableArray(tenses[name] || []));
	}, []);

	const offending = verbs.filter(verb => {
		var _verb = _slicedToArray(verb, 2);

		const tag = _verb[1];

		return tags.length > 0 && tags.indexOf(tag) === -1;
	}).filter(Boolean).map(verb => {
		var _verb2 = _slicedToArray(verb, 2);

		const lemma = _verb2[0];
		const tag = _verb2[1];

		const tense = Object.entries(tenses).filter(item => {
			var _item = _slicedToArray(item, 2);

			const tags = _item[1];

			return tags.indexOf(tag) > -1;
		}).map(item => item[0])[0];

		return {
			lemma,
			tense
		};
	});

	return {
		matches: offending.length === 0,
		offending
	};
};

module.exports = exports['default'];