'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = format;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function format(report) {
	let options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	const signs = options.signs;
	const colors = options.colors;
	const enabled = options.color;

	const fmt = new _chalk2.default.constructor({ enabled });

	const problems = [].concat(_toConsumableArray(report.errors), _toConsumableArray(report.warnings)).map(problem => {
		const sign = signs[problem.level];
		const color = colors[problem.level];
		const decoration = fmt[color](sign);
		const name = _chalk2.default.grey(`[${ problem.name }]`);
		return `${ decoration }   ${ problem.message } ${ name }`;
	});

	const sign = report.errors.length ? // eslint-disable-line no-nested-ternary
	'✖' : report.warnings.length ? '⚠' : '✔';

	const color = report.errors.length ? // eslint-disable-line no-nested-ternary
	'red' : report.warnings.length ? 'yellow' : 'green';

	const decoration = fmt[color](sign);
	const summary = `${ decoration }   found ${ report.errors.length } problems, ${ report.warnings.length } warnings`;
	return [].concat(_toConsumableArray(problems), [_chalk2.default.bold(summary)]);
}
module.exports = exports['default'];