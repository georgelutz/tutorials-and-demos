'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _lodash = require('lodash');

var _rc = require('rc');

var _rc2 = _interopRequireDefault(_rc);

var _resolveExtends = require('./resolve-extends');

var _resolveExtends2 = _interopRequireDefault(_resolveExtends);

var _executeRule = require('./execute-rule');

var _executeRule2 = _interopRequireDefault(_executeRule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

const defaults = {
	extends: ['angular']
};

const defaultName = 'conventional-changelog-lint';

const defaultSettings = {
	prefix: 'conventional-changelog-lint-config'
};

exports.default = (() => {
	var ref = _asyncToGenerator(function* () {
		let name = arguments.length <= 0 || arguments[0] === undefined ? defaultName : arguments[0];
		let settings = arguments.length <= 1 || arguments[1] === undefined ? defaultSettings : arguments[1];
		let seed = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

		// Obtain config from .rc files
		const userConfig = (0, _rc2.default)(name, settings.defaults);

		// Use the default extends config if there is no userConfig
		// See https://git.io/vwT1C for reference
		const applicableDefaults = Object.keys(userConfig) > 0 ? {} : defaults;

		// Merge passed config with file based options
		const config = (0, _lodash.merge)(userConfig, seed);
		const opts = (0, _lodash.merge)({}, applicableDefaults, (0, _lodash.pick)(config, 'extends'));

		// Resolve extends key
		const extended = (0, _resolveExtends2.default)(opts, settings.prefix);
		const preset = (0, _lodash.merge)({}, extended, config);

		// Execute rule config functions if needed
		const executed = yield Promise.all(['rules', 'wildcards'].map(function (key) {
			return [key, preset[key]];
		}).map((() => {
			var ref = _asyncToGenerator(function* (item) {
				var _item = _slicedToArray(item, 2);

				const key = _item[0];
				const value = _item[1];

				const executedValue = yield Promise.all(Object.entries(value || {}).map((() => {
					var ref = _asyncToGenerator(function* (entry) {
						return yield (0, _executeRule2.default)(entry);
					}),
					    _this = undefined;

					return function (_x8) {
						return ref.apply(_this, arguments);
					};
				})()));
				return [key, executedValue.reduce(function (registry, item) {
					var _item2 = _slicedToArray(item, 2);

					const key = _item2[0];
					const value = _item2[1];

					return _extends({}, registry, {
						[key]: value
					});
				}, {})];
			}),
			    _this = undefined;

			return function (_x7) {
				return ref.apply(_this, arguments);
			};
		})()));

		// Merge executed config keys into preset
		return executed.reduce(function (registry, item) {
			var _item3 = _slicedToArray(item, 2);

			const key = _item3[0];
			const value = _item3[1];

			return _extends({}, registry, {
				[key]: value
			});
		}, preset);
	}),
	    _this = undefined;

	return function (_x, _x2, _x3) {
		return ref.apply(_this, arguments);
	};
})();

module.exports = exports['default'];