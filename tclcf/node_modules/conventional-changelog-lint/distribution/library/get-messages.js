'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _fs = require('fs');

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _gitRawCommits = require('git-raw-commits');

var _gitRawCommits2 = _interopRequireDefault(_gitRawCommits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; } // core modules


const readFile = (0, _denodeify2.default)(_fs.readFile);

// Get commit messages
function getCommits(options) {
	return new Promise((resolve, reject) => {
		const data = [];
		(0, _gitRawCommits2.default)(options).on('data', chunk => data.push(chunk.toString('utf-8'))).on('error', reject).on('end', () => {
			resolve(data);
		});
	});
}

// Get commit messages

exports.default = (() => {
	var ref = _asyncToGenerator(function* (settings) {
		const from = settings.from;
		const to = settings.to;
		const edit = settings.edit;


		if (edit) {
			const editFile = yield readFile(`.git/COMMIT_EDITMSG`);
			return [editFile.toString('utf-8')];
		} else {
			return yield getCommits({
				from,
				to
			});
		}
	}),
	    _this = undefined;

	return function (_x) {
		return ref.apply(_this, arguments);
	};
})();

module.exports = exports['default'];