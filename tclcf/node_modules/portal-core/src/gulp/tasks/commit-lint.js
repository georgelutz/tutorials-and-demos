module.exports = function(gulp, config, done) {
    require('babel-polyfill')
    var _ = require('lodash')
    var gutil = require('gulp-util')
    var conventionalChangelogLint = require('conventional-changelog-lint')
    var getConfiguration = conventionalChangelogLint.getConfiguration
    var getMessages = conventionalChangelogLint.getMessages
    var getPreset = conventionalChangelogLint.getPreset
    var lint = conventionalChangelogLint.default
    
    Promise.all([
        getMessages({from: 'HEAD~1'}),
        getPreset('angular'),
        getConfiguration()
    ]).then(results => {
        var messages = results[0]
        var preset = results[1]
        var configuration = results[2]

        var promises = _.map(messages, message => {
            //see https://github.com/marionebl/conventional-changelog-lint-config-angular/blob/master/index.js
            _.merge(configuration, {
                rules: {
                    'scope-case': [0],
                    'subject-full-stop': [0]
                }
            })

            return lint(message, {
                preset: preset,
                configuration: configuration
            }).then(result => {
                gutil.log(gutil.colors.yellow('Validating commit:'))
                _.trim(message).split('\n').forEach(msg => gutil.log(gutil.colors.white(msg)))

                if (result.valid) {
                    gutil.log(gutil.colors.yellow('Commit message valid!'))
                    return true
                } else {
                    _.each(result.warnings, err => gutil.log(gutil.colors.yellow('Warning:'), gutil.colors.white(err.message)))
                    _.each(result.errors, err => gutil.log(gutil.colors.red('Error:'), gutil.colors.white(err.message)))
                    return Promise.reject('Commit message is invalid!')
                }
            })
        })
        
        return Promise.all(promises)
            .then(() => done())
    }).catch(err => {
        gutil.log(gutil.colors.red('Error validating commit:'), err)
        done(err)
    })
}
