const _ = require('lodash')
require('../styles/applicationEdit.scss')

module.exports = {
    template: require('../views/applicationEdit.html'),
    controller: class ApplicationEdit {
        /* @ngInject */
        constructor($log, $state, $translate, $translateDefaultInterpolation, toastService, loadingService) {
            this.$log = $log
            this.$state = $state
            this.$translate = $translate
            this.$translateDefaultInterpolation = $translateDefaultInterpolation
            this.toastService = toastService
            this.loadingService = loadingService
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.application = this.$state.$current.locals.globals.application
            this.realms = this.$state.$current.locals.globals.realms

            return this.$translate([
                'application.applicationEdit.err_while_saving',
                'application.applicationEdit.confirm_save'
            ], {name: '{{name}}'}).then(res => this.res = res)
        }

        confirmDelete(event) {
            return this.application.confirmDelete(event)
                .then(() => this.$state.go('nav.application.list'))
        }

        save() {
            this.application.realms = _.chain(this.realms).filter({selected: true}).map('name')

            var confirm_save = this.$translateDefaultInterpolation.interpolate(
                this.res['application.applicationEdit.confirm_save'],
                {name: this.application.name}
            )

            this.loadingService.loading(true)
            return this.application.save()
                .then(() => {
                    this.toastService.show(confirm_save)
                    return this.$state.go('nav.application.list')
                })
                .catch(err => {
                    this.loadingService.loading(false)
                    this.$log.error('Error saving application.', err)
                    this.toastService.show(this.res['application.applicationEdit.err_while_saving'], {theme: 'warn'})
                })
                .finally(() => this.loadingService.loading(false))
        }
    }
}
