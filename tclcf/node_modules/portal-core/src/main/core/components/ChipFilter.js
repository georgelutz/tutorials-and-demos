const _ = require('lodash')
require('../styles/chipFilter.scss')

module.exports = {
    template: require('../views/chipFilter.html'),
    bindings: {
        chipsUpdated: '&',
        onLoad: '&',
        entities: '<',
        entityChips: '<',
        staticResults: '<'
    },
    controller: class ChipFilter {
        /* @ngInject */
        constructor($analytics, $filter, $log, $q, $state, $stateParams, $timeout, searchService) {
            this.$analytics = $analytics
            this.$filter = $filter
            this.$log = $log
            this.$q = $q
            this.$state = $state
            this.$stateParams = $stateParams
            this.$timeout = $timeout
            this.searchService = searchService
        }

        $onInit() {
            this.searchText = ''
            this.selectedChips = []

            //populate existing chips on load
            _.forIn(this.$stateParams, (value, key) => {
                if (_.isArray(value)) {
                    _.each(value, v => this.loadParam(v, key))
                } else if (value) {
                    this.loadParam(value, key)
                }
            })

            this.onLoad({selectedChips: this.selectedChips})
        }

        loadParam(value, key) {
            let negate = _.startsWith(value, '!')
            let fixedValue = _.trimStart(value, '!')
            let chip
            if (key === 'q') {
                chip = this.makeSearchTerm(value)
            } else if (_.includes(this.entities, key)) {
                let entityChips = this.entityChips || this.filters
                let entity = _.find(entityChips, {key: fixedValue}) || {key: value, name: value, icon: 'bug_report'}
                chip = this.searchService.processSingle(key, entity)
            } else if (this.staticResults) {
                chip = _.cloneDeep(_.find(this.staticResults, {type: 'static', param: key, key: fixedValue}))
            }

            if (chip) {
                chip.negate = negate
                this.applyPrefix(chip, 'name', negate)
                this.applyPrefix(chip, 'key', negate)
                this.selectedChips.push(chip)
            }
        }

        makeSearchTerm(term) {
            return {
                name: term,
                term: term,
                icon: 'search',
                type: 'term'
            }
        }

        updateFilter() {
            let params = {
                page: undefined,
                q: _(this.selectedChips)
                    .filter({type: 'term'})
                    .map('name')
                    .value()
            }

            //clear old values first
            _.each(this.entities, entity => params[entity] = undefined)
            _.each(this.staticResults, it => params[it.param] = undefined)

            //populate selected chips
            _.reduce(this.selectedChips, (result, value) => {
                if (_.includes(this.entities, value.type)) {
                    if (!result[value.type]) result[value.type] = []
                    result[value.type].push(value.key)
                } else if (value.type === 'static') {
                    if (!result[value.param]) result[value.param] = []
                    result[value.param].push(value.key)
                }
                return result
            }, params)

            //call update function or reload the state
            let defaultAction = () => this.$state.go(this.$state.current.name, params)
            if (!this.chipsUpdated({defaultAction, params, selectedChips: this.selectedChips})) {
                defaultAction()
            }
        }

        addChip(chip) {
            this.searchText = ''
            this.$timeout(() => {
                _.remove(this.selectedChips, selectedChip => {
                    return selectedChip !== chip && _.trimStart(selectedChip.name, '!') === _.trimStart(chip.name, '!')
                })
                
                // track add chip event to Google Analytics
                this.$analytics.eventTrack('Add Chip', {category: 'Chip Filter', label: chip.name})
                
                this.updateFilter()
            })
            return chip
        }

        removeChip() {
            this.$timeout(() => this.updateFilter())
        }

        performQuery(searchText) {
            let negate = _.startsWith(searchText, '!')
            let fixedTerm = _.trimStart(searchText, '!')
            let searchTerm = this.makeSearchTerm(searchText)

            let promise
            if (this.entities) {
                promise = this.searchService.typeAheadSearch(fixedTerm, this.entities, 'ChipFilter')
            } else {
                promise = this.$q.resolve([])
            }

            return promise
                .then(results => {
                    //add keyword search result
                    results.unshift(searchTerm)
                    
                    //add filtered static results
                    if (this.staticResults) {
                        let filtered = this.$filter('filter')(this.staticResults, fixedTerm)
                        results = results.concat(_.cloneDeep(filtered))
                    }
                    
                    //handle negation and special cases
                    return results.map(result => {
                        result.negate = negate
                        this.applyPrefix(result, 'name', negate)
                        this.applyPrefix(result, 'key', negate)
                        return result
                    })
                })
        }

        applyPrefix(object, property, shouldPrefix) {
            if (object[property] && _.isString(object[property])) {
                object[property] = object[property].replace(/^!*/, shouldPrefix ? '!' : '')
            }
        }
    }
}
