const _ = require('lodash')
require('../styles/dateTimePicker.scss')

module.exports = {
    template: require('../views/dateTimePicker.html'),
    bindings: {
        hideDate: '<',
        hideTime: '<',
        militaryTime: '<',
        onChange: '&',
        precision: '@',
        value: '='
    },
    controller: class DateTimePicker {
        /* @ngInject */
        constructor($scope) {
            this.$scope = $scope
        }

        $onInit() {
            this.toggleMilitaryTime()

            this.minutes = _.range(0, 60)
            this.seconds = _.range(0, 60)
            this.milliseconds = _.range(0, 1000)

            this.$scope.$watch('$ctrl.value', () => this.onChangeDate())
        }

        $onChanges(changes) {
            if (changes.militaryTime) {
                this.toggleMilitaryTime()
            }
        }

        toMilitaryTime(hour) {
            if (this.afterNoon) {
                if (hour < 12) {
                    hour += 12
                }
            } else {
                if (hour === 12) {
                    hour -= 12
                }
            }

            return hour
        }

        toStandardTime(hour) {
            if (this.afterNoon) {
                if (hour > 12) {
                    hour -= 12
                }
            } else {
                if (hour === 0) {
                    hour += 12
                }
            }

            return hour
        }

        setTime() {
            let hour = this.hour ? Number(this.hour) : this.value.getHours()
            let minute = this.minute ? Number(this.minute) : this.value.getMinutes()
            let second = this.second ? Number(this.second) : this.value.getSeconds()
            let millisecond = this.millisecond ? Number(this.millisecond) : this.value.getMilliseconds()

            hour = this.militaryTime ? hour : this.toMilitaryTime(hour)

            this.value.setHours(hour)
            this.value.setMinutes(minute)
            this.value.setSeconds(second)
            this.value.setMilliseconds(millisecond)

            return this.onChange({value: this.value})
        }

        onChangeDate() {
            let hour
            let minute
            let second
            let millisecond
            
            if (_.isDate(this.value)) {
                this.setTime()

                hour = this.value.getHours()
                minute = this.value.getMinutes()
                second = this.value.getSeconds()
                millisecond = this.value.getMilliseconds()

                this.afterNoon = hour >= 12

                hour = this.militaryTime ? hour : this.toStandardTime(hour)
            }
            
            this.hour = hour
            this.minute = minute
            this.second = second
            this.millisecond = millisecond

            return this.onChange({value: this.value})
        }

        onChangeTime() {
            if (!_.isDate(this.value)) {
                this.value = new Date()
                this.value.setHours(0)
                this.value.setMinutes(0)
                this.value.setSeconds(0)
                this.value.setMilliseconds(0)
            }

            this.setTime()
        }
        
        toggleMilitaryTime() {
            this.hours = this.militaryTime ? _.range(0, 24) : _.range(1, 13)
            
            this.hourPlaceholder = this.militaryTime ? 'HH' : 'hh'
            
            if (_.isDate(this.value)) {
                let hour = this.value.getHours()

                this.hour = this.militaryTime ? this.toMilitaryTime(hour) : this.toStandardTime(hour)
            }
        }

        toggleAmPm() {
            this.afterNoon = !this.afterNoon
            this.onChangeTime()
        }

        pad(num, len = 2) {
            return _.padStart(num, len, '0')
        }
    }
}
