const _ = require('lodash')
require('../styles/entityPaging.scss')

module.exports = {
    template: require('../views/entityPaging.html'),
    bindings: {
        pagingLabel: '@',
        responseDescription: '<',
        onPageChanged: '&'
    },
    controller: class EntityPaging {
        /* @ngInject */
        constructor($interval, $state, $stateParams, $translate) {
            this.$interval = $interval
            this.$state = $state
            this.$stateParams = $stateParams
            this.$translate = $translate
        }

        $onInit() {
            this.pageSizeOptions = [
                {label: '10', value: 10},
                {label: '25', value: 25},
                {label: '50', value: 50}
            ]
            this.pagingLabel = this.pagingLabel || 'Rows'
            this.showPageSizeControls = false
            this.pageSize = _.find(this.pageSizeOptions, {value: +this.$stateParams.pageSize}) || this.pageSizeOptions[0]

            this.refresh()
        }

        $onChanges() {
            this.refresh()
        }

        refresh() {
            this.totalHits = _.get(this, 'responseDescription.totalHits', 0)
            this.page = _.get(this, 'responseDescription.page', 0) + 1
            let pageSize = _.get(this, 'responseDescription.pageSize', 10)

            this.startItemCount = pageSize * (this.page - 1) + 1

            let lastItemCount = pageSize * this.page
            this.lastItemCount = lastItemCount <= this.totalHits ? lastItemCount : this.totalHits

            this.lastPage = Math.ceil(this.totalHits / pageSize)
            this.lastPage = isNaN(this.lastPage) ? 1 : this.lastPage

            this.showPageSizeControls = this.totalHits > 10

            var translationKeys = [
                'core.common.entity-paging.per_page',
                'core.common.entity-paging.status_count']
            var translationModel = {
                pagingLabel: this.pagingLabel,
                startItemCount: this.startItemCount,
                lastItemCount: this.lastItemCount,
                totalHits: this.totalHits
            }

            this.$translate(translationKeys, translationModel)
                .then(messages => {
                    this.messages = messages
                })
        }

        changePage(page) {
            let result = this.onPageChanged({page, pageSize: this.pageSize.value})
            if (!result) {
                this.$state.transitionTo(this.$state.current, {
                    page: page - 1,
                    pageSize: this.pageSize.value
                }, {inherit: true})
            }
            this.page = page
            this.responseDescription = null
            this.refresh()
        }

        changePageSize() {
            let result = this.onPageChanged({page: 0, pageSize: this.pageSize.value})
            if (!result) {
                this.$state.transitionTo(this.$state.current, {
                    page: 0,
                    pageSize: this.pageSize.value
                }, {inherit: true})
            }
            this.responseDescription = null
            this.refresh()
        }
    }
}
