require('../images/icon_search.png')

module.exports = {
    template: require('../views/globalSearch.html'),
    controller: class GlobalSearch {
        /* @ngInject */
        constructor($analytics, $filter, $scope, $state, $location, $timeout, authService, globalSearch, searchService) {
            this.$analytics = $analytics
            this.$filter = $filter
            this.$scope = $scope
            this.$state = $state
            this.$location = $location
            this.$timeout = $timeout
            this.authService = authService
            this.globalSearch = globalSearch
            this.searchService = searchService
        }

        $onInit() {
            this.filter = this.$filter('filter')
            this.staticPages = this.globalSearch.staticPages

            this.authService.getCurrentUser()
                .then(user => this.currentUser = user)

            this.$scope.$on('$stateChangeSuccess', () => {
                this.selectedItem = null
                this.skipQuery = true
                this.searchText = null
                this.$timeout(() => this.skipQuery = false)
            })
        }

        search() {
            this.$state.go('nav.search.list', {
                term: this.searchText
            })
            this.searchText = null
        }

        selectedItemChange(value) {
            if (value && value.type === 'static') {
                this.$state.go(value.state, value.stateParams)
            } else if (value && !this.searchService.handleSelection(value)) {
                this.search()
            } else if (!value && this.$location.search().q) {
                this.$state.go(this.$state.current, {q: null})
            }
            this.searchText = null
        }

        performQuery(searchText) {
            if (!this.skipQuery) {
                return this.searchService.typeAheadSearch(searchText, null, 'GlobalSearch')
                    .then(results => {
                        //find search results
                        results.unshift({icon: 'search', name: searchText, term: searchText})
                        return results
                    })
                    .then(results => {
                        //find static pages
                        let staticPageResults = this.filter(this.staticPages, searchText)
                            .filter(page => !page.permission || this.currentUser.hasPermission(page.permission))
                        return results.concat(staticPageResults)
                    })
            }
        }

        logAutocompleteSelection(item) {
            this.$analytics.eventTrack('Global Search Suggestion Clicked', {category: 'Navigation Tracking', label:  (item.type ? item.type : 'search')})
        }
    }
}
