var _ = require('lodash')
require('../styles/navigation.scss')
require('../styles/common.scss')
require('../styles/cardCommon.scss')
require('../styles/dataTable.scss')
require('../styles/listCommon.scss')
require('../styles/loading.scss')
require('../styles/tableRowDrawer.scss')
require('../images/nav_logo.png')

module.exports = {
    template: require('../views/navigation.html'),
    controller: class Navigation {
        /* @ngInject */
        constructor($scope, $log, $mdMedia, $mdSidenav, $translate, authConfig, authService, userMenu,
                    loadingService, toastService, fieldErrorService, themeService) {
            this.$scope = $scope
            this.$log = $log
            this.$mdMedia = $mdMedia
            this.$mdSidenav = $mdSidenav
            this.$translate = $translate
            this.authConfig = authConfig
            this.authService = authService
            this.userMenu = userMenu
            this.loadingService = loadingService
            this.toastService = toastService
            this.fieldErrorService = fieldErrorService
            this.themeService = themeService
        }

        $onInit() {
            this.loading = false
            this.navImageUrl = this.themeService.getNav()

            this.$scope.$on('$stateChangeStart', () => {
                this.loading = true
                this.$mdSidenav('left').close()
                this.fieldErrorService.fieldErrors = {}
            })

            this.$scope.$on('$stateChangeSuccess', () => {
                this.loading = false
                this.loadingService.loading(false)
            })

            this.$scope.$on('$stateNotFound', () => {
                this.loading = false
                this.loadingService.loading(false)

                this.$log.error('State not found.', arguments)
                this.toastService.show(this.res['core.common.toast.unexpected'])
            })

            this.$scope.$on('$stateChangeError', (event, toState, toParams, fromState, fromParams, error) => {
                this.loading = false
                this.loadingService.loading(false)

                var errorMsg = _.get(error, 'resolveError.msg', this.res['core.common.toast.unexpected'])
                var errorReason = _.get(error, 'resolveError.cause', this.res['core.common.toast.state_change'])

                this.$log.error(errorReason, arguments)
                this.toastService.show(errorMsg, {theme: 'warn'})
            })

            return this.loadTranslations()
        }

        getLinkStyle() {
            let color = this.themeService.getColor()
            return `a{color: rgb(${color[0]}, ${color[1]}, ${color[2]});}`
        }
        
        lockSidenav() {
            let user = this.authService.currentUser
            let portalForce = this.authConfig.sidenavCollapse
            let alwaysCollapse = user && user.getTagByKey('sidenavCollapse') === 'true'
            return !portalForce && this.$mdMedia('gt-sm') && !alwaysCollapse
        }

        login() {
            _.defer(() => this.loadingService.loading(true))
            return this.authService.login(null, true)
                .then(() => this.loadingService.loading(false))
                .catch(() => this.loadingService.loading(false))
        }

        pageLoading() {
            return this.loadingService.loading()
        }

        pageAsyncLoading() {
            return this.loadingService.asyncLoading()
        }

        getTheme() {
            return this.themeService.getCurrentTheme()
        }

        loadTranslations() {
            return this.$translate([
                'core.common.toast.unexpected',
                'core.common.toast.state_change']
            ).then(translation => this.res = translation)
        }

        openSidenav() {
            this.$mdSidenav('left').open()
        }
    }
}
