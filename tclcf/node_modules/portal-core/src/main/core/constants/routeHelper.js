var _ = require('lodash')

module.exports = {

    // helper method for resolving filters
    entityChips: function(entities = [], entityPrefix = '') {
        return /* @ngInject */ function($q, $stateParams, Restangular) {
            let promises = _.reduce(entities, (result, value) => {
                function process(key) {
                    let fixedKey = _.trimStart(key, '!')
                    if (fixedKey) {
                        var promise = Restangular.one(`${entityPrefix}${value}s`, fixedKey).get()
                            .catch(() => {})
                        result.push(promise)
                    }
                }

                if (_.isArray($stateParams[value])) {
                    _.each($stateParams[value], process)
                } else {
                    process($stateParams[value])
                }

                return result
            }, [])
            return $q.all(promises)
        }
    },

    // helper method for permission checking during route resolve
    hasPermission: function(permission) {
        return /*@ngInject*/ function($log, $state, $q, authService, toastService) {
            return authService.getCurrentUser()
                .then(user => {
                    if (!user.hasPermission(permission) && !user.anonymous) {
                        $log.warn(`Current user does not have the permission: ${permission}`)
                        toastService.show('You do not have authority to do that.', {theme: 'warn'})
                        $state.go('nav.welcome')
                        return $q.reject(`Current user does not have the permission: ${permission}`)
                    }
                })
        }
    },

    // helper method to resolve current user
    currentUser: /*@ngInject*/ function(authService) {
        return authService.getCurrentUser()
    },

    get: function(entity, keyField) {
        return /* @ngInject */ function($stateParams, Restangular) {
            var field = keyField || 'key'
            var key = $stateParams[field]
            return Restangular.one(entity, key).get()
        }
    },

    // no op method for promise resolve
    noop: a => a,

    // skip method for skipping promise errors
    skip: () => null

}
