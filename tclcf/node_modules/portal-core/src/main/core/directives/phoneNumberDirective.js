var _ = require('lodash')

module.exports = /* @ngInject */ function($filter, $browser) {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, elem, attrs, modelController) {
            var phoneNumber = $filter('phoneNumber')

            // Convert string of digits to phone number format in the view, if possible
            var formatter = function(value) {
                if (_.isString(value)) {
                    value = value.replace(/[^\d]/g, '')
                    return phoneNumber(value)
                }
                return ''
            }
            modelController.$formatters.push(formatter)

            // Sanitize the $viewValue into a string of numbers in the model, if possible
            var parser = function(viewValue) {
                if (viewValue && _.isString(viewValue.toString())) {
                    var value = viewValue.toString().replace(/[^\d]/g, '')
                    return phoneNumber(value).replace(/[^\d]/g, '')
                }
                return ''
            }
            modelController.$parsers.push(parser)

            // Converts string of digits to phone number format, if possible
            var listener = function() {            // element.val() changed
                var newView = formatter(elem.val())
           
                elem.val(newView)
                modelController.$viewValue = newView
            }

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            modelController.$render = function() { // modelValue changed
                var newModel = parser(modelController.$modelValue)
                var newView = formatter(newModel)

                if (newModel === '' && newView === '') {
                    newModel = parser(elem.val())
                    newView = formatter(newModel)
                }

                elem.val(newView)
                modelController.$viewValue = newView
                modelController.$modelValue = newModel
            }

            elem.bind('change', listener)
            elem.bind('keydown', function(event) {
                var key = event.keyCode
                // If the keys include the CTRL, SHIFT, ALT, or META keys, or the arrow keys, do nothing.
                // This lets us support copy and paste too
                if (key === 91 || (key > 15 && key < 19) || (key >= 37 && key <= 40)) {
                    return
                }
                $browser.defer(listener) // Have to do this or changes don't get picked up properly
            })

            elem.bind('paste cut', function() {
                $browser.defer(listener)
            })
        }
    }
}
