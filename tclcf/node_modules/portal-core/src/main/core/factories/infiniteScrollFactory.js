const _ = require('lodash')

module.exports = /* @ngInject */ function(toastService) {
    let loadedPages
    let numItems
    let PAGE_SIZE
    let getMoreDataCallback

    let DynamicItems = function(firstPage, maxPageSize, dataCallback) {
        loadedPages = {}
        loadedPages[0] = firstPage
        numItems = _.size(firstPage)
        PAGE_SIZE = maxPageSize
        getMoreDataCallback = dataCallback

        if (numItems === PAGE_SIZE) {
            //Add one blank row to enable the index size to be higher then the number loaded to trigger fetching a new page
            numItems++
        }
    }

    DynamicItems.prototype.getItemAtIndex = function(index) {
        let pageNumber = Math.floor(index / PAGE_SIZE)
        let page = loadedPages[pageNumber]

        if (page) {
            return page[index % PAGE_SIZE]
        } else if (page !== null) {
            this.fetchPage(pageNumber)
        }
    }

    DynamicItems.prototype.getLength = function() {
        return numItems
    }

    DynamicItems.prototype.addNewData = function(pageNumber, newEvents) {
        loadedPages[pageNumber] = newEvents
        numItems += _.size(newEvents)
    }

    DynamicItems.prototype.fetchPage = function(pageNumber) {
        // Set the page to null so we know it is already being fetched.
        loadedPages[pageNumber] = null

        return getMoreDataCallback()
            .then(response => {
                this.addNewData(pageNumber, response)
            })
            .catch(() => {
                toastService.show('Error getting more data', {theme: 'warn'})
            })
    }

    // API
    return {
        getScroller: function(firstPage, maxPageSize, dataCallback) {
            return new DynamicItems(firstPage, maxPageSize, dataCallback)
        }
    }
}
