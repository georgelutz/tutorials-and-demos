const _ = require('lodash')

require('./listToolbar.scss')

module.exports = {
    bindings: {
        changeDensity: '&',
        context: '<',
        currentUser: '<',
        density: '<',
        toolbarOptions: '<',
        toolbarTitle: '<',
        chipFilterOptions: '<',
        chipsUpdated: '&',
        clearChipsCustom: '&'
    },
    template: require('./listToolbar.html'),
    controller: class ListToolbar {
        /* @ngInject */
        constructor($analytics, $element, $state, $stateParams, $timeout, customActionConfig, listService) {
            this.$analytics = $analytics
            this.$element = $element
            this.$state = $state
            this.$stateParams = $stateParams
            this.$timeout = $timeout
            this.customActionConfig = customActionConfig
            this.listService = listService
        }

        $onInit() {
            this.defaultTextButtons = this.customActionConfig.getTextButtons(this.context, 'default')
            this.defaultIconButtons = this.customActionConfig.getIconButtons(this.context, 'default')
        }

        onLoad(chips) {
            this.chips = chips
            this.checkChips()
        }

        onDensityChange(density) {
            let params = {
                density
            }

            this.$analytics.eventTrack(this.$state.current.name, {category: 'Density View', label: density})

            if (!this.changeDensity(params)) {
                return this.$state.go(this.$state.current, params)
            }
        }

        refresh(params = {}) {
            return this.$state.go(this.$state.current, params, {reload: true})
        }

        checkChips() {
            this.showFilter(!_.isEmpty(this.chips))
        }

        clearChips() {
            this.showFilter(false)

            if (!this.clearChipsCustom()) {
                if (!_.isEmpty(this.chips)) {
                    let params = {
                        sort: this.$stateParams.sort,
                        page: this.$stateParams.page,
                        pageSize: this.$stateParams.pageSize,
                        density: this.$stateParams.density,
                        q: null

                    }

                    _.forEach(_.get(this.chipFilterOptions, 'entities', []), entity => params[entity] = undefined)
                    _.forEach(_.get(this.chipFilterOptions, 'staticResults', []), staticResult => params[staticResult.param] = undefined)

                    return this.refresh(params)
                }
            }
        }

        showFilter(show) {
            this.listService.showFilter = show

            if (show) {
                this.$timeout(() => {
                    let el = this.$element.find('input')
                    el.focus()
                })
            }
        }
    }
}
