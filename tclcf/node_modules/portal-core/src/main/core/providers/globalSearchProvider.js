var _ = require('lodash')

module.exports = /* @ngInject */ function() {
    var searchItems = []
    var searchFunctions = []
    var staticPages = []

    this.$get = function() {
        return {
            searchItems: _.cloneDeep(searchItems),
            searchFunctions: _.cloneDeep(searchFunctions),
            staticPages: _.cloneDeep(staticPages)
        }
    }

    this.getSearchItems = function() {
        return searchItems
    }

    this.getSearchFunctions = function() {
        return searchFunctions
    }
    
    this.getStaticPages = function() {
        return staticPages
    }

    this.addSearchFunction = function(searchType, callback) {
        if (!_.find(searchFunctions, {type: searchType})) {
            searchFunctions.push({type: searchType, function: callback})
        }
    }

    this.addCommonSearchFunction = (searchType, endpoint, requireLogin = true) => {
        this.addSearchFunction(searchType, ($log, authService, Restangular, params) => {
            if (!requireLogin || authService.isLoggedIn()) {
                return Restangular.all(endpoint).customGET('', params)
                    .then(data => data.plain())
                    .catch(reason => $log.error('Error globally searching for entities: ', reason))
            }
            return []
        })
    }
    
    this.addStaticPage = function(name, keywords, permission, state, stateParams) {
        staticPages.push({name, keywords, permission, state, stateParams, icon: 'find_in_page', type: 'static'})
    }

    this.addSearchItem = function(type, listRoute, responseHandler, selectHandler, typeTranslationKey) {
        searchItems.push({
            type: type,
            listRoute: listRoute,
            responseHandler: responseHandler,
            selectHandler: selectHandler,
            typeTranslationKey: typeTranslationKey
        })
    }

    this.removeByType = function(type) {
        var item = _.find(searchItems, {type: type})
        _.pull(searchItems, item)
        return item
    }
}
