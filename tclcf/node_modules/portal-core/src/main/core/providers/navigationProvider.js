var _ = require('lodash')

module.exports = /* @ngInject */
    function() {
        var menuItems = []

        /* @ngInject */
        this.$get = function($state, authService) {
            var self = {
                sections: _.sortBy(_.cloneDeep(menuItems), 'sort'),

                reset: function() {
                    //deselect old page
                    self.toggleSelectSection(null)

                    //toggle currently active link
                    var active = _.find(self.sections, section => {
                        return self.isActive(section) || _.some(section.pages, page => self.isActive(page))
                    })
                    self.toggleSelectSection(active)
                },

                isActive(section) {
                    return _.some(section.activeStates, state => {
                        return _.includes($state.current.name, state)
                    })
                },

                isVisible(section) {
                    var permissions
                    if (section.pages) {
                        let pagePermissions = _.map(section.pages, 'permissions')
                        permissions = _.flatten(pagePermissions)
                    } else {
                        permissions = section.permissions || {}
                    }

                    var count = permissions.length || 0
                    if (count) {
                        section.visible = _.some(permissions, perm => {
                            return authService.currentUser && authService.currentUser.hasPermission(perm)
                        })
                    } else {
                        section.visible = true
                    }
                    return section.visible
                },

                toggleSelectSection: function(section) {
                    if (self.openedSection) {
                        self.openedSection.selected = false
                    }

                    if (section && self.openedSection !== section) {
                        section.selected = true
                        self.openedSection = section
                    } else {
                        self.openedSection = null
                    }
                },

                isSectionSelected: function(section) {
                    return self.openedSection === section
                }
            }

            return self
        }

        this.getMenuItems = function() {
            return menuItems
        }

        this.createMenuItem = (type, name, icon, url, sort, permissions, activeStates) => {
            return {
                type: type,
                name: name,
                icon: icon,
                url: url,
                sort: sort || name,
                permissions: permissions,
                activeStates: activeStates
            }
        }

        this.addMenuItem = (type, name, icon, url, sort, permissions, activeStates) => {
            menuItems.push(this.createMenuItem(type, name, icon, url, sort, permissions, activeStates))
        }

        this.removeByName = function(name) {
            var item = _.find(menuItems, {name: name})
            _.pull(menuItems, item)
            return item
        }

        this.removeAndRename = (oldName, newName) => {
            let item = this.removeByName(oldName)
            item.name = newName
            return item
        }
    }
