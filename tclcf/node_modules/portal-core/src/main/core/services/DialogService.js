let _ = require('lodash')

module.exports = class DialogService {
    /* @ngInject */
    constructor($analytics, $mdDialog, $q, $state, $translate) {
        this.$analytics = $analytics
        this.$mdDialog = $mdDialog
        this.$q = $q
        this.$state = $state
        this.$translate = $translate

        this.deleteDefaults = {
            content: 'core.common.dialog-service.delete_content',
            title: 'core.common.dialog-service.delete_title',
            ariaLabel: 'core.common.dialog-service.delete_title',
            ok: 'core.common.dialog-service.delete_ok',
            cancel: 'core.common.dialog-service.delete_cancel'
        }
    }

    alert(options, messages) {
        return this.$mdDialog.alert()
            .targetEvent(options.targetEvent)
            .textContent(options.content)
            .ok(options.ok || messages['core.common.dialog-service.alert_ok'])
    }

    showAlert(options) {
        return this.$translate(['core.common.dialog-service.alert_ok'])
            .then(messages => {
                return this.$mdDialog.show(this.alert(options, messages))
            })
    }

    htmlAlert(options, messages) {
        return this.$mdDialog.alert()
            .targetEvent(options.targetEvent)
            .htmlContent(options.htmlContent)
            .ok(options.ok || messages['core.common.dialog-service.alert_ok'])
    }

    showHtmlAlert(options) {
        return this.$translate(['core.common.dialog-service.alert_ok'])
            .then(messages => {
                return this.$mdDialog.show(this.htmlAlert(options, messages))
            })
    }

    confirm(options) {
        return this.$mdDialog.confirm()
            .title(options.title)
            .textContent(options.content)
            .ariaLabel(options.ariaLabel)
            .targetEvent(options.targetEvent)
            .ok(options.ok)
            .cancel(options.cancel)
    }

    showConfirm(options) {
        return this.$mdDialog.show(this.confirm(options))
            .then(data => {
                this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Confirm'})
                return data
            })
            .catch(err => {
                if (!err) {
                    this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Cancel'})
                }
                return this.$q.reject(err)
            })
    }

    show(dialog) {
        return this.$mdDialog.show(dialog)
            .then(data => {
                this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Confirm'})
                return data
            })
            .catch(err => {
                if (!err) {
                    this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Cancel'})
                }
                return this.$q.reject(err)
            })
    }

    confirmDelete(options) {
        let self = this
        let translationModel = {
            name: options.entityName
        }
        delete options.entityName
        let deleteOptions = _.assign({}, this.deleteDefaults, options)
        let values = _.values(deleteOptions)
        let deleteMessages = _.filter(values, message => _.isString(message))

        return this.$translate(deleteMessages, translationModel)
            .then(messages => {
                deleteOptions.title = messages[deleteOptions.title]
                deleteOptions.content = messages[deleteOptions.content]
                deleteOptions.ariaLabel = messages[deleteOptions.ariaLabel]
                deleteOptions.ok = messages[deleteOptions.ok]
                deleteOptions.cancel = messages[deleteOptions.cancel]

                return self.confirm(deleteOptions)
            })
    }

    showConfirmDelete(options) {
        return this.confirmDelete(options)
            .then(dialog => this.$mdDialog.show(dialog))
            .then(data => {
                this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Confirm'})
                return data
            })
            .catch(err => {
                if (!err) {
                    this.$analytics.eventTrack(this.$state.current.name, {category: 'Modal Action', label: 'Cancel'})
                }
                return this.$q.reject(err)
            })
    }

    cancel(dialog) {
        return this.$mdDialog.cancel(dialog)
    }
}
