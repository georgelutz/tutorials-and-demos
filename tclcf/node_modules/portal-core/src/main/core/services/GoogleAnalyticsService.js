var _ = require('lodash')

module.exports = class GoogleAnalyticsService {


    /* @ngInject */
    constructor($analytics, $location, $window, authConfig, authService) {
        this.$analytics = $analytics
        this.$location = $location
        this.$window = $window
        this.authConfig = authConfig
        this.authService = authService
    }

    setCustomDimension(dimension, value) {
        if (this.$window.ga) {
            this.$window.ga('set', dimension, value)
        }
    }

    excludeTestTraffic() {
        //When performing automated testing, set a flag which GA can use to filter irrelevant results.
        if (this.$window.localStorage.automatedTesting) {
            this.setCustomDimension('dimension2', 'AutomatedTesting')
        }
    }

    /*
     Sets a Site ID that allows Google to determine which of our sites is responsible for an event or page load.
     Each portal with analytics will have two possible IDs: one for Prod, and one for non-Prod.
     */

    setAccount(userId) {
        if (this.authConfig.googleAnalyticsKeys) {
            let nonProdEnvs = ['localhost', 'dev', 'qa', 'staging', 'canary']
            let isProd = !_.some(nonProdEnvs, env => _.includes(this.$location.host(), env))
            let gauser = isProd ? this.authConfig.googleAnalyticsKeys.production : this.authConfig.googleAnalyticsKeys.nonProduction

            if (this.$window.ga) {
                if (userId) {
                    this.$window.ga('create', gauser, {userId: userId})
                } else {
                    this.$window.ga('create', gauser, 'auto')
                }
                this.excludeTestTraffic()
            }
        }
    }

    forceSSL() {
        if (this.$window.ga) {
            this.$window.ga('set', 'forceSSL', 'true')
        }
    }

    initialize() {
        return this.authService.getCurrentUser().then(user => {
            if (this.$window.ga && !user.anonymous) {
                this.$analytics.setUsername(user.id)
                this.setCustomDimension('dimension1', user.orgType)
                this.setCustomDimension('dimension3', user.userRoles[0].name)
                this.setCustomDimension('dimension4', user.orgId)
            }
        })
    }
}
