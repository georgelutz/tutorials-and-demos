var _ = require('lodash')

module.exports = class I18nService {
    /* @ngInject */
    constructor($q, $translate, tmhDynamicLocale, localeHelper) {
        this.$q = $q
        this.$translate = $translate
        this.tmhDynamicLocale = tmhDynamicLocale
        this.localeHelper = localeHelper
    }

    /** Continues recursing with promises until one fails */
    lookup(translationId, index) {
        if (index >= 100) {
            // TODO: we could be more flexible if we could get $translationTable from angular-translate
            return this.$q.reject({reason: "Don't use this approach with large arrays."})
        }

        return this.$translate(`${translationId}.${index}`)
            .then(translation => {
                if (translation && translation.indexOf(translationId) === -1) {
                    return this.lookup(translationId, index + 1)
                        .then(next => [translation].concat(next))
                } else {
                    return this.$q.resolve([])
                }
            })
    }

    /** Helper for retrieving localized arrays from angular-translate */
    getArray(translationId) {
        // We request translationId.0, translationId.1, .. until we fail, because we can't know the length
        return this.lookup(translationId, 0)
    }

    /** Helper for changing the current locale */
    updateCurrentLocale(user) {
        if (user.locale) {
            this.tmhDynamicLocale.set(user.locale.toLowerCase())
            return this.$translate.use(user.locale)
                .then(() => user)
        } else {
            return this.$q.resolve(user)
        }
    }

    getBrowserLocale() {
        var browserLocale = this.$translate.preferredLanguage()
        var userLocale = _.find(this.localeHelper.locales, function(loc) {
            return loc.toLowerCase() === browserLocale.toLowerCase()
        })
        if (!userLocale) {
            userLocale = _.find(this.localeHelper.locales, function(loc) {
                return loc.slice(0, 2).toLowerCase() === browserLocale.slice(0, 2).toLowerCase()
            })
            if (!userLocale) {
                userLocale = this.localeHelper.defaultLocale
            }
        }
        return userLocale
    }
}
