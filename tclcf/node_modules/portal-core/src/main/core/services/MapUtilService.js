var _ = require('lodash')
var MapDialog = require('../components/MapDialog')

module.exports = class MapUtilService {
    /* @ngInject */
    constructor(mapApiKey, $mdDialog, $q, $http) {
        this.mapApiKey = mapApiKey
        this.$mdDialog = $mdDialog
        this.$q = $q
        this.$http = $http
    }

    deg2rad(deg) {
        return deg * Math.PI / 180.0
    }

    rad2deg(rad) {
        return rad * 180 / Math.PI
    }

    distance(lat1, lon1, lat2, lon2) {
        let theta = lon1 - lon2
        let dist = Math.sin(this.deg2rad(lat1)) * Math.sin(this.deg2rad(lat2)) +
            Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
            Math.cos(this.deg2rad(theta))
        dist = Math.acos(dist)
        dist = this.rad2deg(dist)
        dist = dist * 60 * 1.1515

        let result = (Math.round(dist * 10) / 10).toFixed(1)
        return `${result} Miles`
    }

    getMapUrl(lat, lon, scale) {
        return `https://pcmiler.alk.com/APIs/REST/v1.0/Service.svc/map?AuthToken=${this.mapApiKey}&pt1=${lon + scale},
                ${lat + scale}&pt2=${lon - scale},${lat - scale}&pins=${lon},${lat}&drawergroups=Cities,Labels,Roads,
                Commercial,Borders,Areas&srs=EPSG:4326&region=NA&dataset=Current&init=true&imgOption=Both&width=300&
                height=300`.replace(/\s/g, '')
    }

    getSimpleMapUrl(location = {}, scale = 0.05) {
        let lat = location.lat || location.latitude
        let lon = location.lon || location.longitude
        if (lon && lat) {
            return this.getMapUrl(lat, lon, scale)
        }
    }

    geocode(street, city, state, zip) {
        if (!street && !city && !state && !zip) {
            return Promise.resolve()
        }
        let url = `https://pcmiler.alk.com/APIs/REST/v1.0/service.svc/locations?AuthToken=${this.mapApiKey}&list=1
                   &region=4&dataset=Current&street=${street}&city=${city}&state=${state}&
                   postcode=${zip}`.replace(/\s/g, '')

        return this.$http.get(url)
            .then(result => {
                let coords = _.get(result, 'data[0].Coords') || {}
                return {
                    lon: coords.Lon,
                    lat: coords.Lat
                }
            })
    }

    reverseGeocode(lon, lat) {
        let url = `https://pcmiler.alk.com/APIs/REST/v1.0/service.svc/locations?AuthToken=${this.mapApiKey}&region=4
                   &dataset=Current&coords=${lon},${lat}`.replace(/\s/g, '')

        return this.$http.get(url)
            .then(result => {
                let address = _.get(result, 'data[0].Address') || {}
                return {
                    streetAddress: address.StreetAddress,
                    city: address.City,
                    country: address.Country,
                    state: address.State,
                    zipcode: address.Zip
                }
            })
    }

    showMapPopup(event) {
        let defer = this.$q.defer()

        let dialog = _.clone(MapDialog)
        dialog.targetEvent = event
        dialog.locals = {
            defer: defer
        }

        this.$mdDialog.show(dialog)
            //destroy the map on close
            .finally(() => defer.promise.then(map => map.destroy()))

        return defer.promise
    }

    showSimpleMapPopup(event, location = {}) {
        let lat = location.lat || location.latitude
        let lon = location.lon || location.longitude

        if (lon && lat) {
            return this.showMapPopup(event)
                .then(map => {
                    map.addLayer('vectorMarker', 'Point')
                        .plotPoints('Point', [{location: {lat: lat, lon: lon}}])
                        .setCenter(lon, lat, 12)
                })
        }
    }
}
