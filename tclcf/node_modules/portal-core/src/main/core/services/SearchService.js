const _ = require('lodash')

module.exports = class SearchService {
    /* @ngInject */
    constructor($log, $q, $state, authService, globalSearch, Restangular) {
        this.$log = $log
        this.$q = $q
        this.$state = $state
        this.authService = authService
        this.globalSearch = globalSearch
        this.Restangular = Restangular

        //initialize
        this.searchItems = globalSearch.searchItems
        this.searchFunctions = _.map(globalSearch.searchFunctions, searchFunction => searchFunction.function)
    }

    search(term, entities) {
        let searchEntities = entities || _.map(this.searchItems, 'type')
        let params = {
            q: term,
            page: 0,
            pageSize: 5,
            globalsearch: true,
            entities: searchEntities
        }

        let results = _.map(this.searchFunctions, searchFunction => searchFunction(this.$log, this.authService, this.Restangular, params))

        return this.$q.all(results).then(data => {
            return _.reduce(data, (final, datum) => {
                _.merge(final, datum)
                return final
            })
        })
    }

    typeAheadSearch(term, entities, context) {
        return this.search(term, entities)
            .then(data => {
                let results = []

                _.each(this.searchItems, searchItem => {
                    if (searchItem.responseHandler) {
                        let processed = searchItem.responseHandler(data, context)

                        //add the term for later use
                        _.each(processed, it => {
                            it.term = term
                            results.push(it)
                        })
                    }
                })

                return results
            })
    }

    handleSelection(value) {
        return _.some(this.searchItems, searchItem => {
            return searchItem.selectHandler && searchItem.selectHandler(value, this.$state)
        })
    }

    termSearch(term) {
        return this.search(term)
            .then(data => {
                let keys = _.keys(data)

                //single results should reroute
                if (keys && keys.length === 1) {
                    let type = keys[0]
                    if (_.get(data[type], 'responseDescription.totalHits', 0) === 1) {
                        let searchItem = _.find(this.searchItems, {type: type})
                        let items = searchItem.responseHandler(data)
                        searchItem.selectHandler(items[0], this.$state)
                        return null
                    }
                }

                // Add icons for result type
                _.each(this.searchItems, searchItem => {
                    if (searchItem.responseHandler) {
                        let response = _.head(searchItem.responseHandler(data))

                        if (response) {
                            data[response.type].icon = response.icon
                        }
                    }
                })

                return data
            })
    }

    getTypeTranslationKey(type) {
        let searchItem = _.find(this.searchItems, {type: type})
        return _.get(searchItem, 'typeTranslationKey', type)
    }

    routeToList(type, term) {
        let searchItem = _.find(this.searchItems, {type: type})
        this.$state.go(searchItem.listRoute, {q: term})
    }

    processSingle(type, item) {
        let fakeObject = {}
        fakeObject[type] = {data: [item]}

        let searchItem = _.find(this.searchItems, {type: type})
        let items = searchItem.responseHandler(fakeObject)
        return _.first(items)
    }
} 
