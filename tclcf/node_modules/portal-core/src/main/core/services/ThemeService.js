var _ = require('lodash')

module.exports = class ThemeService {
    /* @ngInject */
    constructor($mdTheming, $state, authConfig, localStorageService, mdPalettes, portalSha) {
        this.$mdTheming = $mdTheming
        this.$state = $state
        this.localStorageService = localStorageService
        this.mdPalettes = mdPalettes
        this.authConfig = authConfig
        this.portalSha = portalSha

        //initialize
        this.sha = portalSha ? `.${portalSha}` : ''
        this.theme = localStorageService.get('theme') || 'default'
        this.loginSrc = null
        this.navSrc = null

        this.setTheme(this.theme, false)
    }
    
    getColor(themeName = this.theme, palette = 'primary', hue = '500') {
        let theme = this.getTheme(themeName)
        let paletteName = theme.colors[palette].name
        return this.mdPalettes[paletteName][hue].value
    }

    getCurrentTheme() {
        return this.theme
    }
    
    getTheme(name = this.theme) {
        return this.$mdTheming.THEMES[name]
    }

    getLogin() {
        return this.loginSrc
    }

    getNav() {
        return this.navSrc
    }

    getThemeList() {
        return _.filter(Object.keys(this.$mdTheming.THEMES), item => item !== 'warn')
    }

    getPalettes() {
        return this.mdPalettes
    }

    getThemes() {
        return this.$mdTheming.THEMES
    }

    setTheme(newTheme, reload = true) {
        //set color
        this.theme = this.$mdTheming.THEMES[newTheme] ? newTheme : 'default'

        //set login and nav images
        if (this.authConfig.navImageUrl && this.authConfig.loginImageUrl) {
            this.loginSrc = this.authConfig.loginImageUrl
            this.navSrc = this.authConfig.navImageUrl
        } else if (this.theme === 'default') {
            this.loginSrc = `images/login_logo${this.sha}.png`
            this.navSrc = `images/nav_logo${this.sha}.png`
        } else {
            this.loginSrc = `images/login_logo_${this.theme}${this.sha}.png`
            this.navSrc = `images/nav_logo_${this.theme}${this.sha}.png`
        }

        //save for next session
        this.localStorageService.set('theme', this.theme)

        //reload
        if (reload) {
            this.$state.go(this.$state.current, {}, {reload: true})
        }

        return this.theme
    }
}
