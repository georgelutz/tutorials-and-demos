const _ = require('lodash')

module.exports = class UnitConversionService {
    /* @ngInject */
    constructor($translate, authService, units, unitConversions) {
        this.$translate = $translate
        this.authService = authService
        this.units = units
        this.unitConversions = unitConversions

        this.loadPromise = this.getUserUnits()
            .then(() => this.loadTranslations())
    }

    getUserUnits() {
        return this.authService.getCurrentUser()
            .then(user => {
                this.userDistanceUnit = user.getTagByKey('distanceUnit') || this.units.defaultForDistance
                this.userVolumeUnit = user.getTagByKey('volumeUnit') || this.units.defaultForVolume
                this.userTemperatureUnit = user.getTagByKey('temperatureUnit') || this.units.defaultForTemperature
                this.userPressureUnit = user.getTagByKey('pressureUnit') || this.units.defaultForPressure
                this.userMassUnit = user.getTagByKey('massUnit') || this.units.defaultForMass
            })
    }

    loadTranslations() {
        let units = [].concat(
            this.units.ofDistance,
            this.units.ofVolume,
            this.units.ofTemperature,
            this.units.ofPressure,
            this.units.ofMass,
            this.units.ofSpeed,
            this.units.ofFuelConsumption,
            this.units.ofMassFlowRate
        )

        let translations = []
        _.forEach(units, unit => {
            translations.push(`core.units.${unit}_short`)
            translations.push(`core.units.${unit}_long`)
        })

        return this.$translate(translations).then(resources => {
            this.res = resources

            this.labels = {
                distance: {},
                volume: {},
                temperature: {},
                pressure: {},
                mass: {},
                speed: {},
                fuelConsumption: {},
                massFlowRate: {}
            }

            _.forEach(resources, (label, resource) => {
                let found = resource.match(/core\.units\.(.+)_(.+)/)

                let unit = found[1]
                let labelType = found[2]
                let type = this.getUnitType(unit)

                if (!this.labels[type][unit]) {
                    this.labels[type][unit] = {}
                }
                this.labels[type][unit][labelType] = label
            })
        })
    }

    getUnitType(unit) {
        let unitTypes = {
            distance: this.units.ofDistance,
            volume: this.units.ofVolume,
            temperature: this.units.ofTemperature,
            pressure: this.units.ofPressure,
            mass: this.units.ofMass,
            speed: this.units.ofSpeed,
            fuelConsumption: this.units.ofFuelConsumption,
            massFlowRate: this.units.ofMassFlowRate
        }

        return _.findKey(unitTypes, units => _.includes(units, unit))
    }

    convertUnit(input, fromUnit, decimals, labelType, toUnit) {
        this.inputUnit = fromUnit ? _.toLower(fromUnit) : ''

        let type = this.getUnitType(this.inputUnit)

        let outputUnits = {
            distance: this.userDistanceUnit,
            volume: this.userVolumeUnit,
            temperature: this.userTemperatureUnit,
            pressure: this.userPressureUnit,
            mass: this.userMassUnit,
            speed: `${this.userDistanceUnit}/h`,
            fuelConsumption: `${this.userDistanceUnit}/${this.userVolumeUnit}`,
            massFlowRate: `${this.userMassUnit}/s`
        }

        this.outputUnit = toUnit ? _.toLower(toUnit) : outputUnits[type]

        let unitConversion = _.find(this.unitConversions, {from: this.inputUnit, to: this.outputUnit}) || {convert: i => i}

        this.decimals = _.toNumber(decimals) || 0
        this.input = _.toNumber(input) || 0
        let output = unitConversion.convert(this.input).toFixed(this.decimals)

        let labelTypes = ['short', 'long', 'none']
        labelType = _.includes(labelTypes, labelType) ? labelType : 'none'
        let label = _.get(this.labels, `[${type}][${this.outputUnit}][${labelType}]`, '') || fromUnit
        label = labelType === 'none' ? '' : label

        return {output, label}
    }
}
