const _ = require('lodash')
require('../images/login_logo.png')

module.exports = {
    template: require('../views/login.html'),
    controller: class Login {
        /* @ngInject */
        constructor($analytics, $log, $q, $scope, $state, $window, authService, dialogService, Restangular, toastService) {
            this.$analytics = $analytics
            this.$log = $log
            this.$q = $q
            this.$scope = $scope
            this.$state = $state
            this.$window = $window
            this.authService = authService
            this.dialogService = dialogService
            this.Restangular = Restangular
            this.toastService = toastService
        }

        $onInit() {
            this.user = {}
            this.loading = false

            //catch initial redirect error and direct to nav.welcome
            this.$scope.$on('$stateChangeError', (event, toState, toParams, fromState, fromParams, error) => {
                this.$log.error('Error navigating after login.', error)

                this.$state.go('nav.welcome')
            })

            this.browserSupported = this.isBrowserSupported()
        }

        login() {
            return this.$q.resolve(this.loading = true)
                .then(() => this.authService.login(this.user))
                .catch(err => {
                    this.loading = false
                    this.$log.error('Error while logging in', err)
                    if (err.status === 403) {
                        return this.promptUnverifiedUser(this.user.username)
                    } else {
                        this.$analytics.eventTrack('Failed Login', {category: 'Security', label: err.status})
                        let msg = _.get(err, 'data.rejectReason',
                            'An error has occured. Please check your connection and try again.')
                        this.toastService.show(msg, {theme: 'warn'})
                    }
                })
                .finally(() => this.loading = false)
        }

        promptUnverifiedUser(emailAddress) {
            var confirmOptions = {
                title: 'Unverified E-mail',
                content: `You must verify the email "${emailAddress}" to log in. Would you like to resend the verification email?`,
                ariaLabel: 'Unverified E-mail',
                ok: 'Resend',
                cancel: 'Cancel'
            }

            return this.dialogService.showConfirm(confirmOptions)
                .then(() => this.Restangular.all('users').customPOST({emailAddress: emailAddress}, 'emailAddress/resendValidationLink'))
                .then(() => this.toastService.show(`An email has been sent to ${emailAddress} to verify the email address.`))
                .catch(err => {
                    if (err) {
                        this.$log.error('Error sending verification email', err)
                        this.toastService.show('An error occurred while sending verification email.', {theme: 'warn'})
                    }
                })
        }

        isBrowserSupported() {
            var ua = this.$window.navigator.userAgent

            //IE10-
            if (/MSIE (\d+\.\d+)/.test(ua)) {
                return false //only IE11+ is supported

                //IE11+
            } else if (/Trident.*rv[ :]*(\d+\.\d+)/.test(ua)) {
                return (Number(RegExp.$1) >= 11)

                //FireFox
            } else if (/Firefox[\/\s](\d+\.\d+)/.test(ua)) {
                return (Number(RegExp.$1) >= 33)

                //Chrome
            } else if (/Chrome[\/\s](\d+\.\d+)/.test(ua)) {
                return (Number(RegExp.$1) >= 38)

                //Safari
            } else if (/Safari[\/\s](\d+\.\d+)/.test(ua)) {
                return (Number(RegExp.$1) >= 537)
            }

            //no match with supported browsers
            return false
        }
    }
}
