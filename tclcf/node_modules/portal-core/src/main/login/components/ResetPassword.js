var _ = require('lodash')

module.exports = {
    template: require('../views/resetPassword.html'),
    controller: class ResetPassword {
        /* @ngInject */
        constructor($log, $state, $stateParams, $translate, authService, toastService, Restangular) {
            this.$log = $log
            this.$state = $state
            this.$stateParams = $stateParams
            this.$translate = $translate
            this.authService = authService
            this.toastService = toastService
            this.Restangular = Restangular
        }

        $onInit() {
            this.$translate([
                'login.reset.account_activated',
                'login.reset.password_changed',
                'login.common.err_unexpected']
            ).then(translations => {
                this.res = translations
            })

            this.validateResetCode()

            this.activate = this.$state.current.name === 'auth.activateaccount'
            this.resetCode = this.$stateParams.resetCode
            this.user = {resetCode: this.resetCode}
            this.loading = true
        }

        validateResetCode() {
            return this.Restangular.all('users').all('validatePasswordResetCode').post({resetCode: this.$stateParams.resetCode})
                .then(response => {
                    if (!_.get(response, 'success')) {
                        this.$log.error('Error validating password reset code', response)
                        var msg = _.get(response, 'errorMessage', this.res['login.common.err_unexpected'])
                        this.toastService.show(msg, {theme: 'warn'})
                        return this.$state.go('auth.login')
                    }
                })
                .catch(err => {
                    var msg = _.get(err, 'data.message') || this.res['login.common.err_unexpected']
                    this.$log.error('Error validating password reset code', err)
                    this.toastService.show(msg, {theme: 'warn'})
                    return this.$state.go('auth.login')
                })
        }

        submit() {
            return this.Restangular.all('users').all('resetPassword').post(this.user)
                .then(response => {
                    if (_.get(response, 'success')) {
                        if (this.activate) {
                            this.toastService.show(this.res['login.reset.account_activated'])
                        } else {
                            this.toastService.show(this.res['login.reset.password_changed'])
                        }

                        // login and redirect to welcome page.
                        return this.authService.login({
                            username: response.userName,
                            password: this.user.password
                        }).then(() => {
                            return this.$state.go('nav.welcome')
                        }).catch(() => {
                            return this.$state.go('auth.login')
                        })
                    } else {
                        this.$log.error('Error resetting password', response)
                        var msg = _.get(response, 'errorMessage', this.res['login.common.err_unexpected'])
                        this.toastService.show(msg, {theme: 'warn'})
                    }
                })
                .catch(err => {
                    this.$log.error('Error resetting password', err)
                    var msg = _.get(err, 'fieldErrors.password.message', this.res['login.common.err_unexpected'])
                    this.toastService.show(msg, {theme: 'warn'})
                })
        }

        // Compares password and confirm password and sets form validity
        compareFields() {
            var validity = this.user.password === this.confirmPassword
            this.form.confirmPassword.$setValidity(
                'fieldEquality',
                validity
            )
            return validity
        }
    }
}
