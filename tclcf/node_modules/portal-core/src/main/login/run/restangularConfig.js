var _ = require('lodash')

module.exports = /* @ngInject */
    function($log, $http, $state, authConfig, authService, Restangular, tokenService, fieldErrorService) {
        function isUrlExcluded(url) {
            var excludedUrlPatterns = [
                /refreshToken$/,
                /userLogin$/
            ]
            return _.some(excludedUrlPatterns, pattern => url.match(pattern))
        }

        //set headers on requests
        Restangular.setFullRequestInterceptor((element, operation, route, url, headers, params, httpConfig) => {
            if (!isUrlExcluded(url)) {
                headers['X-Auth-Token'] = tokenService.getEncodedToken()
                if (authConfig.oem) {
                    headers['x-oem'] = authConfig.oem
                }
            }

            return {
                element: element,
                params: params,
                headers: headers,
                httpConfig: httpConfig
            }
        })

        //handle errors
        var tokenRefreshPromise = null
        Restangular.setErrorInterceptor((response, deferred, responseHandler) => {
            if (response.status === 401 && !isUrlExcluded(response.config.url)) {
                if (!tokenRefreshPromise) {
                    tokenRefreshPromise = authService.refreshTokens()
                }
                tokenRefreshPromise
                    .then(() => {
                        //set new token header
                        response.config.headers['X-Auth-Token'] = tokenService.getEncodedToken()

                        // Repeat the request
                        return $http(response.config)
                            .then(responseHandler)
                    })
                    .catch(() => {
                        $state.go('auth.login')
                        deferred.reject()
                    })
                    .finally(() => tokenRefreshPromise = null)

                return false // error handled
            }

            if (response.status === 403) {
                $log.error('Access is denied.', response)
            }

            if (response.status === 422 || response.status === 420) {
                fieldErrorService.fieldErrors = _.get(response, 'data.fieldErrors')
            }

            return true // error not handled
        })

        //perform initial login
        authService.tokenUpdated(tokenService.getToken(), true)
    }
