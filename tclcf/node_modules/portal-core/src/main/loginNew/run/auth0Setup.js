const _ = require('lodash')

module.exports = /* @ngInject */
    function($http, $state, $timeout, authConfig, authService, fieldErrorService, Restangular, tokenService) {

        //set headers on requests
        Restangular.setFullRequestInterceptor((element, operation, route, url, headers, params, httpConfig) => {
            let token = tokenService.getEncodedToken()
            headers.Authorization = `Bearer ${token}`

            return {
                element: element,
                params: params,
                headers: headers,
                httpConfig: httpConfig
            }
        })

        //handle errors
        let loginPromise = null
        Restangular.setErrorInterceptor((response, deferred, responseHandler) => {
            if (response.status === 401) {
                if (authConfig.requireLogin) {
                    authService.logout()
                    $state.go('auth.login')
                } else {
                    if (!loginPromise) {
                        loginPromise = authService.login()
                    }

                    loginPromise
                        .then(() => {
                            //set new token header
                            let token = tokenService.getEncodedToken()
                            response.config.headers.Authorization = `Bearer ${token}`

                            // Repeat the request
                            return $http(response.config)
                                .then(responseHandler)
                        })
                        .catch(() => {
                            authService.logout()
                            $timeout(() => $state.go('nav.welcome'))
                            deferred.reject()
                        })
                        .finally(() => {
                            loginPromise = null
                        })
                }

                return false // error handled
            }

            //handle invalid entity responses
            if (response.status === 422 || response.status === 420) {
                fieldErrorService.fieldErrors = _.get(response, 'data.fieldErrors')
            }

            return true // error not handled
        })

        //perform initial login
        authService.tokenUpdated(tokenService.getToken(), authConfig.requireLogin)
    }
