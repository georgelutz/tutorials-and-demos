const _ = require('lodash')
require('../styles/permissionList.scss')

module.exports = {
    template: require('../views/permissionList.html'),
    controller: class PermissionList {
        /* @ngInject */
        constructor($filter, $state, listService) {
            this.$filter = $filter
            this.$state = $state
            this.listService = listService
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.permissions = this.$state.$current.locals.globals.permissions
            this.currentUser = this.$state.$current.locals.globals.currentUser

            this.staticResults = _.map(this.permissions, permission => ({
                icon: 'lock_outline',
                name: permission.displayName,
                type: 'static',
                key: permission.key,
                term: permission.key,
                param: 'app'
            }))

            this.currentState = this.$state.current

            this.total = this.permissions.length

            this.context = 'permissionList'

            this.toolbarTitle = 'permission.common.permissions'

            this.cols = [
                {
                    name: 'permission.common.name',
                    template: `<a ng-if="$ctrl.currentUser.hasPermission('ROLE_PERMISSION_WRITE')" ng-href="/#/nav/permission/edit/{{row.id}}" class="list-row-link" ng-bind="row.displayName"></a>
                               <span ng-if="!$ctrl.currentUser.hasPermission('ROLE_PERMISSION_WRITE')" ng-bind="row.displayName"></span>`
                },
                {
                    name: 'permission.common.description',
                    path: 'description'
                }
            ]

            this.rows = this.permissions

            this.toolbarOptions = {
                densityButton: true,
                filterButton: true
            }

            this.tableOptions = {
                rowSelect: true
            }

            this.paginationOptions = {
                boundaryLinks: true,
                pageSelect: true,
                pageSizes: [10, 25, 50]
            }

            this.chipFilterOptions = {
                entities: this.entities,
                entityChips: this.entityChips,
                staticResults: this.staticResults
            }

            this.cardContent = '<permission-card permission="row" current-user="$ctrl.currentUser"></permission-card>'

            this.params = {
                page: this.listService.page - 1,
                pageSize: this.listService.pageSize
            }

            this.getRows()
        }

        getRows() {
            let start = this.params.page * this.params.pageSize
            let end = start + this.params.pageSize
            this.rows = _.slice(this.permissions, start, end)
        }

        changePage(params) {
            this.params.page = params.page
            this.params.pageSize = params.pageSize

            this.listService.page = params.page + 1
            this.listService.pageSize = params.pageSize

            return this.getRows()
        }

        changeDensity(params) {
            return this.listService.density = params.density
        }

        chipsUpdated(selectedChips) {
            if (_.get(selectedChips.selectedChips, 'length')) {
                let results = _.reduce(selectedChips.selectedChips, (result, chip) => {
                    let found = this.$filter('filter')(this.permissions, chip.term)
                    result.push(found)
                    return result
                }, [])

                //find the results that match all chips and put them first in the results
                //then put the rest of the results in the list - this should relatively
                //simulate how elastic search returns search results
                this.rows = _.uniq(_.intersection(...results).concat(_.flatten(results)))

                this.total = _.size(this.rows)
            } else {
                this.getRows()

                this.total = _.size(this.permissions)
            }

            //stop the state reload from happening
            return true
        }
    }
}
