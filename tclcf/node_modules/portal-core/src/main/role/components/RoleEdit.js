const _ = require('lodash')
require('../styles/roleEdit.scss')

module.exports = {
    template: require('../views/roleEdit.html'),
    controller: class RoleEdit {
        /* @ngInject */
        constructor($log, $state, $translate, $translateDefaultInterpolation, toastService, loadingService) {
            this.$log = $log
            this.$state = $state
            this.$translate = $translate
            this.$translateDefaultInterpolation = $translateDefaultInterpolation
            this.toastService = toastService
            this.loadingService = loadingService
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.role = this.$state.$current.locals.globals.role
            this.permissions = this.$state.$current.locals.globals.permissions
            this.organizationTypes = this.$state.$current.locals.globals.organizationTypes
            this.applications = this.$state.$current.locals.globals.applications

            this.$translate([
                'role.roleEdit.err_while_saving',
                'role.roleEdit.confirm_save'
            ], {name: '{{name}}'}).then(translations => {
                this.res = translations
            })
        }

        save() {
            this.role.organizationTypes = _.filter(this.organizationTypes, {selected: true})
            this.role.applications = _.filter(this.applications, {selected: true})
            this.role.permissions = _.filter(this.permissions, {selected: true})

            let confirm_save = this.$translateDefaultInterpolation.interpolate(
                this.res['role.roleEdit.confirm_save'],
                {name: this.role.name}
            )

            this.loadingService.loading(true)
            return this.role.put()
                .then(() => {
                    this.toastService.show(confirm_save)
                    return this.$state.go('nav.role.list')
                })
                .catch(err => {
                    this.loadingService.loading(false)
                    this.$log.error('Error saving role.', err)
                    return this.toastService.show(this.res['role.roleEdit.err_while_saving'], {theme: 'warn'})
                })
                .finally(() => {
                    this.loadingService.loading(false)
                })
        }

        confirmDelete(event) {
            return this.role.confirmDelete(event)
                .then(() => {
                    if (this.role.deleted) {
                        return this.$state.go('nav.role.list')
                    }
                })
        }
    }
}
