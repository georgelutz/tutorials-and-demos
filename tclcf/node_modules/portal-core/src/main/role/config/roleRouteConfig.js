var _ = require('lodash')

module.exports = /* @ngInject */
    function($stateProvider, routeHelper) {

        //add to routes
        $stateProvider
            .state('nav.role', {
                url: '/role',
                template: require('../../core/views/moduleBase.html'),
                resolve: {
                    permission: routeHelper.hasPermission('ROLE_ROLE_READ')
                }
            })

            .state('nav.role.list', {
                url: '/list/?density',
                template: '<role-list></role-list>',
                resolve: {
                    currentUser: routeHelper.currentUser,
                    roles: function(listService, Restangular) {
                        listService.page = listService.page || 1
                        listService.pageSize = listService.pageSize || 10

                        return Restangular.all('roles').getList({sort: 'name'})
                    }
                }
            })

            .state('nav.role.edit', {
                url: '/edit/:key',
                template: '<role-edit></role-edit>',
                resolve: {
                    role: routeHelper.get('roles'),
                    permissions: function(Restangular, role) {
                        return Restangular.all('permissions').getList()
                            .then(permissions => {
                                //process selected ones
                                return _.map(permissions, permission => {
                                    permission.selected = !!_.find(role.permissions, {id: permission.id})
                                    return permission
                                })
                            })
                    },
                    organizationTypes: function(Restangular, role) {
                        return Restangular.all('organizationTypes').all('realms').all('OEM').getList()
                            .then(organizationTypes => {
                                return _.map(organizationTypes, organizationType => {
                                    organizationType.selected = !!_.find(role.organizationTypes, {id: organizationType.id})
                                    return organizationType
                                })
                            })
                    },
                    applications: function(Restangular, role) {
                        return Restangular.all('applications').getList()
                            .then(applications => {
                                return _.map(applications, application => {
                                    application.selected = !!_.find(role.applications, {id: application.id})
                                    return application
                                })
                            })
                    }
                }
            })

            .state('nav.role.add', {
                url: '/add',
                template: '<role-edit></role-edit>',
                resolve: {
                    role: function(Restangular) {
                        return Restangular.restangularizeElement(null, {adding: true}, 'roles')
                    },
                    permissions: function(Restangular) {
                        return Restangular.all('permissions').getList()
                    },
                    organizationTypes: function(Restangular) {
                        return Restangular.all('organizationTypes').all('realms').all('OEM').getList()
                    },
                    applications: function(Restangular) {
                        return Restangular.all('applications').getList()
                    }
                }
            })
    }
