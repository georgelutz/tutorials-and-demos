const _ = require('lodash')

const SuiteListDialog = require('../../suite/listDialog/SuiteListDialog')
const OrganizationListDialog = require('../../organization/listDialog/OrganizationListDialog')
const PermissionListDialog = require('../../permissionNew/listDialog/PermissionListDialog')

require('./roleEdit.scss')

module.exports = {
    template: require('./roleEdit.html'),
    controller: class RoleEdit {
        /* @ngInject */
        constructor($filter, $log, $state, $translate, dialogService, listService, loadingService, toastService) {
            this.$filter = $filter
            this.$log = $log
            this.$state = $state
            this.$translate = $translate
            this.dialogService = dialogService
            this.listService = listService
            this.loadingService = loadingService
            this.toastService = toastService
        }

        $onInit() {
            this.role = this.$state.$current.locals.globals.role

            this.suites = [
                {
                    id: 1,
                    name: 'Suite 1'
                },
                {
                    id: 2,
                    name: 'Suite 2'
                }
            ]

            this.organizations = [
                {
                    id: 1,
                    name: 'Organization 1'
                },
                {
                    id: 2,
                    name: 'Organization 2'
                }
            ]

            this.permissions = [
                {
                    id: 1,
                    name: 'Permission 1'
                },
                {
                    id: 2,
                    name: 'Permission 2'
                }
            ]

            if (!this.role.adding) {
                this.role.suites = [
                    this.suites[0]
                ]

                this.role.organizations = [
                    this.organizations[0]
                ]

                this.role.permissions = [
                    this.permissions[0]
                ]
            }

            return this.loadTranslations()
        }

        loadTranslations() {
            let translations = [
                'roleNew.roleEdit.error.on_create',
                'roleNew.roleEdit.error.on_update',
                'roleNew.roleEdit.success.on_create',
                'roleNew.roleEdit.success.on_update'
            ]
            return this.$translate(translations)
                .then(res => this.res = res)
        }

        showSuiteListDialog() {
            let dialog = _.cloneDeep(SuiteListDialog)

            let suites = _.cloneDeep(this.suites)

            dialog.locals = {
                assignee: this.role.name,
                suites: _.map(suites, suite => {
                    suite.active = !!_.find(this.role.suites, {id: suite.id})
                    return suite
                })
            }

            return this.dialogService.show(dialog)
                .then(activeSuites => {
                    this.role.suites = activeSuites

                    this.listService.selectedRows = []
                })
        }

        removeSuite(suite) {
            _.pull(this.role.suites, suite)
        }

        showOrganizationListDialog() {
            let dialog = _.cloneDeep(OrganizationListDialog)

            let organizations = _.cloneDeep(this.organizations)

            dialog.locals = {
                assignee: this.role.name,
                organizations: _.map(organizations, organization => {
                    organization.active = !!_.find(this.role.organizations, {id: organization.id})
                    return organization
                })
            }

            return this.dialogService.show(dialog)
                .then(activeOrganizations => {
                    this.role.organizations = activeOrganizations

                    this.listService.selectedRows = []
                })
        }

        removeOrganization(organization) {
            _.pull(this.role.organizationTypes, organization)
        }

        showPermissionListDialog() {
            let dialog = _.cloneDeep(PermissionListDialog)

            let permissions = _.cloneDeep(this.permissions)

            dialog.locals = {
                assignee: this.role.name,
                permissions: _.map(permissions, permission => {
                    permission.active = !!_.find(this.role.permissions, {id: permission.id})
                    return permission
                })
            }

            return this.dialogService.show(dialog)
                .then(activePermissions => {
                    this.role.permissions = activePermissions

                    this.listService.selectedRows = []
                })
        }

        removePermission(permission) {
            _.pull(this.role.permissions, permission)
        }

        save() {
            let event = this.role.adding ? 'on_create' : 'on_update'
            this.loadingService.loading(true)
            return this.role.put()
                .then(() => {
                    this.toastService.show(this.res[`roleNew.roleEdit.success.${event}`])
                    return this.$state.go('nav.role.list')
                })
                .catch(err => {
                    this.loadingService.loading(false)
                    this.$log.error('Error saving role.', err)
                    return this.toastService.show(this.res[`roleNew.roleEdit.error.${event}`], {theme: 'warn'})
                })
                .finally(() => {
                    this.loadingService.loading(false)
                })
        }
    }
}
