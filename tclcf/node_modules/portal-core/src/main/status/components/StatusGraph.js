var _ = require('lodash')
var d3 = require('d3')

module.exports = {
    template: '<svg></svg>',
    bindings: {
        data: '<',
        timeFormat: '@'
    },
    controller: class StatusGraph {
        /* @ngInject */
        constructor($element, themeService) {
            this.$element = $element
            this.themeService = themeService
        }

        $onInit() {
            //size and margins
            let margin = {top: 15, right: 15, bottom: 30, left: 30}
            let width = 350 - margin.left - margin.right
            let height = 150 - margin.top - margin.bottom

            //point scalers
            let x = d3.time.scale()
                .range([0, width])
                .domain([
                    _.first(this.data).x,
                    _.last(this.data).x
                ])
            var y = d3.scale.linear()
                .range([height, 0])
                .domain([
                    _.min(_.map(this.data, 'y')),
                    _.max(_.map(this.data, 'y'))
                ])

            //svg element
            let svg = d3.select(this.$element[0].querySelector('svg'))
                .attr('width', width + margin.left + margin.right)
                .attr('height', height + margin.top + margin.bottom)
                .append('g')
                .attr('transform', `translate(${margin.left},${margin.top})`)

            //data line
            let line = d3.svg.line()
                .x(d => x(d.x))
                .y(d => y(d.y))
                .interpolate('basis')

            //get primary color for line
            let color = this.themeService.getColor()

            //draw data
            svg.append('path')
                .datum(this.data)
                .attr('class', 'line')
                .attr('stroke', `rgb(${color[0]}, ${color[1]}, ${color[2]})`)
                .attr('d', line)

            //x axis
            let xAxis = d3.svg.axis()
                .scale(x)
                .ticks(5)
                .tickFormat(d3.time.format.utc(this.timeFormat || '%H:%M'))
                .orient('bottom')
            svg.append('g')
                .attr('class', 'x axis')
                .attr('transform', `translate(0,${height})`)
                .call(xAxis)

            //y axis
            let yAxis = d3.svg.axis()
                .scale(y)
                .ticks(3)
                .orient('left')
            svg.append('g')
                .attr('class', 'y axis')
                .call(yAxis)


        }
    }
}
