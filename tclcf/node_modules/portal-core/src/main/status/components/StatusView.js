const _ = require('lodash')
const moment = require('moment')
require('../styles/statusView.scss')

module.exports = {
    template: require('../views/statusView.html'),
    controller: class StatusView {
        $onInit() {
            this.status = true
            this.statusColor = 'green'
            this.statusText = 'All systems are operational.'
            this.statusIcon = 'thumb_up'

            this.dayStats = [
                this.generateFakeData(360, 1440, 4, 'minutes', 0, 100, 4, 'Service Availability', '%'),
                this.generateFakeData(360, 1440, 4, 'minutes', 25, 500, 0, 'Mean Web Response Time', 'ms'),
                this.generateFakeData(360, 1440, 4, 'minutes', 25, 500, 0, 'Mean API Response Time', 'ms')
            ]

            this.weekStats = [
                this.generateFakeData(336, 10080, 30, 'minutes', 0, 100, 4, 'Service Availability', '%'),
                this.generateFakeData(336, 10080, 30, 'minutes', 25, 500, 0, 'Mean Web Response Time', 'ms'),
                this.generateFakeData(336, 10080, 30, 'minutes', 25, 500, 0, 'Mean API Response Time', 'ms')
            ]

            this.monthStats = [
                this.generateFakeData(360, 720, 2, 'hours', 0, 100, 4, 'Service Availability', '%'),
                this.generateFakeData(360, 720, 2, 'hours', 25, 500, 0, 'Mean Web Response Time', 'ms'),
                this.generateFakeData(360, 720, 2, 'hours', 25, 500, 0, 'Mean API Response Time', 'ms')
            ]

            _.each(this.dayStats, stat => this.generateAverages(stat))
            _.each(this.weekStats, stat => this.generateAverages(stat))
            _.each(this.monthStats, stat => this.generateAverages(stat))
        }

        generateFakeData(count, total, multiplier, timeUnit, lower, upper, decimals, name, unit) {
            let data = {name, unit, decimals}
            data.data = [...Array(count).keys()].map(i => ({
                x: moment().subtract(total - i * multiplier, timeUnit),
                y: _.random(lower, upper)
            }))

            return data
        }

        generateAverages(stat) {
            if (stat.unit === '%') {
                stat.data = _.map(stat.data, data => ({
                    x: data.x,
                    y: +(data.y < 98)
                }))
            }

            stat.avg = (_.sum(_.map(stat.data, 'y')) / (stat.data.length + 1))

            if (stat.unit === '%') {
                stat.avg *= 100
            }
        }
    }
}
