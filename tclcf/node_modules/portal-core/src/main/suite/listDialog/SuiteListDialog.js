const _ = require('lodash')

require('./suiteListDialog.scss')

module.exports = {
    template: require('./suiteListDialog.html'),
    clickOutsideToClose: true,
    escapeToClose: true,
    controllerAs: '$ctrl',
    controller: class SuiteListDialog {
        /* @ngInject */
        constructor($filter, $mdDialog, $translate, suites, assignee, listService) {
            this.$filter = $filter
            this.$mdDialog = $mdDialog
            this.$translate = $translate
            this.suites = suites
            this.assignee = assignee
            this.listService = listService

            this.init = this.onInit()
        }

        onInit() {
            this.context = 'suiteListDialog'

            this.toolbarTitle = 'suite.suiteList.title'

            this.cols = [
                {
                    name: 'suite.suiteList.cols.name',
                    path: 'name',
                    sortable: true
                },
                {
                    name: 'suite.suiteList.cols.actions',
                    template: '<modal-action-icons row="row"></modal-action-icons>'
                }
            ]

            this.staticResults = _.map(this.suites, suite => ({
                icon: 'person',
                name: suite.name,
                type: 'static',
                key: suite.id,
                term: suite.name,
                param: 'suite'
            }))

            this.rows = this.suites

            this.total = _.size(this.rows)

            this.toolbarOptions = {
                filterButton: true
            }

            this.tableOptions = {
                rowSelect: true
            }

            this.paginationOptions = {
                boundaryLinks: true,
                pageSizes: [10, 25, 50]
            }

            this.chipFilterOptions = {
                staticResults: this.staticResults
            }

            this.listService.page = 1
            this.listService.pageSize = 10

            this.params = {
                page: this.listService.page - 1,
                pageSize: this.listService.pageSize
            }

            this.getRows()

            return this.loadTranslations()
        }

        loadTranslations() {
            let translations = [
                'suite.suiteListDialog.subheader',
                'suite.suiteListDialog.instructions'
            ]

            return this.$translate(translations)
                .then(res => this.res = res)
        }

        getRows() {
            let start = this.params.page * this.params.pageSize
            let end = start + this.params.pageSize
            this.rows = _.slice(this.suites, start, end)
        }

        changePage(params) {
            this.params.page = params.page
            this.params.pageSize = params.pageSize

            this.listService.page = params.page + 1
            this.listService.pageSize = params.pageSize

            return this.getRows()
        }

        checkChipsCustom() {
            return !!this.chips
        }

        clearChipsCustom() {
            this.getRows()
            return _.remove(this.chips)
        }

        chipsUpdated(params) {
            if (_.get(params.selectedChips, 'length')) {
                let results = _.reduce(params.selectedChips, (result, chip) => {
                    let found = this.$filter('filter')(this.suites, chip.term)
                    result.push(found)
                    return result
                }, [])

                //find the results that match all chips and put them first in the results
                //then put the rest of the results in the list - this should relatively
                //simulate how elastic search returns search results
                this.rows = _.uniq(_.intersection(...results).concat(_.flatten(results)))

                this.total = _.size(this.rows)
            } else {
                this.getRows()

                this.total = _.size(this.suites)
            }

            //stop the state reload from happening
            return true
        }

        cancel() {
            this.$mdDialog.cancel()
        }

        save() {
            let suites = _.filter(this.suites, {active: true})
            this.$mdDialog.hide(suites)
        }
    }
}
