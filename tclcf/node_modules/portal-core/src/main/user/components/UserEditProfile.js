const _ = require('lodash')
require('../styles/userEditProfile.scss')

module.exports = {
    template: require('../views/userEditProfile.html'),
    controller: class UserEditProfile {
        /* @ngInject */
        constructor($log, $q, $state, $translate, $translateDefaultInterpolation, toastService,
                    loadingService, Restangular, authConfig, localeHelper, i18nService, units) {
            this.$log = $log
            this.$q = $q
            this.$state = $state
            this.$translate = $translate
            this.$translateDefaultInterpolation = $translateDefaultInterpolation
            this.toastService = toastService
            this.loadingService = loadingService
            this.Restangular = Restangular
            this.authConfig = authConfig
            this.localeHelper = localeHelper
            this.i18nService = i18nService
            this.units = units
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.currentUser = this.$state.$current.locals.globals.currentUser
            this.user = this.$state.$current.locals.globals.user
            this.userOrgTypes = this.$state.$current.locals.globals.userOrgTypes

            this.edit = !this.user.adding
            if (this.user.adding) {
                this.user.userEmails = []
                _.set(this.user, 'userOrganizations[0].organizationTypeId', this.currentUser.orgType)
                _.set(this.user, 'userOrganizations[0].organizationId', this.currentUser.orgId)
            }
            this.editingSelf = this.user.id === this.currentUser.uid

            this.curOrgType = _.find(this.userOrgTypes, {id: _.get(this.user, 'userOrganizations[0].organizationTypeId')})
            this.editingPFMUser = (this.curOrgType && this.curOrgType.id === 'PFMCustomer')
            this.canCreateUserWithPassword = this.currentUser.hasPermission('ROLE_USER_CREATE_WITH_PASSWORD')
            this.canVerifyUsers = this.currentUser.hasPermission('ROLE_USER_EDIT_VERIFIED_STATUS')
            this.canEditCustomer = this.currentUser.hasPermission('ROLE_CUSTOMER_WRITE')
            this.canChangePassword = this.currentUser.hasPermission('ROLE_USER_CHANGE_PASSWORD')

            this.editingCustomer = this.user.isOrgType('customer')
            this.emailVerified = _.get(this, 'user.userEmails[0].verified')

            this.userRoles = {}
            this.userRoles.availableUserRoles = []

            this.verifyMessage = this.emailVerified ? null : {notVerified: true}

            this.loadPreferences()

            return this.loadTranslations()
                .then(() => this.getOrg())
        }

        loadPreferences() {
            this.sidenavCollapse = this.user.getTagByKey('sidenavCollapse') === 'true'

            this.unitsOfDistance = this.units.ofDistanceVisibleToUser.map(unit =>
                ({value: unit, name: `core.units.${unit}_long`})
            ).sort((a, b) => a.name > b.name)

            this.distanceUnit = _.find(this.unitsOfDistance, {value: this.user.getTagByKey('distanceUnit') || this.units.defaultForDistance})

            this.unitsOfVolume = this.units.ofVolumeVisibleToUser.map(unit =>
                ({value: unit, name: `core.units.${unit}_long`})
            ).sort((a, b) => a.name > b.name)

            this.volumeUnit = _.find(this.unitsOfVolume, {value: this.user.getTagByKey('volumeUnit') || this.units.defaultForVolume})

            this.unitsOfTemperature = this.units.ofTemperatureVisibleToUser.map(unit =>
                ({value: unit, name: `core.units.${unit}_long`})
            ).sort((a, b) => a.name > b.name)

            this.temperatureUnit = _.find(this.unitsOfTemperature, {value: this.user.getTagByKey('temperatureUnit') || this.units.defaultForTemperature})

            this.unitsOfPressure = this.units.ofPressureVisibleToUser.map(unit =>
                ({value: unit, name: `core.units.${unit}_long`})
            ).sort((a, b) => a.name > b.name)

            this.pressureUnit = _.find(this.unitsOfPressure, {value: this.user.getTagByKey('pressureUnit') || this.units.defaultForPressure})

            this.unitsOfMass = this.units.ofMassVisibleToUser.map(unit =>
                ({value: unit, name: `core.units.${unit}_long`})
            ).sort((a, b) => a.name > b.name)

            this.massUnit = _.find(this.unitsOfMass, {value: this.user.getTagByKey('massUnit') || this.units.defaultForMass})
        }

        loadTranslations() {
            var translateKeys = [
                'user.userEditProfile.profile_updated_self',
                'user.userEditProfile.profile_added',
                'user.userEditProfile.profile_updated',
                'user.userEditProfile.err_while_saving'
            ].concat(this.localeHelper.locales.map(loc => `core.localeHelper.${loc}`))

            return this.$translate(translateKeys, {
                entity: 'user',
                name: '{{name}}',
                action: '{{action}}'
            }).then(translations => {
                this.res = translations

                this.locales = this.localeHelper.locales.map(loc =>
                    ({value: loc, name: this.res[`core.localeHelper.${loc}`]})
                ).sort((a, b) => a.name > b.name)

                this.locale = _.find(this.locales, {value: this.user.locale || this.localeHelper.defaultLocale})
            })
        }

        confirmDelete(event) {
            return this.user.confirmDelete(event)
                .then(() => {
                    if (this.user.deleted) {
                        return this.$state.go('nav.user.list')
                    }
                })
        }

        passwordHasChanged() {
            return !!this.currentPassword || !!this.newPassword || !!this.confirmPassword
        }

        //TODO combine with the autocomplete code?
        //Used on edit mode to set the selected organization
        getOrg() {
            this.organization = null
            if (this.curOrgType && this.curOrgType.id === 'PFMCustomer') {
                this.loadPFMData()
            } else if (this.curOrgType) {
                var curEntity = this.cleanOrgType(this.curOrgType)

                if (curEntity === '') {
                    this.organization = this.authConfig.adminOrgs[this.curOrgType.id]
                    return this.getRole()
                } else if (curEntity === 'edriver/organizations') {
                    let orgId = _.get(this.user, 'userOrganizations[0].organizationId')
                    return this.Restangular.one(curEntity, orgId).get().then(org => {
                        org.key = org.id
                        this.organization = org
                        return this.getRole()
                    })
                } else {
                    let orgId = _.get(this.user, 'userOrganizations[0].organizationId')
                    var params = {
                        include: ['key', 'name', 'dealerIds'],
                        key: orgId
                    }

                    return this.Restangular.all(curEntity).getList(params)
                        .then(data => {
                            let org = _.first(data)
                            if (org && curEntity === 'dealers') {
                                org.name = `${org.name} - ${org.dealerIds[0]}`
                            }
                            this.organization = org
                            return this.getRole()
                        })
                }
            }
        }

        //Used on edit mode to set the selected role
        getRole() {
            var roleId = _.get(this.user, 'userRoles[0].roleId')
            if (roleId) {
                return this.user.getUserRolesType(this.curOrgType.id)
                    .then(data => {
                        this.userRoles.availableUserRoles = data
                        this.userRole = _.find(this.userRoles.availableUserRoles, {id: roleId})
                    })
            }
        }

        //type ahead for orgs
        searchOrgList(q) {
            this.organization = null
            if (this.curOrgType) {
                let params = {globalsearch: true}
                if (q) params.q = q

                if (this.curOrgType.id === 'Administrative') {
                    return [this.authConfig.adminOrgs[this.curOrgType.id]]
                } else if (this.curOrgType.id === 'OEM') {
                    return this.Restangular.all('oems').getList(params)
                } else if (this.curOrgType.id === 'Manufacturer') {
                    return this.Restangular.all('manufacturers').getList(params)
                } else if (this.curOrgType.id === 'Customer') {
                    //TODO remove this once services go to prod
                    if (this.currentUser.orgType === 'Customer') {
                        return this.Restangular.all('customers').getList()
                    }
                    return this.Restangular.all('customers').getList(params)
                } else if (this.curOrgType.id === 'Dealer') {
                    return this.Restangular.all('dealers').getList(params)
                        .then(data => data.map(it => {
                            //TODO remove this if statement after services go to prod
                            if (it.dealerIds) {
                                it.name = `${it.name} - ${it.dealerIds[0]}`
                            }
                            return it
                        }))
                } else if (this.curOrgType.id === 'PFMCustomer') {
                    // TODO Eventually this will be populated with PFM customers
                    return []
                } else if (this.curOrgType.id === 'EDriverOrganization') {
                    return this.Restangular.all('edriver/organizations').getList({q})
                        .then(data => data.map(org => {
                            org.key = org.id
                            return org
                        }))
                }
            }
        }

        //type ahead for roles
        searchRoleList(q) {
            let regex = new RegExp(_.escapeRegExp(q), 'i')

            return this.Restangular.all('roles')
                .customGETLIST(`realms/OEM/orgType/${this.curOrgType.id}`)
                .then(data => {
                    return data.plain()
                        .filter(i => regex.test(i.name))
                })
        }

        organizationChanged() {
            this.userOrganization = {
                userOrganizations: [
                    {
                        organizationId: _.get(this, 'organization.key'),
                        organizationTypeId: this.curOrgType.id
                    }
                ]
            }
            // This can be removed once the PFM customers are available in the search service.
            if (this.curOrgType && this.curOrgType.id === 'PFMCustomer') {
                this.userOrganization.userOrganizations[0].organizationId =
                    _.trimStart(this.orgNameSearchText, 'CID ')
            }
            _.extend(this.user, this.userOrganization)
        }

        //Reset organization name and user role typeahead when org type changes
        cleanOrg() {
            this.userOrganization = null
            _.extend(this.user, this.userOrganization)

            this.organization = null
            this.orgNameSearchText = null

            this.userRole = null
            this.userRoleSearchText = null
        }

        cleanOrgType(userType) {
            var entity
            switch (userType.shortCode) {
                case 'Customer':
                    entity = 'customers'
                    break
                case 'Dealer':
                    entity = 'dealers'
                    break
                case 'Manufacturer':
                    entity = 'manufacturers'
                    break
                case 'OEM':
                    entity = 'oems'
                    break
                case 'PFMCustomer':
                    entity = 'pfmcustomers'
                    break
                case 'EDriverOrganization':
                    entity = 'edriver/organizations'
                    break
                default:
                    entity = ''
            }
            return entity
        }

        // Validates that 'New password' and 'Confirm password' match
        compareFields() {
            if (this.form.newPassword && this.form.confirmPassword) {
                // Confirm and new password must match
                this.form.confirmPassword.$setValidity(
                    'fieldEquality',
                    this.newPassword === this.confirmPassword
                )
            }
        }

        loadPFMData() {
            var orgId = _.get(this.user, 'userOrganizations[0].organizationId')
            this.organization = {name: `CID ${orgId}`, key: orgId}
            this.user.getUserRolesType(this.curOrgType.id)
                .then(data => {
                    this.userRoles.availableUserRoles = data
                    var roleId = _.get(this.user, 'userRoles[0].roleId')
                    if (roleId) {
                        this.userRole = _.find(this.userRoles.availableUserRoles, {id: roleId})
                    }
                })
        }

        submit() {
            if (this.user.adding) {
                this.compareFields()
            }

            if (this.user.adding) {
                this.user.userCredential = {
                    username: this.user.userEmails[0].emailAddress,
                    password: this.newPassword
                }
            }

            if (!this.editingSelf) {
                this.user.userRoles = [{roleId: _.get(this.userRole, 'id')}]
                this.organizationChanged()
            }

            //tag based fields
            this.user.setTagByKey('sidenavCollapse', !!_.get(this, 'sidenavCollapse'))
            this.user.setTagByKey('distanceUnit', _.get(this, 'distanceUnit.value'))
            this.user.setTagByKey('volumeUnit', _.get(this, 'volumeUnit.value'))
            this.user.setTagByKey('temperatureUnit', _.get(this, 'temperatureUnit.value'))
            this.user.setTagByKey('pressureUnit', _.get(this, 'pressureUnit.value'))
            this.user.setTagByKey('massUnit', _.get(this, 'massUnit.value'))

            this.user.locale = _.get(this, 'locale.value')

            this.loadingService.loading(true)
            return this.user.save()
                .then(user => {
                    if (this.editingSelf) {
                        //ensure prefs are updated
                        this.currentUser.tags = user.tags

                        this.i18nService.updateCurrentLocale(this.user)
                        this.toastService.show(this.res['user.userEditProfile.profile_updated_self'])
                    } else {
                        var profile_action = this.$translateDefaultInterpolation.interpolate(
                            user.adding ? this.res['user.userEditProfile.profile_added'] : this.res['user.userEditProfile.profile_updated'],
                            {name: `${user.firstName} ${user.lastName}`}
                        )
                        this.toastService.show(profile_action)
                    }
                    return this.$state.go('nav.user.edit', {id: user.id})
                })
                .catch(err => {
                    this.loadingService.loading(false)
                    this.$log.error('Error saving profile.', err)
                    return this.toastService.show(this.res['user.userEditProfile.err_while_saving'], {theme: 'warn'})
                })
                .finally(() => {
                    this.loadingService.loading(false)
                })

        }
    }
}
