var _ = require('lodash')

module.exports = {
    template: require('../views/userEditTags.html'),
    controller: class UserEditTags {
        /* @ngInject */
        constructor($log, $state, $translate, loadingService, toastService) {
            this.$log = $log
            this.$state = $state
            this.$translate = $translate
            this.loadingService = loadingService
            this.toastService = toastService
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.user = this.$state.$current.locals.globals.user

            this.$translate([
                'user.userEditTags.updating_error'
            ]).then(translations => {
                this.res = translations
            })

            this.processTags(this.user.tags)
        }

        processTags(tags) {
            this.tags = _.reduce(tags, (result, tag) => {
                let [, key, value] = tag.match(/(.+)\|(.+)/) || []
                if (key && value) {
                    result.push({key, value})
                }
                return result
            }, [])
        }

        addTag() {
            this.user.tags.push(`${this.newTagKey}|${this.newTagValue}`)
            this.newTagKey = ''
            this.newTagValue = ''

            return this.save()
        }

        editTag(tag) {
            this.editingTag = tag

            _.pull(this.tags, tag)
            _.pull(this.user.tags, `${tag.key}|${tag.value}`)

            this.newTagKey = tag.key
            this.newTagValue = tag.value
            this.addingTag = true
        }

        removeTag(tag) {
            _.pull(this.user.tags, `${tag.key}|${tag.value}`)

            return this.save()
        }

        cancelEdit() {
            if (this.editingTag) {
                this.user.tags.push(`${this.editingTag.key}|${this.editingTag.value}`)
                this.tags.push(this.editingTag)
                this.editingTag = null
            }

            this.addingTag = false
            this.newTagKey = ''
            this.newTagValue = ''
        }

        save() {
            this.loadingService.loading(true)

            return this.user.save()
                .then(updatedUser => {
                    this.processTags(updatedUser.tags)
                    this.addingTag = false
                    this.editingTag = null
                })
                .catch(err => {
                    this.$log.error('Error updating user tags', err)
                    this.toastService.show(this.res['user.userEditTags.updating_error'], {theme: 'warn'})
                })
                .finally(() => this.loadingService.loading(false))
        }
    }
} 
