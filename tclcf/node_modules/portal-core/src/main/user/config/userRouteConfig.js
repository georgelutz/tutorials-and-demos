const _ = require('lodash')

module.exports = /* @ngInject */
    function($stateProvider, routeHelper) {

        //add to routes
        return $stateProvider
            .state('nav.user', {
                abstract: true,
                url: '/user',
                template: require('../../core/views/moduleBase.html')
            })

            .state('nav.user.list', {
                url: '/list/?role&customer&dealer&user&q&page&pageSize&sort&density',
                template: '<user-list></user-list>',
                resolve: {
                    currentUser: routeHelper.currentUser,
                    permission: routeHelper.hasPermission('ROLE_USER.+_READ'),
                    entityChips: routeHelper.entityChips(['customer', 'dealer', 'user']),
                    roles: function(Restangular, currentUser) {
                        if (currentUser.hasPermission('ROLE_ROLE_READ')) {
                            return Restangular.all('roles').withHttpConfig({cache: true}).getList({
                                include: ['id', 'name']
                            }).catch(() => [])
                        }
                    },
                    users: function($stateParams, Restangular) {
                        $stateParams.page = $stateParams.page || 0
                        $stateParams.pageSize = $stateParams.pageSize || 10
                        $stateParams.sort = $stateParams.sort || 'lastName'
                        $stateParams.density = $stateParams.density || 'high'

                        let params = {
                            include: ['firstName', 'lastName', 'userName', 'userPhones', 'status', 'id', 'userOrganizations', 'userRoles'],
                            page: $stateParams.page,
                            pageSize: $stateParams.pageSize,
                            q: $stateParams.q,
                            roleId: $stateParams.role,
                            id: $stateParams.user,
                            organizationId: $stateParams.customer || $stateParams.dealer,
                            sort: $stateParams.sort
                        }

                        return Restangular.all('users').getList(params)
                    }
                }
            })

            .state('nav.user.edit', {
                url: '/edit/:id',
                template: '<user-edit-container></user-edit-container>',
                resolve: {
                    editing: () => true,
                    currentUser: routeHelper.currentUser,
                    user: routeHelper.get('users', 'id'),
                    hasPermission: function(currentUser, user, $state, $timeout, toastService) {
                        if (!currentUser.canEditUser(user)) {
                            $timeout(() => {
                                $state.go('nav.welcome')
                                let username = `${user.firstName} ${user.lastName}`
                                toastService.show(`You do not have permission to edit "${username}".`, {theme: 'warn'})
                            })
                        }
                    },
                    userOrgTypes: function(user) {
                        return user.getUserOrgTypes()
                    }
                }
            })

            .state('nav.user.add', {
                url: '/add',
                template: '<user-edit-profile></user-edit-profile>',
                resolve: {
                    permission: routeHelper.hasPermission('ROLE_USER.+_WRITE'),
                    user: function(Restangular) {
                        return Restangular.restangularizeElement(null,
                            {
                                adding: true,
                                userEmails: [
                                    {
                                        type: 'Primary',
                                        emailAddress: '',
                                        preferred: true
                                    }
                                ],
                                userPhones: [
                                    {
                                        type: 'Primary',
                                        phone: '',
                                        preferred: true
                                    }
                                ],
                                userRoles: [],
                                middleName: '',
                                realmId: '3eca0893-23b5-4b00-a8c9-3d3ec6e6f2e7',
                                status: 1,
                                tags: []
                            }, 'users')
                    },
                    currentUser: routeHelper.currentUser,
                    emailNotificationSelection: function() {
                        return 'none'
                    },
                    userOrgTypes: function(user) {
                        return user.getUserOrgTypes()
                    }
                }
            })

            .state('nav.user.details', {
                url: '/details/:id',
                template: '<user-details-container></user-details-container>',
                //TODO: Move resolves when new router is out
                resolve: {
                    currentUser: routeHelper.currentUser,
                    user: routeHelper.get('users', 'id'),
                    userOrgTypes: function(user) {
                        return user.getUserOrgTypes()
                    },
                    currentOrg: function(user, userOrgTypes, Restangular, authConfig) {
                        let orgTypeId = _.get(user, 'userOrganizations[0].organizationTypeId')
                        let curOrgType = _.find(userOrgTypes, {id: orgTypeId})
                        let entity = `${curOrgType.id.toLowerCase()}s`
                        let options = {
                            key: _.get(user, 'userOrganizations[0].organizationId'),
                            include: 'name'
                        }

                        if (entity === 'administratives') {
                            return authConfig.adminOrgs[curOrgType.id].name
                        } else if (entity === 'pfmcustomers') {
                            let orgId = _.get(user, 'userOrganizations[0].organizationId')
                            return (`CID ${orgId}`)
                        } else if (entity === 'edriverorganizations') {
                            let orgId = _.get(user, 'userOrganizations[0].organizationId')
                            return Restangular.one('edriver/organizations', orgId).get()
                                .then(data => data.name)

                        } else {
                            return Restangular.one(entity).get(options)
                                .then(data => _.get(data, 'data[0].name'))
                        }
                    }
                }
            })

    }
