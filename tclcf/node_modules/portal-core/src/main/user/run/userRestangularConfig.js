const _ = require('lodash')

module.exports = /* @ngInject */
    function($log, $state, $translate, $translateDefaultInterpolation, Restangular, dialogService, toastService, loadingService) {
        const permissionWarning = _.once(() => $log.warn('The permission ROLE_SERVER_ADMIN is deprecated and should not be used.'))
        let users = Restangular.all('users')

        let translations = {}
        $translate(
            [
                'user.userRestAngularConfig.err_deleting',
                'user.userRestAngularConfig.confirm_save_email',
                'user.userRestAngularConfig.save_email_content',
                'user.userRestAngularConfig.save_email_delete_customer',
                'user.userRestAngularConfig.err_save_email',
                'user.userRestAngularConfig.email_updated',
                'user.userRestAngularConfig.email_upd_err',
                'user.userRestAngularConfig.password_updated',
                'user.userRestAngularConfig.password_upd_err',
                'user.userRestAngularConfig.user_delete',
                'core.common.form.cancel',
                'core.common.form.save'
            ],
            {emailAddress: '{{emailAddress}}'}
        ).then(translated => translations = translated)

        Restangular.addElementTransformer('users', false, user => {
            user.addSubscribedTag = tag => users.customPOST(null, `add-subscribed-tag/${user.id}/${tag}`)

            user.addTag = tag => users.customPOST(null, `add-tag/${user.id}/${tag}`)

            user.changeEmail = newEmailAddress => {
                //POST users/emailAddress/change  BODY: changePasswordRequest
                var request = {
                    emailAddress: {
                        emailAddress: newEmailAddress,
                        preferred: true
                    },
                    userId: user.id
                }
                return users.customPOST(request, 'emailAddress/change')
            }

            user.changePassword = body => users.customPUT(body, `${user.id}/changePassword`)

            user.confirmDelete = function(event) {
                var confirmOptions = {
                    entityName: `${user.firstName} ${user.lastName}`,
                    targetEvent: event
                }

                return dialogService.showConfirmDelete(confirmOptions)
                    .then(() => user.remove())
                    .then(() => {
                        user.deleted = true
                        toastService.show(translations['user.userRestAngularConfig.user_delete'])
                    })
                    .catch(err => {
                        if (err) {
                            $log.error('Error deleting user!', err)
                            toastService.show(translations['user.userRestAngularConfig.err_deleting'], {theme: 'warn'})
                        }
                    })
            }

            user.confirmSaveEmail = function(event) {
                var save_email_link = $translateDefaultInterpolation.interpolate(
                    translations['user.userRestAngularConfig.save_email_content'],
                    {emailAddress: user.userEmails[0].emailAddress}
                )

                var confirmSaveOptions = {
                    title: translations['user.userRestAngularConfig.confirm_save_email'],
                    content: save_email_link,
                    ariaLabel: translations['user.userRestAngularConfig.save_email_delete_customer'],
                    targetEvent: event,
                    ok: translations['core.common.form.save'],
                    cancel: translations['core.common.form.cancel']
                }

                return dialogService.showConfirm(confirmSaveOptions)
                    .then(() => user.submitEmail())
                    .catch(err => {
                        if (err) {
                            $log.error('Error saving email!', err)
                            toastService.show(translations['user.userRestAngularConfig.err_save_email'], {theme: 'warn'})
                        }
                    })
            }

            user.getUserOrgTypes = () => Restangular.all('organizationTypes').customGETLIST('realms/OEM')

            user.getUserPreferences = () => Restangular.one('userpreferences', user.id).get()

            user.getUserRolesType = (orgTypeId, organizationId) => {
                if (organizationId) {
                    return Restangular.all('roles').customGETLIST(`realms/OEM/org/${orgTypeId}/${organizationId}`)
                }

                return Restangular.all('roles').customGETLIST(`realms/OEM/orgType/${orgTypeId}`)
            }

            user.getTagByKey = key => {
                var existingTag = _.find(user.tags, tag => _.startsWith(tag, `${key}|`))
                return existingTag ? existingTag.slice(key.length + 1) : ''
            }

            user.setTagByKey = (key, value) => {
                let existingTag = _.find(user.tags, tag => _.startsWith(tag, `${key}|`))
                if (existingTag) {
                    _.pull(user.tags, existingTag)
                }
                user.tags.push(`${key}|${value}`)
            }

            user.canEditUser = function(otherUser) {
                //user being edited is ourself
                if (otherUser.id === user.id) {
                    return true
                }

                if (!_.get(otherUser, 'userOrganizations.length')) {
                    return false
                }

                return _.every(otherUser.userOrganizations, org => {
                    return user.hasPermission(`ROLE_USER_OF_${org.organizationTypeId.toUpperCase()}_WRITE`)
                })
            }

            user.hasPermission = function(permission) {
                if (permission === 'ROLE_SERVER_ADMIN') {
                    permissionWarning()
                }
                var permissionRegex = new RegExp(`^${permission}$`)
                return _.some(user.grant, _.bind(permissionRegex.test, permissionRegex))
            }

            user.isOrgType = function(orgType) {
                var userOrg = user.orgType || _.get(user, 'userOrganizations[0].organizationTypeId', '')
                return orgType.toLowerCase() === userOrg.toLowerCase()
            }

            user.removeSubscribedTag = tag => users.customPOST(null, `remove-subscribed-tag/${user.id}/${tag}`)

            user.removeTag = tag => users.customPOST(null, `remove-tag/${user.id}/${tag}`)

            user.submitEmail = function() {
                loadingService.loading(true)
                return user.changeEmail(user.userEmails[0].emailAddress)
                    .then(() => toastService.show(translations['user.userRestAngularConfig.email_updated']))
                    .catch(err => {
                        loadingService.loading(false)
                        $log.error('Error while changing email.', err)
                        toastService.show(translations['user.userRestAngularConfig.email_upd_err'], {theme: 'warn'})
                    })
                    .finally(() => loadingService.loading(false))
            }

            user.submitPassword = function(currentPassword, newPassword) {
                loadingService.loading(true)
                return user.changePassword({currentPassword: currentPassword, newPassword: newPassword})
                    .then(() => toastService.show(translations['user.userRestAngularConfig.password_updated']))
                    .catch(err => {
                        loadingService.loading(false)
                        $log.error('Error while changing password.', err)
                        toastService.show(translations['user.userRestAngularConfig.password_upd_err'], {theme: 'warn'})
                    })
                    .finally(() => loadingService.loading(false))
            }

            user.setLocale = function(locale) {
                user.locale = locale
                return user.put()
            }

            if (user.id) {
                user.key = user.id
            }

            return user
        })
    }
