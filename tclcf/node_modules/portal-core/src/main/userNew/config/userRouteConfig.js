module.exports = /* @ngInject */ function($stateProvider, routeHelper) {
    //add to routes
    return $stateProvider
        .state('nav.user', {
            abstract: true,
            url: '/user',
            template: require('../../core/views/moduleBase.html')
        })

        .state('nav.user.list', {
            url: '/list/?role&customer&dealer&user&q&page&pageSize&sort&density',
            template: '<user-list></user-list>',
            resolve: {
                currentUser: routeHelper.currentUser,
                permission: routeHelper.hasPermission('ROLE_USER.+_READ'),
                entityChips: routeHelper.entityChips(['customer', 'dealer', 'user']),
                roles: (Restangular, currentUser) => {
                    if (currentUser.hasPermission('ROLE_ROLE_READ')) {
                        return Restangular.all('roles').withHttpConfig({cache: true}).getList({
                            include: ['id', 'name']
                        }).catch(() => [])
                    }
                },
                users: ($stateParams, Restangular) => {
                    $stateParams.page = $stateParams.page || 0
                    $stateParams.pageSize = $stateParams.pageSize || 10
                    $stateParams.sort = $stateParams.sort || 'lastName'
                    $stateParams.density = $stateParams.density || 'high'

                    let params = {
                        include: ['firstName', 'lastName', 'userName', 'userPhones', 'status', 'id', 'userOrganizations', 'userRoles'],
                        page: $stateParams.page,
                        pageSize: $stateParams.pageSize,
                        q: $stateParams.q,
                        roleId: $stateParams.role,
                        id: $stateParams.user,
                        organizationId: $stateParams.customer || $stateParams.dealer,
                        sort: $stateParams.sort
                    }

                    return Restangular.all('users').getList(params)
                }
            }
        })

        .state('nav.user.edit', {
            url: '/edit/:id',
            template: '<user-edit-container></user-edit-container>',
            resolve: {
                currentUser: routeHelper.currentUser,
                user: routeHelper.get('users', 'id'),
                userOrgTypes: user => {
                    return user.getUserOrgTypes()
                }
            }
        })

        .state('nav.user.add', {
            url: '/add',
            template: '<user-edit-profile></user-edit-profile>',
            resolve: {
                permission: routeHelper.hasPermission('ROLE_USER.+_WRITE'),
                user: Restangular => {
                    return Restangular.restangularizeElement(null,
                        {
                            adding: true,
                            userEmails: [
                                {
                                    type: 'Primary',
                                    emailAddress: '',
                                    preferred: true
                                }
                            ],
                            userPhones: [
                                {
                                    type: 'Primary',
                                    phone: '',
                                    preferred: true
                                }
                            ],
                            userRoles: [],
                            middleName: '',
                            realmId: '3eca0893-23b5-4b00-a8c9-3d3ec6e6f2e7',
                            status: 1,
                            tags: []
                        }, 'users')
                },
                currentUser: routeHelper.currentUser,
                emailNotificationSelection: () => {
                    return 'none'
                },
                userOrgTypes: user => {
                    return user.getUserOrgTypes()
                }
            }
        })

        .state('nav.user.details', {
            url: '/details/:id',
            template: '<user-details-container></user-details-container>',
            //TODO: Move resolves when new router is out
            resolve: {
                currentUser: routeHelper.currentUser,
                user: routeHelper.get('users', 'id'),
                userOrgTypes: user => {
                    return user.getUserOrgTypes()
                }
            }
        })
}
