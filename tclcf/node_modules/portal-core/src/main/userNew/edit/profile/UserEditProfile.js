const _ = require('lodash')

const OrganizationListDialog = require('../../../organization/listDialog/OrganizationListDialog')
const RoleListDialog = require('../../../roleNew/listDialog/RoleListDialog')
const PermissionListDialog = require('../../../permissionNew/listDialog/PermissionListDialog')

require('./userEditProfile.scss')

module.exports = {
    template: require('./userEditProfile.html'),
    controller: class UserEditProfile {
        /* @ngInject */
        constructor($state, $translate, dialogService, listService, localeHelper, units) {
            this.$state = $state
            this.$translate = $translate
            this.dialogService = dialogService
            this.listService = listService
            this.localeHelper = localeHelper
            this.units = units
        }

        $onInit() {
            //TODO: replace this workaround when new router is available
            this.currentUser = this.$state.$current.locals.globals.currentUser
            this.user = this.$state.$current.locals.globals.user
            this.userOrgTypes = this.$state.$current.locals.globals.userOrgTypes

            this.organizations = [
                {id: 'peoplenet', name: 'PeopleNet'},
                {id: 'OEM', name: 'OEM'},
                {id: 'org3', name: 'Organization Name 3'},
                {id: 'org4', name: 'Organization Name 4'},
                {id: 'org5', name: 'Organization Name 5'},
                {id: 'org6', name: 'Organization Name 6'},
                {id: 'org7', name: 'Organization Name 7'},
                {id: 'org8', name: 'Organization Name 8'},
                {id: 'org9', name: 'Organization Name 9'},
                {id: 'org10', name: 'Organization Name 10'},
                {id: 'org11', name: 'Organization Name 11'}
            ]

            this.roles = [
                {id: 123, name: 'Super Admin'},
                {id: 567, name: 'Not so Super Admin'},
                {id: 3, name: 'Role Name 3'},
                {id: 4, name: 'Role Name 4'},
                {id: 5, name: 'Role Name 5'},
                {id: 6, name: 'Role Name 6'},
                {id: 7, name: 'Role Name 7'},
                {id: 8, name: 'Role Name 8'},
                {id: 9, name: 'Role Name 9'},
                {id: 10, name: 'Role Name 10'},
                {id: 11, name: 'Role Name 11'},
                {id: 12, name: 'Role Name 12'},
                {id: 13, name: 'Role Name 13'}
            ]

            this.permissions = [
                {id: 489, name: 'A Permission'},
                {id: 2, name: 'Permission Name 2'},
                {id: 3, name: 'Permission Name 3'},
                {id: 4, name: 'Permission Name 4'},
                {id: 5, name: 'Permission Name 5'},
                {id: 6, name: 'Permission Name 6'},
                {id: 7, name: 'Permission Name 7'},
                {id: 8, name: 'Permission Name 8'},
                {id: 9, name: 'Permission Name 9'},
                {id: 10, name: 'Permission Name 10'},
                {id: 11, name: 'Permission Name 11'},
                {id: 12, name: 'Permission Name 12'},
                {id: 13, name: 'Permission Name 13'},
                {id: 14, name: 'Permission Name 14'},
                {id: 15, name: 'Permission Name 15'},
                {id: 16, name: 'Permission Name 16'}
            ]

            if (!this.user.adding) {
                //populate some fake data for now
                this.user.userOrganizations = [
                    this.organizations[1]
                ]
                this.user.userOrganizations[0].roles = [
                    this.roles[0],
                    this.roles[1]
                ]
                this.user.userOrganizations[0].permissions = [
                    this.permissions[0]
                ]
            }

            this.loadPreferences()

            return this.loadTranslations()
        }

        loadVisibleUnits(units) {
            return _.chain(units)
                .map(unit => ({value: unit, name: `core.units.${unit}_long`}))
                .sortBy('name')
                .value()
        }

        loadPreferences() {
            this.sidenavCollapse = this.user.getTagByKey('sidenavCollapse') === 'true'

            this.unitsOfDistance = this.loadVisibleUnits(this.units.ofDistanceVisibleToUser)
            this.unitsOfVolume = this.loadVisibleUnits(this.units.ofVolumeVisibleToUser)
            this.unitsOfTemperature = this.loadVisibleUnits(this.units.ofTemperatureVisibleToUser)
            this.unitsOfPressure = this.loadVisibleUnits(this.units.ofPressureVisibleToUser)
            this.unitsOfMass = this.loadVisibleUnits(this.units.ofMassVisibleToUser)

            this.distanceUnit = _.find(this.unitsOfDistance, {value: this.user.getTagByKey('distanceUnit') || this.units.defaultForDistance})
            this.volumeUnit = _.find(this.unitsOfVolume, {value: this.user.getTagByKey('volumeUnit') || this.units.defaultForVolume})
            this.temperatureUnit = _.find(this.unitsOfTemperature, {value: this.user.getTagByKey('temperatureUnit') || this.units.defaultForTemperature})
            this.pressureUnit = _.find(this.unitsOfPressure, {value: this.user.getTagByKey('pressureUnit') || this.units.defaultForPressure})
            this.massUnit = _.find(this.unitsOfMass, {value: this.user.getTagByKey('massUnit') || this.units.defaultForMass})
        }

        loadTranslations() {
            let translateKeys = [
                'userNew.userProfile.profile_updated_self',
                'userNew.userProfile.profile_added',
                'userNew.userProfile.profile_updated',
                'userNew.userProfile.err_while_saving'
            ].concat(this.localeHelper.locales.map(loc => `core.localeHelper.${loc}`))

            return this.$translate(translateKeys, {
                entity: 'user',
                name: '{{name}}',
                action: '{{action}}'
            })
                .then(translations => {
                    this.res = translations

                    this.locales = this.localeHelper.locales.map(loc =>
                        ({value: loc, name: this.res[`core.localeHelper.${loc}`]})
                    ).sort((a, b) => a.name > b.name)

                    let locale = this.user.locale || this.localeHelper.defaultLocale
                    this.locale = _.find(this.locales, {value: locale})
                })
        }

        showOrganizationListDialog() {
            let dialog = _.clone(OrganizationListDialog)

            let organizations = _.clone(this.organizations)

            dialog.locals = {
                assignee: `${this.user.firstName} ${this.user.lastName}`,
                organizations: _.map(organizations, organization => {
                    organization.active = !!_.find(this.user.userOrganizations, {id: organization.id})
                    return organization
                })
            }

            return this.dialogService.show(dialog)
                .then(activeOrganizations => {
                    this.user.userOrganizations = activeOrganizations

                    this.listService.selectedRows = []
                })
        }

        showRoleListDialog(organization) {
            let dialog = _.cloneDeep(RoleListDialog)

            let roles = _.cloneDeep(this.roles)

            dialog.locals = {
                assignee: organization.name,
                roles: _.map(roles, role => {
                    role.active = !!_.find(organization.roles, {id: role.id})
                    return role
                })
            }

            return this.dialogService.show(dialog)
                .then(activeRoles => {
                    organization.roles = activeRoles

                    this.listService.selectedRows = []
                })
        }

        showPermissionListDialog(organization) {
            let dialog = _.cloneDeep(PermissionListDialog)

            let permissions = _.cloneDeep(this.permissions)

            dialog.locals = {
                assignee: organization.name,
                permissions: _.map(permissions, permission => {
                    permission.active = !!_.find(organization.permissions, {id: permission.id})
                    return permission
                })
            }

            return this.dialogService.show(dialog)
                .then(activePermissions => {
                    organization.permissions = activePermissions

                    this.listService.selectedRows = []
                })
        }

        removeRole(organization, role) {
            _.pull(organization.roles, role)
        }

        removePermission(organization, permission) {
            _.pull(organization.permissions, permission)
        }
    }
}
