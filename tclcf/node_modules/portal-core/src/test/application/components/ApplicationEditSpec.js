describe('ApplicationEdit', () => {
    let component
    let ctrl
    let $state
    let $translate
    let $translateDefaultInterpolation
    let toastService
    let application
    let realms
    let $log
    let loadingService

    beforeEach(() => {
        application = {}
        realms = {
            data: [
                {id: 1, name: 'OEM', description: 'OEM Realm'},
                {id: 1, name: 'AAA', description: 'AAA Realm'}
            ]
        }

        $log = {}
        $log.error = sinon.stub()

        $translate = sinon.stub().returns({
            then: sinon.stub().callsArgWith(0, {
                'application.applicationEdit.err_while_saving': 'err_while_saving_key',
                'application.applicationEdit.confirm_save': 'confirm_save_key'
            })
        })

        $translateDefaultInterpolation = {}
        $translateDefaultInterpolation.interpolate = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        loadingService = {}
        loadingService.loading = sinon.stub()

        $state = {}
        $state.go = sinon.stub().resolves('state.went')
        _.set($state, '$current.locals.globals', {
            application, realms
        })

        component = require('../../../main/application/components/ApplicationEdit')
        ctrl = new component.controller($log, $state, $translate, $translateDefaultInterpolation, toastService, loadingService)
        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.application.should.equal(application)
        ctrl.realms.should.eql(realms)

        ctrl.res['application.applicationEdit.err_while_saving'].should.equal('err_while_saving_key')
        ctrl.res['application.applicationEdit.confirm_save'].should.equal('confirm_save_key')
    })
    
    it('should confirm delete', () => {
        application.confirmDelete = sinon.stub().resolves({})

        return ctrl.confirmDelete(123)
            .then(function(result) {
                result.should.equal('state.went')
                application.confirmDelete.should.have.been.calledWith(123)
                $state.go.should.have.been.calledWith('nav.application.list')
            })
    })

    it('should support saving', () => {
        ctrl.realms = [{name: 'testRealm', selected: true}]
        application.save = sinon.stub().resolves({})

        $translateDefaultInterpolation.interpolate.returns('confirm_save')

        return ctrl.save()
            .then(function(result) {
                result.should.equal('state.went')
                application.save.should.have.been.called
                toastService.show.should.have.been.calledWith(sinon.match.string)
                $state.go.should.have.been.calledWith('nav.application.list')
            })
    })

    it('should handle errors on save', () => {
        application.save = sinon.stub().rejects('err')

        return ctrl.save()
            .then(() => {
                toastService.show.should.have.been.calledWith(ctrl.res['application.applicationEdit.err_while_saving'], {theme: 'warn'})
                $log.error.should.have.been.called
            })
    })
})
