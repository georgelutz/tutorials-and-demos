describe('applicationRouteConfig', () => {
    let $stateProvider
    let routeHelper

    beforeEach(() => {
        $stateProvider = {}
        $stateProvider.state = sinon.stub().returns($stateProvider)

        routeHelper = {}
        routeHelper.get = sinon.stub().returns('get')
        routeHelper.hasPermission = sinon.stub().returnsArg(0)

        require('../../../main/application/config/applicationRouteConfig')($stateProvider, routeHelper)
    })

    it('should have routes', () => {
        $stateProvider.state.should.have.been.calledWith('nav.application')
        $stateProvider.state.should.have.been.calledWith('nav.application.list')
        $stateProvider.state.should.have.been.calledWith('nav.application.add')
        $stateProvider.state.should.have.been.calledWith('nav.application.edit')
    })

    it('should resolve permissions on base route', () => {
        let resolve = $stateProvider.state.getCall(0).args[1].resolve
        routeHelper.hasPermission.should.have.been.calledWith('ROLE_APPLICATION_WRITE')
        resolve.permission.should.equal('ROLE_APPLICATION_WRITE')
    })

    it('should resolve application on list route', () => {
        let listService = {}
        let Restangular = {
            all: sinon.stub().returnsThis(),
            getList: sinon.stub().returns('abc')
        }
        let resolve = $stateProvider.state.withArgs('nav.application.list').getCall(0).args[1].resolve
        resolve.applications(listService, Restangular).should.equal('abc')
        Restangular.all.should.have.been.calledWith('applications')
        Restangular.getList.should.have.been.called
    })

    it('should resolve application and realms on add route', () => {
        let Restangular = {
            all: sinon.stub().returnsThis(),
            getList: sinon.stub().returns('abc'),
            restangularizeElement: sinon.stub().returns('def')
        }

        let resolve = $stateProvider.state.withArgs('nav.application.add').getCall(0).args[1].resolve
        //application
        resolve.application(Restangular).should.equal('def')
        Restangular.restangularizeElement.should.have.been.calledWith(null, {
            adding: true,
            realms: []
        }, 'applications')

        //realms
        resolve.realms(Restangular).should.equal('abc')
    })

    it('should resolve application and realms on edit route', () => {
        let resolve = $stateProvider.state.withArgs('nav.application.edit').getCall(0).args[1].resolve

        //application
        resolve.application.should.equal('get')
        routeHelper.get.should.have.been.calledWith('applications')

        //realms
        let Restangular = {
            all: sinon.stub().returnsThis(),
            getList: sinon.stub().resolves([{name: 1}, {name: 2}])
        }
        let application = {
            realms: [1]
        }

        return resolve.realms(Restangular, application)
            .then(function(result) {
                result.should.deep.equal([
                    {name: 1, selected: true},
                    {name: 2, selected: false}
                ])
            })
    })

})
