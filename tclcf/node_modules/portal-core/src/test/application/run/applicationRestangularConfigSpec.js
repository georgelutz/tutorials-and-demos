describe('applicationRestangularConfig', function() {
    var init
    var application
    var $log
    var $translate
    var Restangular
    var dialogService
    var toastService
    var event

    beforeEach(function() {
        Restangular = {}
        Restangular.addElementTransformer = sinon.stub()

        $log = {}
        $log.error = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        application = {}
        application.name = 'application'

        dialogService = {}
        dialogService.showConfirmDelete = sinon.stub()

        $translate = sinon.stub().resolves('translated')

        init = function() {
            var constructor = require('../../../main/application/run/applicationRestangularConfig')
            constructor($log, $translate, Restangular, dialogService, toastService)
            Restangular.addElementTransformer.getCall(0).args[2](application)
        }
        init()
    })

    it('should initialize', function() {
        Restangular.addElementTransformer.should.have.been.calledWith('applications')

        $translate.should.have.been.calledWith(sinon.match.array)
    })

    it('should confirm deletes', function() {
        var deleteArgs = {
            targetEvent: event,
            entityName: application.name
        }
        application.remove = sinon.stub().resolves({})
        dialogService.showConfirmDelete.withArgs(deleteArgs).resolves({})

        return application.confirmDelete(event)
            .then(function() {
                dialogService.showConfirmDelete.should.have.been.called
                application.remove.should.have.been.called
                application.deleted.should.be.true
            })
    })

    it('should handle delete errors', function() {
        var deleteArgs = {
            targetEvent: event,
            entityName: application.name
        }
        application.remove = sinon.stub().rejects('error')
        dialogService.showConfirmDelete.withArgs(deleteArgs).resolves({})

        return application.confirmDelete(event)
            .then(function() {
                $log.error.should.have.been.called
                toastService.show.should.have.been.called
            })
    })

    it('should handle delete cancels', function() {
        var deleteArgs = {
            targetEvent: event,
            entityName: application.name
        }
        dialogService.showConfirmDelete.withArgs(deleteArgs).rejects(false)

        return application.confirmDelete(event)
            .then(function() {
                $log.error.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })

    it('should set application key to application id when id is provided', function() {
        application.id = 'test'
        application.key = ''
        init()

        Restangular.addElementTransformer.should.have.been.called
        application.key.should.equal('test')
    })
})
