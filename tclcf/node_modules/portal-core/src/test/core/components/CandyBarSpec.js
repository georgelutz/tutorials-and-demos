describe('candyBar', () => {
    var component
    var ctrl
    var themeService
    var candyBarConfig

    beforeEach(() => {
        themeService = {}
        candyBarConfig = {
            themes: [],
            items: []
        }

        component = require('../../../main/core/components/CandyBar')
        ctrl = new component.controller(candyBarConfig, themeService)
    })

    it('should init without children', () => {
        ctrl.$onInit()

        ctrl.children.should.be.false
    })

    it('should init with children', () => {
        let theme1 = {name: '1'}
        let theme2 = {name: '2'}
        let item1 = {name: '4'}
        let item2 = {name: 'blah'}

        let expTheme1 = {name: '1', colspan: 3, rowspan: 1}
        let expTheme2 = {name: '2', colspan: 3, rowspan: 1}
        let expItem1 = {name: '4', colspan: 3, rowspan: 1}
        let expItem2 = {name: 'blah', colspan: 3, rowspan: 1}

        candyBarConfig.themes = [theme1, theme2]
        candyBarConfig.items = [item1, item2]

        ctrl.$onInit()

        ctrl.themes.should.deep.equal([expTheme1, expTheme2])
        ctrl.items.should.deep.equal([expItem1, expItem2])
        ctrl.children.should.be.true
    })

    it('should default rowspan and colspan', () => {
        let theme1 = {name: '1', colspan: 2, rowspan: 5}
        let theme2 = {name: '2'}
        let item1 = {name: '4', colspan: 1, rowspan: 1}
        let item2 = {name: 'blah'}

        let expTheme1 = {name: '1', colspan: 2, rowspan: 5}
        let expTheme2 = {name: '2', colspan: 3, rowspan: 1}
        let expItem1 = {name: '4', colspan: 1, rowspan: 1}
        let expItem2 = {name: 'blah', colspan: 3, rowspan: 1}

        candyBarConfig.themes = [theme1, theme2]
        candyBarConfig.items = [item1, item2]

        ctrl.$onInit()

        ctrl.themes.should.deep.equal([expTheme1, expTheme2])
        ctrl.items.should.deep.equal([expItem1, expItem2])
        ctrl.children.should.be.true
    })
})
