describe('ChipFilter', () => {
    let component
    let ctrl
    let searchService
    let $state
    let $stateParams
    let $timeout
    let $filter
    let $log
    let $q
    let $analytics

    beforeEach(() => {
        searchService = {}

        $state = {current: {name: 'currentState'}}
        $state.go = sinon.stub()

        $stateParams = {}
        $filter = sinon.stub()
        $q = Promise
        $timeout = sinon.stub().callsArg(0)        
        $analytics = {}
        $analytics.eventTrack = sinon.stub()

        $log = {}
        $log.warn = sinon.stub()

        component = require('../../../main/core/components/ChipFilter')
        ctrl = new component.controller($analytics, $filter, $log, $q, $state, $stateParams, $timeout, searchService)
    })

    it('should call on load in $onInit', () => {
        ctrl.onLoad = sinon.stub()

        ctrl.$onInit()
        ctrl.onLoad.should.have.been.calledWith({selectedChips: []})
    })

    it('should prepopulate existing chips', () => {
        $stateParams.q = ['a', '!b']
        $stateParams.entity = 'entityKey'
        $stateParams.static = 'staticKey'
        $stateParams.page = 0
        $stateParams.pageSize = undefined

        ctrl.entities = ['entity']
        ctrl.entityChips = [{key: 'entityKey'}]
        ctrl.staticResults = [{type: 'static', param: 'static', key: 'staticKey'}]

        let chip = {name: 'abc', key: 123}
        ctrl.onLoad = sinon.stub()
        searchService.processSingle = sinon.stub().returns(chip)

        ctrl.$onInit()

        ctrl.selectedChips.should.deep.equal([
            {
                icon: 'search',
                name: 'a',
                negate: false,
                term: 'a',
                type: 'term'
            }, {
                icon: 'search',
                name: '!b',
                negate: true,
                term: '!b',
                type: 'term'
            }, {
                name: 'abc',
                key: 123,
                negate: false
            }, {
                key: 'staticKey',
                negate: false,
                param: 'static',
                type: 'static'
            }
        ])
        searchService.processSingle.should.have.been.calledWith('entity', ctrl.entityChips[0])
        ctrl.onLoad.should.have.been.called
    })

    it('should support a custom update that replaces $state.go when return true', () => {
        let chip = {name: 'abc', term: 'abc', type: 'term'}
        ctrl.selectedChips = [chip]
        ctrl.chipsUpdated = sinon.stub().returns(true)

        ctrl.addChip(chip).should.equal(chip)

        $state.go.should.not.have.been.called
        ctrl.chipsUpdated.should.have.been.calledWith({
            defaultAction: sinon.match.func,
            params: {
                page: undefined,
                q: ['abc']
            },
            selectedChips: ctrl.selectedChips
        })

        ctrl.chipsUpdated.getCall(0).args[0].defaultAction()
        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: ['abc']
        })
    })

    it('should support a custom update that calls $state.go when return false', () => {
        let chip = {name: 'abc', term: 'abc', type: 'term'}
        ctrl.selectedChips = [chip]
        ctrl.chipsUpdated = sinon.stub().returns(false)

        ctrl.addChip(chip).should.equal(chip)

        ctrl.chipsUpdated.should.have.been.calledWith({
            defaultAction: sinon.match.func,
            params: {
                page: undefined,
                q: ['abc']
            },
            selectedChips: ctrl.selectedChips
        })
        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: ['abc']
        })
    })

    it('should support adding term chips', () => {
        let chip = {name: 'abc', term: 'abc', type: 'term'}
        ctrl.selectedChips = [chip]
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip(chip).should.equal(chip)

        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: ['abc']
        })       
    })
    
    it('should track add chip event', () => {
        let chip = {name: 'abc', term: 'abc', type: 'term'}
        ctrl.selectedChips = [chip]
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip(chip).should.equal(chip)
        
        $analytics.eventTrack.should.have.been.calledWith('Add Chip', {category: 'Chip Filter', label: chip.name})
    })

    it('should support adding entity chips', () => {
        let chip = {name: 'abc', key: 'entityKey', type: 'entity'}
        ctrl.selectedChips = [chip]
        ctrl.entities = ['entity']
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip(chip).should.equal(chip)

        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: [],
            entity: ['entityKey']
        })
    })

    it('should support adding static chips', () => {
        let chip = {param: 'staticParam', key: 'staticKey', type: 'static'}
        ctrl.selectedChips = [chip]
        ctrl.staticResults = [chip]
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip(chip).should.equal(chip)

        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: [],
            staticParam: ['staticKey']
        })
    })

    it('should support adding multiple chips', () => {
        ctrl.selectedChips = [
            {name: 'abc', term: 'abc', type: 'term'},
            {name: 'def', term: 'def', type: 'term'},
            {name: 'ghi', key: 'entityKey1', type: 'entity'},
            {name: 'jkl', key: 'entityKey2', type: 'entity'},
            {name: 'static1', param: 'staticParam', key: 'staticKey1', type: 'static'},
            {name: 'static2', param: 'staticParam', key: 'staticKey2', type: 'static'}
        ]
        ctrl.entities = ['entity']
        ctrl.staticResults = [
            {param: 'staticParam', key: 'staticKey', type: 'static'}
        ]
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip({param: 'staticParam', key: 'staticKey2', type: 'static'})

        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: ['abc', 'def'],
            entity: ['entityKey1', 'entityKey2'],
            staticParam: ['staticKey1', 'staticKey2']
        })
    })

    it('should remove duplicate chips on add', () => {
        let chip = {name: '!abc', term: '!abc', type: 'term'}
        ctrl.selectedChips = [
            chip,
            {name: 'abc', term: 'abc', type: 'term'},
            {name: 'abc', term: 'def', type: 'term'},
            {name: 'def', key: 'entityKey', type: 'entity'},
            {name: 'ghi', param: 'staticParam', key: 'staticKey', type: 'static'}
        ]
        ctrl.entities = ['entity']
        ctrl.staticResults = [
            {param: 'staticParam', key: 'staticKey', type: 'static'}
        ]
        ctrl.chipsUpdated = sinon.stub()

        ctrl.addChip(chip)

        ctrl.selectedChips.should.deep.equal([
            {name: '!abc', term: '!abc', type: 'term'},
            {name: 'def', key: 'entityKey', type: 'entity'},
            {name: 'ghi', param: 'staticParam', key: 'staticKey', type: 'static'}
        ])
    })

    it('should support removing chips', () => {
        ctrl.chipsUpdated = sinon.stub()

        ctrl.removeChip()

        $state.go.should.have.been.calledWith($state.current.name, {
            page: undefined,
            q: []
        })
    })

    it('should perform basic autocomplete without entities', () => {
        let term = 'term'
        return ctrl.performQuery(term)
            .then(result => {
                result.should.deep.equal([{
                    icon: 'search',
                    name: 'term',
                    negate: false,
                    term: 'term',
                    type: 'term'
                }])
            })
    })

    it('should perform autocomplete for negated term', () => {
        let term = '!term'

        return ctrl.performQuery(term)
            .then(result => {
                result.should.deep.equal([{
                    icon: 'search',
                    name: '!term',
                    negate: true,
                    term: '!term',
                    type: 'term'
                }])
            })
    })

    it('should perform autocomplete for staticResults', () => {
        let term = 'term'
        ctrl.staticResults = [{param: 'staticParam', key: 'staticKey', type: 'static'}]
        let chip = {name: 'abc', key: 123}
        let filterFunc = sinon.stub().returns(chip)
        $filter.returns(filterFunc)

        return ctrl.performQuery(term)
            .then(result => {
                result.should.deep.equal([{
                    icon: 'search',
                    name: 'term',
                    negate: false,
                    term: 'term',
                    type: 'term'
                }, {
                    key: 123,
                    name: 'abc',
                    negate: false
                }])
                $filter.should.have.been.calledWith('filter')
                filterFunc.should.have.been.calledWith(ctrl.staticResults, term)
            })
    })

    it('should perform autocomplete with entities', () => {
        let term = 'term'
        ctrl.entities = ['a', 'b']
        let chip = {name: 'abc', key: 123}
        searchService.typeAheadSearch = sinon.stub().resolves([chip])

        return ctrl.performQuery(term)
            .then(result => {
                result.should.deep.equal([{
                    icon: 'search',
                    name: 'term',
                    negate: false,
                    term: 'term',
                    type: 'term'
                }, {
                    key: 123,
                    name: 'abc',
                    negate: false
                }])
                searchService.typeAheadSearch.should.have.been.calledWith(term, ctrl.entities, 'ChipFilter')
            })
    })

    it('should load params without static results', () => {
        $stateParams.q = ['!a', 'b']
        $stateParams.entity = 'entityKey'
        $stateParams.static = 'staticKey'
        $stateParams.page = 0
        $stateParams.pageSize = undefined

        ctrl.entities = ['entity']
        ctrl.entityChips = [{key: 'entityKey'}]
        ctrl.staticResults = false

        let chip = {name: 'name', key: 123}
        ctrl.onLoad = sinon.stub()
        searchService.processSingle = sinon.stub().returns(chip)

        ctrl.$onInit()

        ctrl.selectedChips.should.deep.equal([
            {
                icon: 'search',
                name: '!a',
                negate: true,
                term: '!a',
                type: 'term'
            }, {
                icon: 'search',
                name: 'b',
                negate: false,
                term: 'b',
                type: 'term'
            }, {
                key: 123,
                name: 'name',
                negate: false
            }
        ])
        searchService.processSingle.should.have.been.calledWith('entity', ctrl.entityChips[0])
        ctrl.onLoad.should.have.been.called
    })
})
