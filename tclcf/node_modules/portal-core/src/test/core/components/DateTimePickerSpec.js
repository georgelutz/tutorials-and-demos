describe('DateTimePicker', () => {
    let $scope
    let dateTimePicker    

    beforeEach(() => {
        $scope = {}
        $scope.$watch = sinon.stub()

        const DateTimePicker = require('../../../main/core/components/DateTimePicker')
        dateTimePicker = new DateTimePicker.controller($scope)
    })

    it('should initialize', () => {
        dateTimePicker.$onInit()

        dateTimePicker.minutes.should.deep.equal(_.range(0, 60))
        dateTimePicker.seconds.should.deep.equal(_.range(0, 60))
        dateTimePicker.milliseconds.should.deep.equal(_.range(0, 1000))
    })

    it('should initialize for standard time', () => {
        dateTimePicker.militaryTime = false

        dateTimePicker.$onInit()

        dateTimePicker.hours.should.deep.equal(_.range(1, 13))
        dateTimePicker.hourPlaceholder.should.equal('hh')
    })

    it('should initialize for military time', () => {
        dateTimePicker.militaryTime = true

        dateTimePicker.$onInit()

        dateTimePicker.hours.should.deep.equal(_.range(0, 24))
        dateTimePicker.hourPlaceholder.should.equal('HH')
    })

    it('should populate dropdown with 12 hours if military time is set to false', () => {
        let changes = {
            militaryTime: {
                currentValue: false
            }
        }

        dateTimePicker.$onInit()        
        dateTimePicker.militaryTime = changes.militaryTime.currentValue
        dateTimePicker.$onChanges(changes)

        dateTimePicker.hours.should.deep.equal(_.range(1, 13))
        dateTimePicker.hourPlaceholder.should.equal('hh')
    })

    it('should populate dropdown with 24 hours if military time is set to true', () => {
        let changes = {
            militaryTime: {
                currentValue: true
            }
        }

        dateTimePicker.$onInit()
        dateTimePicker.militaryTime = changes.militaryTime.currentValue
        dateTimePicker.$onChanges(changes)

        dateTimePicker.hours.should.deep.equal(_.range(0, 24))
        dateTimePicker.hourPlaceholder.should.equal('HH')
    })

    it('should ignore any other changes', () => {
        let changes = {}

        dateTimePicker.$onInit()
        dateTimePicker.$onChanges(changes)

        dateTimePicker.hours.should.deep.equal(_.range(1, 13))
        dateTimePicker.hourPlaceholder.should.equal('hh')
    })

    it('should update hour input when military time is enabled', () => {
        dateTimePicker.onChange = sinon.stub()
        let changes = {
            militaryTime: {
                currentValue: true
            }
        }

        dateTimePicker.$onInit()

        dateTimePicker.value = new Date()
        dateTimePicker.value.setHours(0)

        dateTimePicker.onChangeDate()

        dateTimePicker.onChangeTime()
        dateTimePicker.militaryTime = changes.militaryTime.currentValue
        dateTimePicker.$onChanges(changes)

        dateTimePicker.hour.should.equal(0)
    })

    it('should clear the dropdowns if input value is cleared', () => {
        dateTimePicker.$onInit()
        dateTimePicker.onChange = sinon.stub()

        dateTimePicker.onChangeDate()

        should.equal(dateTimePicker.value, undefined)
        should.equal(dateTimePicker.hour, undefined)
        should.equal(dateTimePicker.minute, undefined)
        should.equal(dateTimePicker.second, undefined)
        should.equal(dateTimePicker.millisecond, undefined)
        should.equal(dateTimePicker.afterNoon, undefined)
        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
    })

    it('should handle falsy values', () => {
        dateTimePicker.onChange = sinon.stub()
        let value = new Date()

        dateTimePicker.$onInit()

        dateTimePicker.onChangeTime()
        dateTimePicker.onChangeDate()

        dateTimePicker.value.getMonth().should.equal(value.getMonth())
        dateTimePicker.value.getDate().should.equal(value.getDate())
        dateTimePicker.value.getYear().should.equal(value.getYear())
        dateTimePicker.value.getHours().should.equal(0)
        dateTimePicker.value.getSeconds().should.equal(0)
        dateTimePicker.value.getMilliseconds().should.equal(0)
    })

    it('should convert input value to standard time', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.militaryTime = false
        dateTimePicker.value = new Date()
        dateTimePicker.value.setHours(23)
        dateTimePicker.value.setMinutes(14)

        dateTimePicker.$onInit()

        dateTimePicker.onChangeDate()

        dateTimePicker.hour.should.equal(11)
        dateTimePicker.minute.should.equal(14)
        dateTimePicker.afterNoon.should.equal(true)
    })

    it('should convert input value to military time', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.militaryTime = true
        dateTimePicker.value = new Date()
        dateTimePicker.value.setHours(23)
        dateTimePicker.value.setMinutes(14)

        dateTimePicker.$onInit()

        dateTimePicker.onChangeDate()

        dateTimePicker.hour.should.equal(23)
        dateTimePicker.minute.should.equal(14)
        dateTimePicker.afterNoon.should.equal(true)
    })

    it('should convert PM to military time equivalent', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.militaryTime = false
        let value = new Date()
        value.setHours(13)

        dateTimePicker.$onInit()

        dateTimePicker.hour = 1

        dateTimePicker.onChangeTime()
        dateTimePicker.onChangeDate()
        dateTimePicker.toggleAmPm()
        dateTimePicker.onChangeDate()

        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
        dateTimePicker.value.getHours().should.equal(value.getHours())
    })

    it('should convert AM to military time equivalent ', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.militaryTime = false
        let value = new Date()
        value.setHours(0)

        dateTimePicker.$onInit()

        dateTimePicker.hour = 12

        dateTimePicker.onChangeTime()
        dateTimePicker.onChangeDate()

        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
        dateTimePicker.value.getHours().should.equal(value.getHours())
    })

    it('should not change time when date is updated', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.$onInit()

        let hour = 13

        dateTimePicker.hour = hour

        dateTimePicker.onChangeTime()
        dateTimePicker.onChangeDate()

        dateTimePicker.value = new Date()

        dateTimePicker.onChangeDate()

        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
        dateTimePicker.value.getHours().should.equal(hour)
    })

    it('should set other time fields to zero if they are currently undefined', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.$onInit()

        let hour = 1

        dateTimePicker.hour = hour

        dateTimePicker.onChangeTime()
        dateTimePicker.onChangeDate()

        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
        dateTimePicker.hour.should.equal(hour)
        dateTimePicker.minute.should.equal(0)
        dateTimePicker.second.should.equal(0)
        dateTimePicker.millisecond.should.equal(0)
    })

    it('should toggle between AM and PM', () => {
        dateTimePicker.onChange = sinon.stub()
        dateTimePicker.$onInit()

        dateTimePicker.toggleAmPm()
        dateTimePicker.onChangeDate()

        dateTimePicker.onChange.should.have.been.calledWith({value: dateTimePicker.value})
        dateTimePicker.afterNoon.should.equal(true)
    })

    it('should pad when necessary', () => {
        dateTimePicker.$onInit()

        let num = 1

        dateTimePicker.pad(num).should.equal('01')
    })

    it('should not pad when unnecessary', () => {
        dateTimePicker.$onInit()

        let num = 10

        dateTimePicker.pad(num).should.equal('10')
    })

    it('should pad milliseconds', () => {
        dateTimePicker.$onInit()

        let num = 1
        let len = 3

        dateTimePicker.pad(num, len).should.equal('001')
    })
})
