describe('entityPaging', () => {
    var component
    var ctrl
    var $location
    var $translate
    var $state
    var $stateParams
    var responseDescription
    var $interval
    var onPageChanged

    beforeEach(() => {
        ctrl = {}
        ctrl.$watch = sinon.stub().callsArg(1)

        $location = {}
        $location.search = sinon.stub()

        $state = {}
        $state.current = 'currentState'
        $state.transitionTo = sinon.stub()

        $stateParams = {}
        $stateParams.pageSize = 10

        $translate = sinon.stub().resolves()
        
        onPageChanged = sinon.stub()
        
        responseDescription = {
            page: 4,
            pageSize: 25,
            totalHits: 999
        }

        $interval = sinon.stub().callsArg(0)
        $interval.cancel = sinon.stub()

        component = require('../../../main/core/components/EntityPaging')
        ctrl = new component.controller($interval, $state, $stateParams, $translate)
        
        ctrl.responseDescription = responseDescription
        ctrl.onPageChanged = onPageChanged
    })

    it('should initialize scope', () => {
        $stateParams.pageSize = 50
        var pageSizeOptions = [
            {label: '10', value: 10},
            {label: '25', value: 25},
            {label: '50', value: 50}
        ]
        var translationKeys = [
            'core.common.entity-paging.per_page',
            'core.common.entity-paging.status_count']
        var translationModel = {
            pagingLabel: 'Rows',
            startItemCount: 101,
            lastItemCount: 125,
            totalHits: responseDescription.totalHits
        }
        var translatePromise = Promise.resolve('blah')
        $translate.returns(translatePromise)

        ctrl.$onInit()
        
        return translatePromise.should.be.fulfilled
            .then(() => {
                $translate.should.have.been.calledWith(translationKeys, translationModel)

                ctrl.pageSizeOptions.should.eql(pageSizeOptions)
                ctrl.pagingLabel.should.equal('Rows')
                ctrl.showPageSizeControls.should.be.true
                ctrl.lastPage.should.equal(40)
                ctrl.page.should.equal(ctrl.responseDescription.page + 1)
                ctrl.pageSize.should.equal(ctrl.pageSizeOptions[2])
                ctrl.totalHits.should.equal(ctrl.responseDescription.totalHits)
                ctrl.startItemCount.should.equal(101)
                ctrl.lastItemCount.should.equal(125)
            })
    })

    it('should call refresh on changes', () => {
        ctrl.refresh = sinon.stub()
        ctrl.$onChanges()

        ctrl.refresh.should.have.been.called
    })

    describe('#changePage', () => {
        it('should update location when pageChanged is not provided', () => {
            ctrl.$onInit()

            ctrl.changePage(123)

            $state.transitionTo.should.have.been.calledWith($state.current, {page: 122, pageSize: 10}, {inherit: true})
        })

        it('should call pageChanged when provided', () => {
            onPageChanged.returns(true)

            ctrl.$onInit()

            ctrl.changePage(123)

            $state.transitionTo.should.not.have.been.called
            onPageChanged.should.have.been.calledWith({page: 123, pageSize: 10})
        })
    })

    describe('#changePageSize', () => {
        it('should use $state to apply pagination changes', () => {
            ctrl.$onInit()
            ctrl.changePageSize()

            $state.transitionTo.should.have.been.calledWith($state.current, {page: 0, pageSize: 10}, {inherit: true})
        })

        it('should call pageChanged function if provided', () => {
            onPageChanged.returns(true)

            ctrl.$onInit()
            ctrl.changePageSize()

            ctrl.onPageChanged.should.have.been.calledWith({page: 0, pageSize: 10})
        })
    })
})
