describe('GlobalSearch', () => {
    let component
    let ctrl
    let filter
    let $analytics
    let $scope
    let $state
    let $location
    let $timeout
    let authService
    let currentUser
    let globalSearch
    let searchService

    beforeEach(() => {
        $analytics = {}
        $analytics.eventTrack = sinon.stub()

        filter = sinon.stub().returns([])
        let $filter = sinon.stub().withArgs('filter').returns(filter)

        $scope = {}
        $scope.$on = sinon.stub()

        $state = {}

        $location = {}
        $location.search = sinon.stub().returns({})

        $timeout = sinon.stub().callsArg(0)

        currentUser = {}

        authService = {}
        authService.getCurrentUser = sinon.stub().returns({then: sinon.stub().callsArgWith(0, currentUser)})

        globalSearch = {}

        searchService = {}

        component = require('../../../main/core/components/GlobalSearch')
        ctrl = new component.controller($analytics, $filter, $scope, $state, $location, $timeout,
            authService, globalSearch, searchService)
        ctrl.$onInit()
    })

    it('should support search', () => {
        ctrl.$state.go = sinon.stub()
        ctrl.searchText = 'blah'

        ctrl.search()

        ctrl.$state.go.should.have.been.calledWith('nav.search.list', {term: 'blah'})
        should.not.exist(ctrl.searchText)
    })

    it('should keep the searched term for search scope', () => {
        ctrl.searchText = 'search'
        ctrl.selectedItem = 'some item'

        ctrl.$location.search = sinon.stub().returns({q:'search'})
        ctrl.$location.path = sinon.stub().returns('/nav/search')

        ctrl.$scope.$on.getCall(0).yield()

        ctrl.$scope.$on.should.have.been.calledWith('$stateChangeSuccess')
        should.not.exist(ctrl.searchText)
    })

    it('should clear the searched term for a non search scope', () => {
        ctrl.searchText = 'search'
        ctrl.selectedItem = 'some item'

        ctrl.$location.search = sinon.stub().returns({q:null})
        ctrl.$location.path = sinon.stub().returns('/some/not/search/route')

        ctrl.$scope.$on.getCall(0).yield()

        ctrl.$scope.$on.should.have.been.calledWith('$stateChangeSuccess')
        should.not.exist(ctrl.searchText)
    })

    it('should support handled typeahead selection', () => {
        let value = 'val'
        ctrl.searchService.handleSelection = sinon.stub().withArgs(value).returns(true)

        ctrl.selectedItemChange(value)

        ctrl.searchService.handleSelection.should.have.been.calledWith(value)
    })

    it('should support handled static selection', () => {
        $state.go = sinon.stub()
        let value = {
            type: 'static',
            state: 'state',
            stateParams: {abc: 123}
        }

        ctrl.selectedItemChange(value)

        $state.go.should.have.been.calledWith(value.state, value.stateParams)
    })

    it('should support unhandled typeahead selection', () => {
        ctrl.$state.go = sinon.stub()
        ctrl.searchText = 'blah'
        ctrl.searchService.handleSelection = sinon.stub().returns(false)

        ctrl.selectedItemChange({term: 'blah'})

        ctrl.$state.go.should.have.been.calledWith('nav.search.list', {term: 'blah'})
        should.not.exist(ctrl.searchText)
    })

    it('should support handled typeahead selection', () => {
        ctrl.$state.go = sinon.stub()
        let value = false
        ctrl.$location.search().q = true
        ctrl.searchService.handleSelection = sinon.stub().withArgs(value).returns(true)

        ctrl.selectedItemChange(value)

        ctrl.$state.go($state.current, {q: null}, {reload: true})
    })

    it('should support querying', () => {
        let term = 'term'
        ctrl.searchService.typeAheadSearch = sinon.stub().withArgs('term').resolves(['abc', '123'])
        ctrl.skipQuery = false

        let result = ctrl.performQuery(term)

        return result.should.eventually.deep.equal([{
            icon: 'search',
            name: 'term',
            term: 'term'
        }, 'abc', '123'])
    })

    it('should support querying static pages', () => {
        let term = 'term'
        ctrl.searchService.typeAheadSearch = sinon.stub().resolves([])
        ctrl.skipQuery = false
        filter.returns([{name: 'cat pictures', permission: 'abc'}])
        currentUser.hasPermission = sinon.stub().withArgs('abc').returns(true)

        let result = ctrl.performQuery(term)

        return result.should.eventually.deep.equal([{
            icon: 'search',
            name: 'term',
            term: 'term'
        }, {
            name: 'cat pictures',
            permission: 'abc'
        }])
    })

    it('should not call searchService if skipQuery is false', () => {
        ctrl.skipQuery = true
        let term = 'term'
        ctrl.searchService.typeAheadSearch = sinon.stub().withArgs('term').resolves(['abc', '123'])

        ctrl.performQuery(term)
        ctrl.searchService.typeAheadSearch.should.not.have.been.calledWith(term, null, 'GlobalSearch')
    })

    it('should track an event on global search suggestion selection', () => {
        let item = {
            type: 'user'
        }

        ctrl.logAutocompleteSelection(item)

        $analytics.eventTrack.should.have.been.calledWith('Global Search Suggestion Clicked', {category: 'Navigation Tracking', label:  'user'})
    })

})
