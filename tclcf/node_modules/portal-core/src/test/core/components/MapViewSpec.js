describe('MapView', () => {
    let component
    let ctrl
    let $analytics
    let $log
    let $timeout
    let mapApiKey
    let pnetMap

    beforeEach(() => {
        $analytics = {}
        $log = {}

        $timeout = sinon.stub().callsArg(0)
        $timeout.resolves({})

        mapApiKey = 'someKey'
        pnetMap = {}

        component = require('../../../main/core/components/MapView')
        ctrl = new component.controller($analytics, $log, $timeout, mapApiKey, pnetMap)
    })
    
    it('should create a map with default settings', () => {
        let map = {}
        pnetMap.init = sinon.stub().returns(map)
        ctrl.mapLoaded = sinon.stub()
        
        return ctrl.$onInit()
            .then(() => {
                pnetMap.init.should.have.been.calledWith(mapApiKey, 'map', {minimalist: true})
                ctrl.mapLoaded.should.have.been.calledWith({map})
            })
    })

    it('should create a map with custom settings', () => {
        let map = {}
        pnetMap.init = sinon.stub().returns(map)
        ctrl.mapLoaded = sinon.stub()
        ctrl.mapSettings = {abc: 'def'}

        return ctrl.$onInit()
            .then(() => {
                pnetMap.init.should.have.been.calledWith(mapApiKey, 'map', ctrl.mapSettings)
                ctrl.mapLoaded.should.have.been.calledWith({map})
            })
    })

    it('should destroy the map', () => {
        ctrl.map = {destroy: sinon.stub()}

        ctrl.$onDestroy()

        ctrl.map.destroy.should.have.been.called
    })

    it('should not error on map destroy', () => {
        $log.trace = sinon.stub()
        ctrl.map = {destroy: sinon.stub().throws('err')}

        ctrl.$onDestroy()

        ctrl.map.destroy.should.have.been.called
    })

    it('should zoom in', () => {
        ctrl.map = {}
        ctrl.map.getMap = sinon.stub().returnsThis()
        ctrl.map.zoomIn = sinon.stub()
        ctrl.$analytics.eventTrack = sinon.stub()

        ctrl.zoomIn()

        ctrl.map.getMap.should.have.been.called
        ctrl.map.zoomIn.should.have.been.called
        ctrl.$analytics.eventTrack.should.have.been.called
    })

    it('should zoom out', () => {
        ctrl.map = {}
        ctrl.map.getMap = sinon.stub().returnsThis()
        ctrl.map.zoomOut = sinon.stub()
        ctrl.$analytics.eventTrack = sinon.stub()

        ctrl.zoomOut()

        ctrl.map.getMap.should.have.been.called
        ctrl.map.zoomOut.should.have.been.called
        ctrl.$analytics.eventTrack.should.have.been.called
    })
})
