describe('Navigation', () => {
    let component
    let ctrl
    let $scope
    let $log
    let $mdSidenav
    let $translate
    let navigation
    let userMenu
    let currentUser
    let $mdMedia
    let loadingService
    let toastService
    let sidenav
    let fieldErrorService
    let themeService
    let authConfig
    let authService

    beforeEach(() => {
        currentUser = {firstName: 'jon', lastName: 'doe'}
        currentUser.hasPermission = sinon.stub()

        authConfig = {}

        authService = {}
        authService.currentUser = currentUser

        $scope = {}
        $scope.$on = sinon.stub()

        $log = {}
        $log.error = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        navigation = {sections: [{}]}
        navigation.clearSelection = sinon.stub()

        sidenav = {}

        $mdSidenav = sinon.stub()
        $mdSidenav.withArgs('left').returns(sidenav)

        $mdMedia = sinon.stub()

        $translate = sinon.stub().resolves({
            'core.common.toast.unexpected': 'Unexpected error. Please try again.',
            'core.common.toast.state_change': 'State change error.'
        })

        fieldErrorService = {}

        userMenu = {}

        loadingService = {}
        loadingService.loading = sinon.stub()

        themeService = {}
        themeService.getNav = sinon.stub().returns('navImage.png')

        component = require('../../../main/core/components/Navigation')
        ctrl = new component.controller($scope, $log, $mdMedia, $mdSidenav, $translate, authConfig, authService, userMenu,
            loadingService, toastService, fieldErrorService, themeService)
        ctrl.res = {}
        ctrl.$onInit()
    })

    it('should initialize', () => {
        return ctrl.$onInit()
            .then(() => {
                ctrl.loading.should.be.false
                ctrl.userMenu.should.deep.equal(userMenu)
                ctrl.$mdMedia.should.deep.equal($mdMedia)
                ctrl.navImageUrl.should.equal('navImage.png')
            })
    })

    it('should expose a link style string', () => {
        themeService.getColor = sinon.stub().returns(['a', 'b', 'c'])

        ctrl.getLinkStyle().should.equal('a{color: rgb(a, b, c);}')
    })

    it('should know when to lock sidenav', () => {
        //default large screen
        currentUser.getTagByKey = sinon.stub().withArgs('sidenavCollapse').returns('false')
        $mdMedia.withArgs('gt-sm').returns(true)

        ctrl.lockSidenav().should.be.true

        //user chose to collapse
        currentUser.getTagByKey = sinon.stub().withArgs('sidenavCollapse').returns('true')
        $mdMedia.withArgs('gt-sm').returns(true)

        ctrl.lockSidenav().should.be.false

        //small screen
        $mdMedia.withArgs('gt-sm').returns(false)

        ctrl.lockSidenav().should.be.false
    })

    it('should expose page loading', () => {
        loadingService.loading = sinon.stub().returns('wee')

        ctrl.pageLoading().should.equal('wee')
    })

    it('should expose page async loading', () => {
        loadingService.asyncLoading = sinon.stub().returns('wee')

        ctrl.pageAsyncLoading().should.equal('wee')
    })

    it('should handle resolve errors', () => {
        $scope.$on.getCall(3).yield(null, null, null, null, null, {resolveError: {msg: 'Hey its a resolve error'}})

        $log.error.should.have.been.called
        toastService.show.should.have.been.calledWith('Hey its a resolve error', {theme: 'warn'})
    })

    it('should handle resolve errors with no message', () => {
        ctrl.res['core.common.toast.unexpected'] = 'abc'
        $scope.$on.getCall(3).yield(null, null, null, null, null, {resolveError: {}})

        $log.error.should.have.been.called
        toastService.show.should.have.been.calledWith('abc', {theme: 'warn'})
    })

    it('should handle resolve errors and cause', () => {
        $scope.$on.getCall(3).yield(null, null, null, null, null, {
            resolveError: {
                msg: 'Hey its a resolve error',
                cause: 'Because'
            }
        })

        $log.error.should.have.been.called
        toastService.show.should.have.been.calledWith('Hey its a resolve error', {theme: 'warn'})
    })

    it('should handle no resolve errors', () => {
        ctrl.res['core.common.toast.unexpected'] = 'abc'
        $scope.$on.getCall(3).yield(null, null, null, null, null, null)

        $log.error.should.have.been.called
        toastService.show.should.have.been.calledWith('abc', {theme: 'warn'})
    })

    it('should support opening sidenav', () => {
        sidenav.open = sinon.stub()

        ctrl.openSidenav()

        sidenav.open.should.have.been.called
    })

    it('should handle state change start', () => {
        sidenav.close = sinon.stub()
        fieldErrorService.fieldErrors = 'OOPS'

        $scope.$on.withArgs('$stateChangeStart').getCall(0).args[1]()

        ctrl.loading.should.be.true
        sidenav.close.should.have.been.called
        fieldErrorService.fieldErrors.should.deep.equal({})
    })

    it('should set loading false on state change success', () => {
        ctrl.loading = 'abc'

        $scope.$on.withArgs('$stateChangeSuccess').getCall(0).args[1]()

        ctrl.loading.should.be.false
    })

    it('should set loading false on state not found', () => {
        ctrl.loading = 'abc'

        $scope.$on.withArgs('$stateNotFound').getCall(0).args[1]()

        ctrl.loading.should.be.false
    })

    it('should get the theme from themeservice', () => {
        themeService.getCurrentTheme = sinon.stub().returns('abc')

        ctrl.getTheme().should.equal('abc')
    })

    it('should support login', () => {
        authService.login = sinon.stub().resolves()

        ctrl.login()

        authService.login.should.have.been.called
    })
})
