describe('PageHeader', () => {
    let component
    let ctrl
    let titleService
    let $state
    let $window

    beforeEach(() => {
        titleService = {}
        titleService.setTitle = sinon.stub()
        titleService.resetTitle = sinon.stub()

        $state = {
            go: sinon.stub()
        }

        $window = {
            history: {
                back: sinon.stub()
            }
        }

        component = require('../../../main/core/components/PageHeader')
        ctrl = new component.controller($state, $window, titleService)

        ctrl.title = 'title'
        ctrl.subtitle = 'subtitle'

        sinon.stub(_, 'defer').callsArg(0)

        ctrl.$onInit()
    })

    afterEach(() => {
        _.defer.restore()
    })

    it('should initialize', () => {
        titleService.setTitle.should.have.been.calledWith(ctrl.title)
    })

    it('should reset title on destroy', () => {
        ctrl.$onDestroy()
        
        titleService.resetTitle.should.have.been.called
    })

    it('should go back if handler is a string', () => {
        ctrl.backButtonHandler = 'hello'

        ctrl.handleBack()
        $state.go.should.have.been.calledWith('hello')
    })

    it('should go back if handler is a function', () => {
        let handler = sinon.stub()
        ctrl.backButtonHandler = handler

        ctrl.handleBack()
        handler.should.have.been.called
    })

    it('should go back if handler is a object', () => {
        ctrl.backButtonHandler = {
            state: 'nav.test.awesome',
            params: {
                param1: 'Everything',
                param2: 'Is',
                param3: 'Awesome'
            }
        }

        ctrl.handleBack()
        $state.go.should.have.been.calledWith('nav.test.awesome', {
            param1: 'Everything',
            param2: 'Is',
            param3: 'Awesome'
        })
    })

    it('should go back if handler is just true', () => {
        ctrl.backButtonHandler = true

        ctrl.handleBack()
        $window.history.back.should.have.been.called
    })
})
