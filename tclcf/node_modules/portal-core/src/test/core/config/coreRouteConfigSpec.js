describe('coreRouteConfig', function() {
    var $stateProvider
    var routeHelper

    beforeEach(function() {
        $stateProvider = {}
        $stateProvider.state = sinon.stub().returns($stateProvider)

        routeHelper = {}
        routeHelper.currentUser = {rcu: true}
        routeHelper.hasPermission = sinon.stub().returnsArg(0)

        require('../../../main/core/config/coreRouteConfig')($stateProvider, routeHelper)
    })

    it('should have a nav route', function() {
        $stateProvider.state.should.have.been.calledWith('nav')
    })

    it('should resolve for nav route', function() {
        var resolve = $stateProvider.state.withArgs('nav').getCall(0).args[1].resolve
        
        resolve.currentUser.should.equal(routeHelper.currentUser)
    })

    it('should have a search route', function() {
        $stateProvider.state.should.have.been.calledWith('nav.search.list')
    })

    it('should resolve for search list route', function() {
        //given some mocks
        var $stateParams = {term: 'beep'}
        var searchService = {}
        searchService.termSearch = sinon.stub().returns('abc')

        //when resolving results
        var resolve = $stateProvider.state.withArgs('nav.search.list').getCall(0).args[1].resolve
        var result = resolve.results($stateParams, searchService)

        //then
        result.should.equal('abc')
        searchService.termSearch.should.have.been.calledWith($stateParams.term)
    })
})
