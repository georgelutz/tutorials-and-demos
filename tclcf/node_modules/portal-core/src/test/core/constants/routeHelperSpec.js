describe('routeHelper', () => {
    let routeHelper
    let authService
    let userService
    let Restangular

    beforeEach(() => {
        Restangular = {}
        Restangular.one = sinon.stub()

        routeHelper = require('../../../main/core/constants/routeHelper')

        authService = {}
        authService.getCurrentUser = sinon.stub()

        userService = {}
        userService.fetchUser = sinon.stub()

        sinon.stub(_, 'defer').callsArg(0)
    })

    afterEach(() => {
        _.defer.restore()
    })

    it('should have an entityChips helper', () => {
        let $stateParams = {
            apple: 'akey',
            banana: '!bkey',
            carrot: ['ckey1', undefined, '!ckey2']
        }
        Restangular.one.withArgs('myprefix/apples', 'akey').returns({get: sinon.stub().resolves('Apple')})
        Restangular.one.withArgs('myprefix/bananas', 'bkey').returns({get: sinon.stub().resolves('Banana')})
        Restangular.one.withArgs('myprefix/carrots', 'ckey1').returns({get: sinon.stub().resolves('Carrot1')})
        Restangular.one.withArgs('myprefix/carrots', 'ckey2').returns({get: sinon.stub().resolves('Carrot2')})

        let func = routeHelper.entityChips(['apple', 'banana', 'carrot'], 'myprefix/')
        return func(Promise, $stateParams, Restangular)
            .then(result => {
                result.should.deep.equal(['Apple', 'Banana', 'Carrot1', 'Carrot2'])
            })
    })

    it('hasPermission - user has permission', () => {
        //given some mocks
        let $log = {warn: sinon.stub()}
        let user = {hasPermission: sinon.stub()}
        let $state = {go: sinon.stub()}
        authService.getCurrentUser = sinon.stub().resolves(user)
        let toastService = {}
        toastService.show = sinon.stub()

        let func = routeHelper.hasPermission('perm')

        //when called with permission
        user.hasPermission.returns(true)
        return func($log, $state, Promise, authService, toastService).should.be.fulfilled
            .then(() => {
                //should do nothing
                user.hasPermission.should.have.been.calledWith('perm')
                $state.go.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })

    it('hasPermission - permission=false, anonymous=false', () => {
        //given some mocks
        let $log = {warn: sinon.stub()}
        let user = {hasPermission: sinon.stub()}
        let $state = {go: sinon.stub()}
        authService.getCurrentUser = sinon.stub().resolves(user)
        let toastService = {}
        toastService.show = sinon.stub()

        let func = routeHelper.hasPermission('perm')

        //when called without permission
        user.hasPermission.returns(false)
        return func($log, $state, Promise, authService, toastService).should.be.rejected
            .then(() => {
                //should reroute to welcome
                user.hasPermission.should.have.been.calledWith('perm')
                $state.go.should.have.been.calledWith('nav.welcome')
                toastService.show.should.have.been.calledWith(sinon.match.string, {theme: 'warn'})
                $log.warn.should.have.been.called
            })
    })

    it('hasPermission - permission=false, anonymous=true', () => {
        //given some mocks
        let $log = {warn: sinon.stub()}
        let user = {hasPermission: sinon.stub(), anonymous: true}
        let $state = {go: sinon.stub()}
        authService.getCurrentUser = sinon.stub().resolves(user)
        let toastService = {}
        toastService.show = sinon.stub()

        let func = routeHelper.hasPermission('perm')

        //when called without permission
        user.hasPermission.returns(false)
        return func($log, $state, Promise, authService, toastService).should.be.fulfilled
            .then(() => {
                //should do nothing
                user.hasPermission.should.have.been.calledWith('perm')
                $state.go.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })

    it('should have a currentUser helper', () => {
        //given some mocks
        authService.getCurrentUser.returns('abc')

        //when called
        let result = routeHelper.currentUser(authService)

        //then should return current user
        result.should.equal('abc')
        authService.getCurrentUser.should.have.been.called
    })

    it('should have a get helper', () => {
        let $stateParams = {key: 'keee', field: 'fieldy'}
        Restangular = {
            one: sinon.stub().returnsThis(),
            get: sinon.stub().returns('abc')
        }

        let func = routeHelper.get('entity', 'field')
        func($stateParams, Restangular).should.equal('abc')

        Restangular.one.should.have.been.calledWith('entity', 'fieldy')
        Restangular.get.should.have.been.called

        func = routeHelper.get('entity')
        func($stateParams, Restangular).should.equal('abc')

        Restangular.one.should.have.been.calledWith('entity', 'keee')
    })

    it('should have a noop helper', () => {
        routeHelper.noop('abc').should.equal('abc')
    })

    it('should have a skip helper', () => {
        should.not.exist(routeHelper.skip())
    })
})
