const ListService = require('../../../main/core/list/ListService')

describe('ListService', () => {
    let row

    let $analytics
    let $mdMedia
    let $state

    let listService

    beforeEach(() => {
        row = {
            $$hashKey: '4465',
            key: 'one'
        }

        $analytics = {
            eventTrack: sinon.stub()
        }

        $mdMedia = sinon.stub().returns(false)

        $state = {
            current: {
                name: 'nav'
            }
        }

        listService = new ListService($analytics, $mdMedia, $state)
    })

    it('should initialize', () => {
        listService.showFilter.should.equal(false)
        listService.selectedRows.should.deep.equal([])
    })

    it('should get selected rows', () => {
        listService.selectedRows = [row]

        let rows = [row]

        let selectedRows = listService.getSelectedRows(rows)

        selectedRows.should.deep.equal([row])
    })

    it('should select row', () => {
        listService.selectRow(row)

        listService.selectedRows.should.deep.equal([row])
    })

    it('should deselect row', () => {
        listService.selectedRows = [
            {
                $$hashKey: '8648',
                key: 'one'
            },
            {
                $$hashKey: '8649',
                key: 'two'
            }
        ]

        let deselectedRows = listService.deselectRow(row)

        deselectedRows.should.deep.equal([
            {
                $$hashKey: '8648',
                key: 'one'
            }
        ])
    })
})
