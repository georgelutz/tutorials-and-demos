describe('ListTable', () => {
    let $state
    let customActionConfig
    let listService
    let ListTable
    let ctrl

    beforeEach(() => {
        $state = {
            current: {},
            go: sinon.stub()
        }

        customActionConfig = {}

        listService = {
            deselectRow: sinon.stub(),
            getSelectedRows: sinon.stub().returns([]),
            onDestroy: sinon.stub(),
            selectRow: sinon.stub()
        }

        ListTable = require('../../../../main/core/list/table/ListTable')

        ctrl = new ListTable.controller($state, customActionConfig, listService)

        ctrl.$onInit()
    })

    it('should init', () => {
        ctrl.current.should.deep.equal($state.current)
        ctrl.selectedRows.should.deep.equal([])
    })

    it('should destroy', () => {
        $state.current = {}

        ctrl.$onDestroy()

        listService.onDestroy.should.have.been.called
    })

    it('should change sort', () => {
        let params = {
            sort: ''
        }

        ctrl.changeSort = sinon.stub()

        ctrl.onSortChange(params.sort)

        ctrl.changeSort.should.have.been.calledWith(params)
    })

    it('should deselect row', () => {
        let row = {}

        ctrl.onRowDeselect(row)

        listService.deselectRow.should.have.been.calledWith(row)
    })

    it('should select row', () => {
        let row = {}

        ctrl.onRowSelect(row)

        listService.selectRow.should.have.been.calledWith(row)
    })

    it('should get cell', () => {
        let string = 'hello world'

        let col = {
            path: 'x.y.z'
        }

        let row = {
            x: {
                y: {
                    z: string
                }
            }
        }

        let cell = ctrl.getCell(col, row)

        cell.should.equal(string)
    })

    it('should create hover over title with one element', () => {
        let row = {
            test: [{name: 'hi'}]
        }

        let result = ctrl.createLargeTitle(row, 'test', 'name')
        result.should.equal('hi,')
    })

    it('should create hover over title with two elements', () => {
        let row = {
            test: [{name: 'hello'}, {name: 'world'}]
        }

        let result = ctrl.createLargeTitle(row, 'test', 'name')
        result.should.equal('hello, and world')
    })

    it('should create hover over title with many elements', () => {
        let row = {
            test: [{name: 'hello'}, {name: 'world'}, {name: '!'}]
        }

        let result = ctrl.createLargeTitle(row, 'test', 'name')
        result.should.equal('hello, world, and !')
    })
})
