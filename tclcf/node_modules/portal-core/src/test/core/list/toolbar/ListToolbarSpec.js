describe('ListToolbar', () => {
    let $analytics
    let $element
    let $state
    let $stateParams
    let $timeout
    let customActionConfig
    let listService
    let ListToolbar
    let ctrl

    beforeEach(() => {
        $analytics = {}

        $state = {
            go: sinon.stub()
        }

        $stateParams = {}

        customActionConfig = {
            getTextButtons: sinon.stub().returns([]),
            getIconButtons: sinon.stub().returns([])
        }

        listService = {}

        ListToolbar = require('../../../../main/core/list/toolbar/ListToolbar')

        $element = {}

        $timeout = sinon.stub().callsArg(0)

        ctrl = new ListToolbar.controller($analytics, $element, $state, $stateParams, $timeout, customActionConfig, listService)

        ctrl.checkChipsCustom = sinon.stub().returns()
        ctrl.clearChipsCustom = sinon.stub().returns()

        ctrl.$onInit()
    })

    it('should init', () => {
        ctrl.defaultTextButtons.should.deep.equal([])
        ctrl.defaultIconButtons.should.deep.equal([])
    })

    it('should get chips from chip filter', () => {
        ctrl.checkChips = sinon.stub()
        let chips = ['blah']

        ctrl.onLoad(chips)
        ctrl.chips.should.equal(chips)
        ctrl.checkChips.should.have.been.called
    })

    it('should refresh', () => {
        let params = {}

        ctrl.refresh()

        $state.go.should.have.been.calledWith($state.current, params, {reload: true})
    })

    it('should set showFilter to true when some chips are present', () => {
        let chipFilterElement = {focus: sinon.stub()}
        $element.find = sinon.stub().returns(chipFilterElement)
        ctrl.chips = ['someParam']

        ctrl.checkChips()

        listService.showFilter.should.equal(true)
        chipFilterElement.focus.should.have.been.called
    })

    it('should set showFilter to false when no chips are present', () => {
        ctrl.chips = []

        ctrl.checkChips()

        listService.showFilter.should.equal(false)
    })

    it('should set showFilter to false when a custom function returns false', () => {
        ctrl.checkChipsCustom = sinon.stub().returns(false)

        ctrl.checkChips()

        listService.showFilter.should.equal(false)
    })

    it('should set showFilter to false when no chips are present', () => {
        ctrl.checkChips()

        listService.showFilter.should.equal(false)
    })

    it('should clear all chips when closing the filter', () => {
        $stateParams.customer = 'ATest'
        $stateParams.user = 'User'

        ctrl.chipFilterOptions = {
            entities: ['customer', 'user'],
            staticResults: ''
        }
        ctrl.chips = [
            {
                name: 'chip1'
            },
            {
                name: 'chip2'
            }
        ]

        ctrl.clearChips()

        let params = {
            sort: $stateParams.sort,
            page: $stateParams.page,
            pageSize: $stateParams.pageSize,
            density: $stateParams.density,
            q: null,
            customer: undefined,
            user: undefined
        }

        listService.showFilter.should.equal(false)
        $state.go.should.have.been.calledWith($state.current, params, {reload: true})
    })

    it('should do nothing if there are no chips', () => {
        $stateParams.customer = 'ATest'
        $stateParams.user = 'User'

        ctrl.chipFilterOptions = {
            entities: ['customer', 'user'],
            staticResults: ''
        }

        ctrl.clearChips()

        listService.showFilter.should.equal(false)
        $state.go.should.not.have.been.called
    })

    it('should clear chips when a custom function exists', () => {
        ctrl.clearChipsCustom = sinon.stub().returns(true)
        ctrl.refresh = sinon.stub()

        ctrl.clearChips()

        listService.showFilter.should.equal(false)
        ctrl.refresh.should.not.have.been.called
    })
})
