describe('globalSearchProvider', function() {
    var globalSearchProvider

    beforeEach(function() {
        var constructor = require('../../../main/core/providers/globalSearchProvider')
        globalSearchProvider = {}
        _.bind(constructor, globalSearchProvider)()
    })

    it('should support basic ops', function() {
        //should support add
        globalSearchProvider.addSearchItem('type', 'listRoute', 'responseHandler', 'selectHandler', 'typeTranslationKey')
        globalSearchProvider.addSearchItem('1', '2', '3', '4', '5')
        var func = sinon.stub()
        globalSearchProvider.addSearchFunction('test', func)
        globalSearchProvider.addSearchFunction('test', 'dont add me')

        var expected = [
            {
                type: 'type',
                listRoute: 'listRoute',
                responseHandler: 'responseHandler',
                selectHandler: 'selectHandler',
                typeTranslationKey: 'typeTranslationKey'
            },
            {
                type: '1',
                listRoute: '2',
                responseHandler: '3',
                selectHandler: '4',
                typeTranslationKey: '5'
            }
        ]
        var expectedFunctions = [{type: 'test', function: func}]
        globalSearchProvider.getSearchItems().should.deep.equal(expected)

        var globalSearch = globalSearchProvider.$get()
        globalSearch.searchItems.should.deep.equal(expected)
        globalSearch.searchFunctions.should.deep.equal(expectedFunctions)

        //should support remove
        globalSearchProvider.removeByType('type').should.deep.equal({
            type: 'type',
            listRoute: 'listRoute',
            responseHandler: 'responseHandler',
            selectHandler: 'selectHandler',
            typeTranslationKey: 'typeTranslationKey'
        })

        expected = [
            {
                type: '1',
                listRoute: '2',
                responseHandler: '3',
                selectHandler: '4',
                typeTranslationKey: '5'
            }
        ]
        globalSearchProvider.getSearchItems().should.deep.equal(expected)
        globalSearch = globalSearchProvider.$get()
        globalSearch.searchItems.should.deep.equal(expected)
    })

    it('should support adding search functions', () => {
        let stub = sinon.stub()
        globalSearchProvider.addSearchFunction('type', stub)

        let globalSearch = globalSearchProvider.$get()
        globalSearch.searchFunctions.length.should.equal(1)
        globalSearch.searchFunctions[0].function()
        stub.should.have.been.called
    })

    it('should support adding generic search functions', () => {
        globalSearchProvider.addCommonSearchFunction('type', 'blah')

        let globalSearch = globalSearchProvider.$get()
        globalSearch.searchFunctions.length.should.equal(1)
        globalSearch.searchFunctions[0].function.should.be.a('function')
    })

    it('should support adding static pages', () => {
        globalSearchProvider.addStaticPage('name', 'keywords', 'permission', 'state', 'stateParams')

        let globalSearch = globalSearchProvider.$get()
        globalSearch.staticPages.should.deep.equal([{
            name: 'name',
            keywords: 'keywords',
            permission: 'permission',
            state: 'state',
            stateParams: 'stateParams',
            icon: 'find_in_page',
            type: 'static'
        }])
        globalSearch.staticPages.should.deep.equal(globalSearchProvider.getStaticPages())
    })
})
