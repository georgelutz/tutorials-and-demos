describe('googleAnalyticsRun', function() {
    var googleAnalyticsService
    var $rootScope
    var authService

    beforeEach(function() {
        googleAnalyticsService = {}
        googleAnalyticsService.setAccount = sinon.stub()
        googleAnalyticsService.forceSSL = sinon.stub()

        $rootScope = {}
        $rootScope.$on = sinon.stub()

        authService = {}

        var constructor = require('../../../main/core/run/googleAnalyticsRun')
        constructor(googleAnalyticsService, $rootScope, authService)
    })

    it('should call setAccount on load', function() {
        googleAnalyticsService.setAccount.should.have.been.calledWithExactly()
    })

    it('should update account and dimension on login', function() {
        var user = {
            uid: 'you',
            orgType: 'administrative',
            orgId: 'PeopleNet',
            userRoles: [{name: 'Super Admin'}]
        }
        authService.getCurrentUser = sinon.stub().resolves(user)
        googleAnalyticsService.setCustomDimension = sinon.stub()

        $rootScope.$on.should.have.been.calledWith('login', sinon.match.func)
        return $rootScope.$on.getCall(0).args[1]()
            .then(function() {
                googleAnalyticsService.setAccount.should.have.been.calledWith(user.uid)
                googleAnalyticsService.setCustomDimension.should.have.been.calledWith('dimension1', user.orgType)
                googleAnalyticsService.setCustomDimension.should.have.been.calledWith('dimension3', user.userRoles[0].name)
                googleAnalyticsService.setCustomDimension.should.have.been.calledWith('dimension4', user.orgId)

            })
    })

    it('should not set analytics data for anonymous users', function() {
        var user = {
            uid: 'you',
            orgType: 'administrative',
            orgId: 'PeopleNet',
            userRoles: [{name: 'Super Admin'}],
            anonymous: true
        }
        authService.getCurrentUser = sinon.stub().resolves(user)
        googleAnalyticsService.setAccount = sinon.stub()
        googleAnalyticsService.setCustomDimension = sinon.stub()

        $rootScope.$on.should.have.been.calledWith('login', sinon.match.func)
        return $rootScope.$on.getCall(0).args[1]()
            .then(function() {
                googleAnalyticsService.setAccount.should.not.have.been.called
                googleAnalyticsService.setCustomDimension.should.not.have.been.called
            })
    })
})

