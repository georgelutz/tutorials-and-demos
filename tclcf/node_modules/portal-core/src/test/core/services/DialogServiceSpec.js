let DialogService = require('../../../main/core/services/DialogService')

describe('DialogService', () => {
    let $mdDialog
    let $translate
    let dialogService
    let $analytics
    let $q
    let $state

    beforeEach(() => {
        $analytics = {}
        $analytics.eventTrack = sinon.stub()
        $q = {}
        $q.reject = sinon.stub()
        $state = {}
        $state.current = {}
        $state.current.name = sinon.stub()
        $mdDialog = {}
        $mdDialog.alert = sinon.stub().returnsThis()
        $mdDialog.htmlAlert = sinon.stub().returnsThis()
        $mdDialog.title = sinon.stub().returnsThis()
        $mdDialog.textContent = sinon.stub().returnsThis()
        $mdDialog.htmlContent = sinon.stub().returnsThis()
        $mdDialog.ariaLabel = sinon.stub().returnsThis()
        $mdDialog.targetEvent = sinon.stub().returnsThis()
        $mdDialog.ok = sinon.stub().returnsThis()
        $mdDialog.confirm = sinon.stub().returnsThis()
        $mdDialog.cancel = sinon.stub().returnsThis()
        $mdDialog.show = sinon.stub()

        $translate = sinon.stub()

        dialogService = new DialogService($analytics, $mdDialog, $q, $state, $translate)
    })

    describe('#alert', () => {
        it('should create and return a dialog from alert options', () => {
            let dialog

            // given some dialog options
            let dialogOptions = {
                targetEvent: 'event',
                content: 'content',
                ok: 'OK'
            }

            // when alert is called
            dialog = dialogService.alert(dialogOptions)

            // then all stubs should be called
            $mdDialog.alert.should.have.been.calledOnce
            $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
            $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
            $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)

            // and then a dialog should be returned
            dialog.should.eql($mdDialog)
        })
    })

    describe('#showAlert', () => {
        it('should create an alert and then show it', () => {
            let confirmResult = {isShow: true}

            // given some dialog options
            let dialogOptions = {
                targetEvent: 'event',
                content: 'content',
                ok: 'OK'
            }

            // and a show dialog stub
            $translate.resolves({'core.common.dialog-service.alert_ok': 'ok_default'})
            $mdDialog.show.withArgs($mdDialog).resolves(confirmResult)

            // when showAlert is called
            return dialogService.showAlert(dialogOptions)
                .then(response => {
                    // then all stubs should be called
                    $mdDialog.alert.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
                    $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
                    $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)

                    // then a dialog should be returned
                    response.should.eql(confirmResult)
                })
        })
    })

    describe('#htmlAlert', () => {
        it('should create and return a dialog from alert options with html content', () => {
            let dialog

            // given some dialog options
            let dialogOptions = {
                targetEvent: 'event',
                htmlContent: '<pre>content</pre>',
                ok: 'OK'
            }

            // when alert is called
            dialog = dialogService.htmlAlert(dialogOptions)

            // then all stubs should be called
            $mdDialog.alert.should.have.been.calledOnce
            $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
            $mdDialog.htmlContent.should.have.been.calledWith(dialogOptions.htmlContent)
            $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)

            // and then a dialog should be returned
            dialog.should.eql($mdDialog)
        })
    })

    describe('#showHtmlAlert', () => {
        it('should create an alert with html content and then show it', () => {
            let confirmResult = {isShow: true}

            // given some dialog options
            let dialogOptions = {
                targetEvent: 'event',
                htmlContent: '<pre>content</pre>',
                ok: 'OK'
            }

            // and a show dialog stub
            $translate.resolves({'core.common.dialog-service.alert_ok': 'ok_default'})
            $mdDialog.show.withArgs($mdDialog).resolves(confirmResult)

            // when showAlert is called
            return dialogService.showHtmlAlert(dialogOptions)
                .then(response => {
                    // then all stubs should be called
                    $mdDialog.alert.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
                    $mdDialog.htmlContent.should.have.been.calledWith(dialogOptions.htmlContent)
                    $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)

                    // then a dialog should be returned
                    response.should.eql(confirmResult)
                })
        })
    })

    describe('#confirm', () => {
        it('should create and return a dialog from confirm options', () => {
            let dialog

            // given some dialog options
            let dialogOptions = {
                title: 'title',
                content: 'content',
                ariaLabel: 'ariaLabel',
                targetEvent: 'targetEvent',
                ok: 'OK',
                cancel: 'cancel'
            }

            // when confirm is called
            dialog = dialogService.confirm(dialogOptions)

            // then all stubs should be called
            $mdDialog.confirm.should.have.been.calledOnce
            $mdDialog.title.should.have.been.calledWith(dialogOptions.title)
            $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
            $mdDialog.ariaLabel.should.have.been.calledWith(dialogOptions.ariaLabel)
            $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
            $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)
            $mdDialog.cancel.should.have.been.calledWith(dialogOptions.cancel)

            // and then a dialog should be returned
            dialog.should.eql($mdDialog)
        })
    })

    describe('#showConfirm', () => {
        it('should create a confirm and then show it', () => {
            let confirmResult = {isShow: true}

            // given some dialog options
            let dialogOptions = {
                title: 'title',
                content: 'content',
                ariaLabel: 'ariaLabel',
                targetEvent: 'targetEvent',
                ok: 'OK',
                cancel: 'cancel'
            }

            // and a show dialog stub
            $mdDialog.show.resolves(confirmResult)

            // when showConfirm is called
            return dialogService.showConfirm(dialogOptions)
                .then(response => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledWith(dialogOptions.title)
                    $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
                    $mdDialog.ariaLabel.should.have.been.calledWith(dialogOptions.ariaLabel)
                    $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
                    $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)
                    $mdDialog.cancel.should.have.been.calledWith(dialogOptions.cancel)

                    // and then a dialog should be returned
                    response.should.eql(confirmResult)
                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.not.have.been.called
                })
        })

        it('should cancel a confirm dialog', () => {
            // given some dialog options
            let dialogOptions = {
                title: 'title',
                content: 'content',
                ariaLabel: 'ariaLabel',
                targetEvent: 'targetEvent',
                ok: 'OK',
                cancel: 'cancel'
            }

            // and a show dialog stub
            $mdDialog.show.rejects(undefined)

            // when showConfirm is called
            return dialogService.showConfirm(dialogOptions)
                .then(() => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledWith(dialogOptions.title)
                    $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
                    $mdDialog.ariaLabel.should.have.been.calledWith(dialogOptions.ariaLabel)
                    $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
                    $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)
                    $mdDialog.cancel.should.have.been.calledWith(dialogOptions.cancel)

                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.have.been.called
                })
        })

        it('should reject an error on a confirm dialog', () => {
            // given only the expected arguments
            let dialogOptions = {
                entityType: 'type',
                entityName: 'name',
                targetEvent: 'event'
            }

            // and a show dialog stub
            $mdDialog.show.rejects('error')

            // when showConfirm is called
            return dialogService.showConfirm(dialogOptions)
                .then(() => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledWith(dialogOptions.title)
                    $mdDialog.textContent.should.have.been.calledWith(dialogOptions.content)
                    $mdDialog.ariaLabel.should.have.been.calledWith(dialogOptions.ariaLabel)
                    $mdDialog.targetEvent.should.have.been.calledWith(dialogOptions.targetEvent)
                    $mdDialog.ok.should.have.been.calledWith(dialogOptions.ok)
                    $mdDialog.cancel.should.have.been.calledWith(dialogOptions.cancel)

                    $analytics.eventTrack.should.not.have.been.called
                    $q.reject.should.have.been.called
                })
        })
    })

    describe('#confirmDelete', () => {
        it('should create and return a dialog', () => {
            // given only the expected arguments
            let dialogOptions = {
                entityName: 'name',
                targetEvent: {}
            }

            let translationModel = {
                name: dialogOptions.entityName
            }

            $translate.withArgs(sinon.match.array, translationModel).resolves({})

            // when confirmDelete is called
            return dialogService.confirmDelete(dialogOptions)
                .then(dialog => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledOnce
                    $mdDialog.textContent.should.have.been.calledOnce
                    $mdDialog.ariaLabel.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledOnce
                    $mdDialog.ok.should.have.been.calledOnce
                    $mdDialog.cancel.should.have.been.calledOnce

                    // and then a dialog should be returned
                    dialog.should.eql($mdDialog)
                })
        })

        it('should create and show a confirm delete dialog', () => {
            let confirmResult = {isShow: true}

            // given only the expected arguments
            let dialogOptions = {
                entityType: 'type',
                entityName: 'name',
                targetEvent: 'event'
            }

            // and a show dialog stub
            $mdDialog.show.resolves(confirmResult)

            $translate.resolves({})

            // when showConfirmDelete is called
            return dialogService.showConfirmDelete(dialogOptions)
                .then(response => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledOnce
                    $mdDialog.textContent.should.have.been.calledOnce
                    $mdDialog.ariaLabel.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledOnce
                    $mdDialog.ok.should.have.been.calledOnce
                    $mdDialog.cancel.should.have.been.calledOnce

                    // and then a dialog should be returned
                    response.should.eql(confirmResult)
                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.not.have.been.called
                })
        })

        it('should cancel a confirm delete dialog', () => {
            // given only the expected arguments
            let dialogOptions = {
                entityType: 'type',
                entityName: 'name',
                targetEvent: 'event'
            }

            // and a show dialog stub
            $mdDialog.show.rejects(undefined)

            $translate.resolves({})

            // when showConfirmDelete is called
            return dialogService.showConfirmDelete(dialogOptions)
                .then(() => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledOnce
                    $mdDialog.textContent.should.have.been.calledOnce
                    $mdDialog.ariaLabel.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledOnce
                    $mdDialog.ok.should.have.been.calledOnce
                    $mdDialog.cancel.should.have.been.calledOnce

                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.have.been.called
                })
        })

        it('should reject an error on a confirm delete dialog', () => {
            // given only the expected arguments
            let dialogOptions = {
                entityType: 'type',
                entityName: 'name',
                targetEvent: 'event'
            }

            // and a show dialog stub
            $mdDialog.show.rejects('error')

            $translate.resolves({})

            // when showConfirmDelete is called
            return dialogService.showConfirmDelete(dialogOptions)
                .then(() => {
                    // then all stubs should be called
                    $mdDialog.confirm.should.have.been.calledOnce
                    $mdDialog.title.should.have.been.calledOnce
                    $mdDialog.textContent.should.have.been.calledOnce
                    $mdDialog.ariaLabel.should.have.been.calledOnce
                    $mdDialog.targetEvent.should.have.been.calledOnce
                    $mdDialog.ok.should.have.been.calledOnce
                    $mdDialog.cancel.should.have.been.calledOnce

                    $analytics.eventTrack.should.not.have.been.called
                    $q.reject.should.have.been.called
                })
        })
    })

    describe('#show', () => {
        it('should show a dialog', () => {
            let showResult = {isShowResult: true}

            // given a dialog to show
            let dialog = {isDialog: true}

            // and a show stub
            $mdDialog.show.withArgs(dialog).resolves(showResult)

            // when show is called
            dialogService.show(dialog)
                .then(response => {
                    response.should.eql(showResult)
                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.not.have.been.called
                })
        })

        it('should show a dialog and track cancel', () => {
            // given a dialog to show
            let dialog = {isDialog: true}

            // and a show stub
            $mdDialog.show.rejects(undefined)

            // when show is called
            dialogService.show(dialog)
                .then(() => {
                    $analytics.eventTrack.should.have.been.called
                    $q.reject.should.have.been.called
                })
        })

        it('should show a dialog and track cancel', () => {
            // given a dialog to show
            let dialog = {isDialog: true}

            // and a show stub
            $mdDialog.show.rejects('error')

            // when show is called
            dialogService.show(dialog)
                .then(() => {
                    $analytics.eventTrack.should.not.have.been.called
                    $q.reject.should.have.been.called
                })
        })
    })

    describe('#cancel', () => {
        it('should cancel a currently a provided dialog', () => {
            let cancelResult = {isCancelResult: true}

            // given a dialog to cancel
            let dialog = {isDialog: true}

            // and a cancel stub
            $mdDialog.cancel.withArgs(dialog).resolves(cancelResult)

            // when cancel is called
            dialogService.cancel(dialog)
                .then(response => {
                    response.should.eql(cancelResult)
                })
        })
    })
})
