describe('GoogleAnalyticsService', function() {

    var $analytics
    var $location
    var gaService
    var $window
    var init
    var authConfig
    var authService

    beforeEach(function() {
        $analytics = {}
        $analytics.setUsername = sinon.stub()

        $window = {}
        $window.ga = sinon.stub()
        $window.localStorage = {}

        authConfig = {}
        authConfig.googleAnalyticsKeys = {production: 'UA-61358717-2', nonProduction: 'UA-61358717-1'}

        authService = {}
        var user = {
            id: 'you',
            orgType: 'administrative',
            orgId: 'PeopleNet',
            userRoles: [{name: 'Super Admin'}]
        }
        authService.getCurrentUser = sinon.stub().resolves(user)

        init = function(environmentName) {

            //Mock the host function so we can test the GA-Key setting, which is based on environment.
            $location = {
                host: function() {
                    return environmentName
                }
            }

            let GoogleAnalyticsService = require('../../../main/core/services/GoogleAnalyticsService')
            gaService = new GoogleAnalyticsService($analytics, $location, $window, authConfig, authService)
        }
    })

    it('should set GoogleAnalytics non-prod and auto userId parameters', function() {
        //localhost
        init('localhost')
        gaService.setAccount()

        //dev
        init('dev')
        gaService.setAccount()

        //qa
        init('qa')
        gaService.setAccount()

        //staging
        init('staging')
        gaService.setAccount()

        //canary
        init('canary')
        gaService.setAccount()

        $window.ga.should.have.callCount(5)
        $window.ga.should.always.have.been.calledWithExactly('create', 'UA-61358717-1', 'auto')
    })

    it('should set GoogleAnalytics non-prod and given userId parameters', function() {
        //localhost
        init('localhost')
        gaService.setAccount('00000000')

        //dev
        init('dev')
        gaService.setAccount('00000000')

        //qa
        init('qa')
        gaService.setAccount('00000000')

        //staging
        init('staging')
        gaService.setAccount('00000000')

        //canary
        init('canary')
        gaService.setAccount('00000000')

        $window.ga.should.have.callCount(5)
        $window.ga.should.always.have.been.calledWithExactly('create', 'UA-61358717-1', {userId: '00000000'})
    })

    it('should set GoogleAnalytics prod and auto userId parameters', function() {
        //prod
        init('www.paccarsolutions.com')
        gaService.setAccount()

        $window.ga.should.have.callCount(1)
        $window.ga.should.have.been.calledWithExactly('create', 'UA-61358717-2', 'auto')
    })

    it('should set GoogleAnalytics prod and given userId parameters', function() {
        //prod
        init('www.paccarsolutions.com')
        gaService.setAccount('00000000')

        $window.ga.should.have.callCount(1)
        $window.ga.should.have.been.calledWithExactly('create', 'UA-61358717-2', {userId: '00000000'})
    })

    it('should call ga to set custom dimension', function() {
        init('')
        gaService.setCustomDimension('dimension1', 'OEM')
        $window.ga.should.have.been.calledWith('set', 'dimension1', 'OEM')
    })

    it('should run set account and handle when $window.ga does not exist', function() {
        $window.ga = null
        init('')

        gaService.setAccount()
        should.not.exist($window.ga)
    })

    it('should run set custom dimension and handle $window.ga not existing', function() {
        $window.ga = null
        init('')

        gaService.setCustomDimension('dimension1', 'OEM')
        should.not.exist($window.ga)
    })

    it('should force SSL', function() {
        init('')

        gaService.forceSSL()
        $window.ga.should.have.been.calledWith('set', 'forceSSL', 'true')
    })

    it('should run forceSSL and handle when $window.ga does not exist', function() {
        $window.ga = null
        init('')

        gaService.forceSSL()
        should.not.exist($window.ga)
    })

    it('should set dimension2 to reflect automated test traffic ', function() {
        $window.localStorage = {automatedTesting: 'true'}
        init('www.paccarsolutions.com')
        gaService.setCustomDimension = sinon.stub()
        gaService.excludeTestTraffic()

        gaService.setCustomDimension.should.have.been.calledWith('dimension2', 'AutomatedTesting')
    })

    it('should not set dimension2 to "automatedTraffic" when traffic is not automated ', function() {
        init('www.paccarsolutions.com')
        gaService.setCustomDimension = sinon.stub()
        gaService.excludeTestTraffic()

        gaService.setCustomDimension.should.not.have.been.called
    })

    it('should exclude automated traffic on setAccount', function() {
        init('www.paccarsolutions.com')
        gaService.excludeTestTraffic = sinon.stub()
        gaService.setAccount()

        gaService.excludeTestTraffic.should.have.been.called
    })

    it('should initialize user info appropriately', function() {
        gaService.setCustomDimension = sinon.stub()

        gaService.initialize().then(function() {
            gaService.$analytics.setUsername.should.have.been.calledWith('you')
            gaService.setCustomDimension.should.have.been.calledWith('dimension1', 'administrative')
            gaService.setCustomDimension.should.have.been.calledWith('dimension3', 'Super Admin')
            gaService.setCustomDimension.should.have.been.calledWith('dimension4', 'PeopleNet')
        })
    })
})
