var I18nService = require('../../../main/core/services/I18nService')

describe('I18nService', () => {
    let $translate
    let svc
    let tmhDynamicLocale
    let localeHelper

    beforeEach(() => {
        $translate = sinon.stub()

        tmhDynamicLocale = {}
        tmhDynamicLocale.set = sinon.stub()

        localeHelper = {
            defaultLocale: 'en-US',
            locales: ['en-US', 'es-MX', 'fr-CA', 'pt-BR'],
            languageKeys: {
                'en*': 'en-US',
                'es*': 'es-MX',
                'fr*': 'fr-CA',
                'pt*': 'pt-BR'
            }
        }

        svc = new I18nService(Promise, $translate, tmhDynamicLocale, localeHelper)
    })

    it('should initialize', () => {
        svc.getArray.should.exist
        svc.updateCurrentLocale.should.exist
    })

    it('should support getting array from resources', () => {
        $translate.withArgs('entity.common.countries.0').returns({then: sinon.stub().callsArgWith(0, 'EE.UU.')})
        $translate.withArgs('entity.common.countries.1').returns({
            then: sinon.stub().returns({
                then: sinon.stub().callsArgWith(0, 'CanadÃ¡')
            })
        })

        svc.getArray('entity.common.countries')

        $translate.should.have.been.calledWith('entity.common.countries.0')
        $translate.should.have.been.calledWith('entity.common.countries.1')
    })

    it('should support changing locale', () => {
        $translate.use = sinon.stub().resolves()
        let user = {locale: 'es-MX'}

        return svc.updateCurrentLocale(user)
            .then(result => {
                tmhDynamicLocale.set.should.have.been.calledWith(user.locale.toLowerCase())
                $translate.use.should.have.been.calledWith(user.locale)
                result.should.be.equal(user)
            })
    })

    it('should support get browser locale', () => {
        $translate.preferredLanguage = sinon.stub()
        let locale

        $translate.preferredLanguage.returns('en-US')
        locale = svc.getBrowserLocale()
        locale.should.equal('en-US')

        $translate.preferredLanguage.returns('pt-BR')
        locale = svc.getBrowserLocale()
        locale.should.equal('pt-BR')
    })
})
