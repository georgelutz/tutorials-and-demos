let StaticContentService = require('../../../main/core/services/StaticContentService')

describe('StaticContentService', () => {
    let init
    let svc
    let $http
    let portalSha

    beforeEach(() => {
        $http = {}
        portalSha = ''

        init = () => {
            svc = new StaticContentService($http, portalSha)
        }
        init()
    })

    it('should support cached get calls', () => {
        let response = {data: 'data'}
        let promise = {then: sinon.stub().callsArgWith(0, response).returnsThis()}
        $http.get = sinon.stub().returns(promise)

        svc.getContent('someFile.json').should.equal(promise)

        $http.get.should.have.been.calledWith('/someFile.json', {cache: true})
        promise.then.should.have.been.called
        promise.then.getCall(0).args[0](response).should.equal('data')
    })

    it('should add sha when present', () => {
        portalSha = '123sha456'
        let response = {data: 'data'}
        let promise = {then: sinon.stub().callsArgWith(0, response).returnsThis()}
        $http.get = sinon.stub().returns(promise)

        init()
        svc.getContent('someFile.json').should.equal(promise)

        $http.get.should.have.been.calledWith('/someFile.123sha456.json', {cache: true})
        promise.then.should.have.been.called
        promise.then.getCall(0).args[0](response).should.equal('data')
    })

    it('shouldnt duplicate the sha', () => {
        portalSha = '123sha456'
        let response = {data: 'data'}
        let promise = {then: sinon.stub().callsArgWith(0, response).returnsThis()}
        $http.get = sinon.stub().returns(promise)

        init()
        svc.getContent('someFile.123sha456.json').should.equal(promise)

        $http.get.should.have.been.calledWith('/someFile.123sha456.json', {cache: true})
        promise.then.should.have.been.called
        promise.then.getCall(0).args[0](response).should.equal('data')
    })
})
