describe('ThemeService', () => {
    let svc
    let init
    let $mdTheming
    let $state
    let authConfig
    let localStorageService
    let mdPalettes
    let portalSha

    beforeEach(() => {

        $mdTheming = {}
        $mdTheming.THEMES = {
            default: {},
            theme1: {},
            red: {},
            blue: {},
            warn: {}
        }

        localStorageService = {}
        localStorageService.get = sinon.stub()
        localStorageService.set = sinon.stub()
        localStorageService.remove = sinon.stub()

        $state = {}
        $state.go = sinon.stub()
        $state.current = 'currentUrl'

        mdPalettes = {red: 'red'}

        authConfig = {}

        portalSha = ''

        init = () => {
            let ThemeService = require('../../../main/core/services/ThemeService')
            svc = new ThemeService($mdTheming, $state, authConfig, localStorageService, mdPalettes, portalSha)
        }

        init()
    })

    it('should initialize with defaults', () => {
        localStorageService.get.should.have.been.calledWith('theme')
        svc.getCurrentTheme().should.equal('default')
        svc.getNav().should.equal('images/nav_logo.png')
        svc.getLogin().should.equal('images/login_logo.png')
    })

    it('should override images from authConfig', () => {
        authConfig = {
            navImageUrl: 'navvy',
            loginImageUrl: 'savvy'
        }

        init()

        localStorageService.get.should.have.been.calledWith('theme')
        svc.getCurrentTheme().should.equal('default')
        svc.getNav().should.equal(authConfig.navImageUrl)
        svc.getLogin().should.equal(authConfig.loginImageUrl)
    })

    it('should load themes from local storage on init', () => {
        localStorageService.get.withArgs('theme').returns('dr_who_theme')
        $mdTheming.THEMES = {dr_who_theme: true}

        init()

        localStorageService.get.should.have.been.calledWith('theme')
        svc.getCurrentTheme().should.equal('dr_who_theme')
        svc.getNav().should.equal('images/nav_logo_dr_who_theme.png')
        svc.getLogin().should.equal('images/login_logo_dr_who_theme.png')
    })

    it('should return a string list of available themes, removing warn', () => {
        let expected = ['default', 'theme1', 'red', 'blue']

        let themeList = svc.getThemeList()

        themeList.should.deep.equal(expected)
    })

    it('should change the current theme when it exists', () => {
        let theme = 'red'
        let themeNav = `images/nav_logo_${theme}.png`
        let themeLogin = `images/login_logo_${theme}.png`

        svc.setTheme(theme)

        svc.getCurrentTheme().should.equal(theme)
        svc.getNav().should.equal(themeNav)
        svc.getLogin().should.equal(themeLogin)
        localStorageService.set.should.have.been.calledWith('theme', theme)
        $state.go.should.have.been.calledWith($state.current, {}, {reload: true})
    })

    it('should set the current theme to default when the requested theme does not exist', () => {
        let theme = 'myTheme'

        let expectedTheme = 'default'
        let expectedThemeNav = 'images/nav_logo.png'
        let expectedThemeLogin = 'images/login_logo.png'

        svc.setTheme(theme)

        svc.getCurrentTheme().should.equal(expectedTheme)
        svc.getNav().should.equal(expectedThemeNav)
        svc.getLogin().should.equal(expectedThemeLogin)
        localStorageService.set.should.have.been.calledWith('theme', expectedTheme)
        $state.go.should.have.been.calledWith($state.current, {}, {reload: true})
    })

    it('should add the sha if it exists', () => {
        portalSha = 123

        init()

        svc.getNav().should.equal('images/nav_logo.123.png')
        svc.getLogin().should.equal('images/login_logo.123.png')
    })

    it('should get palettes', () => {
        svc.getPalettes().should.equal(mdPalettes)
    })

    it('should get default theme object', () => {
        svc.getTheme().should.equal($mdTheming.THEMES.default)
    })

    it('should get named theme object', () => {
        svc.getTheme('red').should.equal($mdTheming.THEMES.red)
    })

    it('should get color from default theme and palette', () => {
        let hue = [1, 2, 3]
        $mdTheming.THEMES.default.colors = {primary: {name: 'defaultPalette'}}
        mdPalettes.defaultPalette = {500: {value: hue}}

        svc.getColor().should.equal(hue)
    })

    it('should get custom color', () => {
        let hue = [1, 2, 3]
        $mdTheming.THEMES.myTheme = {
            colors: {secondary: {name: 'myPalette'}}
        } 
        mdPalettes.myPalette = {myHue: {value: hue}}

        svc.getColor('myTheme', 'secondary', 'myHue').should.equal(hue)
    })
})
