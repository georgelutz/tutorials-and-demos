let TokenService = require('../../../main/core/services/TokenService')

describe('TokenService', () => {
    let svc
    let idToken
    let encodedToken
    let localStorageService

    beforeEach(() => {
        idToken = {
            name: 'jonny'
        }

        encodedToken = 'f89ujio24jrijf98j928jf2'

        localStorageService = {}
        localStorageService.get = sinon.stub()
        localStorageService.get.withArgs('pnet.portal.idToken').returns(idToken)
        localStorageService.get.withArgs('pnet.portal.encodedToken').returns(encodedToken)
        localStorageService.set = sinon.stub()
        localStorageService.remove = sinon.stub()

        svc = new TokenService(localStorageService)
    })

    it('should load tokens from local storage on init', () => {
        svc.getToken().should.equal(idToken)
        svc.getEncodedToken().should.equal(encodedToken)
    })

    it('should support clearing tokens', () => {
        svc.clear()

        localStorageService.remove.should.have.been.calledWith('pnet.portal.idToken')
        localStorageService.remove.should.have.been.calledWith('pnet.portal.encodedToken')
    })

    it('should support updating tokens', () => {
        svc.updateTokens({
            idToken: {a: 1},
            encodedToken: {b: 2}
        })

        localStorageService.set.should.have.been.calledWith('pnet.portal.idToken', {a: 1})
        localStorageService.set.should.have.been.calledWith('pnet.portal.encodedToken', {b: 2})
    })

    it('should support updating tokens when no idToken is provided', () => {
        svc.updateTokens({
            encodedToken: {b: 2}
        })

        localStorageService.set.should.have.been.calledWith('pnet.portal.idToken', undefined)
        localStorageService.set.should.have.been.calledWith('pnet.portal.encodedToken', {b: 2})
    })
})
