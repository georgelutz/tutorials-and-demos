const UnitConversionService = require('../../../main/core/services/UnitConversionService')

const units = require('../../../main/core/constants/units')
const unitConversions = require('../../../main/core/constants/unitConversions')

describe('UnitConversionService', () => {
    let currentUser
    let $translate
    let authService
    let labels
    let svc
    let testTranslations
    let testOutput
    let testLabel

    beforeEach(() => {
        $translate = arr => Promise.resolve(arr.reduce((r, v) => {
            r[v] = v
            return r
        }, {}))

        currentUser = {}
        currentUser.getTagByKey = sinon.stub()

        authService = {}
        authService.getCurrentUser = sinon.stub().resolves(currentUser)

        labels = {
            distance: {
                mi: {short: 'core.units.mi_short', long: 'core.units.mi_long'},
                km: {short: 'core.units.km_short', long: 'core.units.km_long'}
            },
            volume: {
                gal: {short: 'core.units.gal_short', long: 'core.units.gal_long'},
                l: {short: 'core.units.l_short', long: 'core.units.l_long'}
            },
            temperature: {
                c: {short: 'core.units.c_short', long: 'core.units.c_long'},
                f: {short: 'core.units.f_short', long: 'core.units.f_long'}
            },
            pressure: {
                pa: {short: 'core.units.pa_short', long: 'core.units.pa_long'},
                kpa: {short: 'core.units.kpa_short', long: 'core.units.kpa_long'},
                mpa: {short: 'core.units.mpa_short', long: 'core.units.mpa_long'},
                psi: {short: 'core.units.psi_short', long: 'core.units.psi_long'}
            },
            mass: {
                g: {short: 'core.units.g_short', long: 'core.units.g_long'},
                kg: {short: 'core.units.kg_short', long: 'core.units.kg_long'},
                lb: {short: 'core.units.lb_short', long: 'core.units.lb_long'}
            },
            speed: {
                'mi/h': {short: 'core.units.mi/h_short', long: 'core.units.mi/h_long'},
                'km/h': {short: 'core.units.km/h_short', long: 'core.units.km/h_long'}
            },
            fuelConsumption: {
                'mi/gal': {short: 'core.units.mi/gal_short', long: 'core.units.mi/gal_long'},
                'mi/l': {short: 'core.units.mi/l_short', long: 'core.units.mi/l_long'},
                'km/gal': {short: 'core.units.km/gal_short', long: 'core.units.km/gal_long'},
                'km/l': {short: 'core.units.km/l_short', long: 'core.units.km/l_long'}
            },
            massFlowRate: {
                'g/s': {short: 'core.units.g/s_short', long: 'core.units.g/s_long'},
                'kg/s': {short: 'core.units.kg/s_short', long: 'core.units.kg/s_long'},
                'lb/s': {short: 'core.units.lb/s_short', long: 'core.units.lb/s_long'}
            }
        }

        svc = new UnitConversionService($translate, authService, units, unitConversions)

        testTranslations = () => {
            return svc.labels
        }

        testOutput = (input, fromUnits, toUnits, decimals) => {
            return svc.convertUnit(input, fromUnits, decimals, undefined, toUnits).output
        }

        testLabel = (fromUnits, labelType) => {
            return svc.convertUnit(0, fromUnits, undefined, labelType, fromUnits).label
        }
    })

    it('should properly create labels', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testTranslations().should.deep.equal(labels)
            ])
        })
    })

    it('should not convert if input units are not given', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testOutput(123).should.equal('123')
            ])
        })
    })

    it('should convert using default units if output units are not given', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                // km -> mi
                testOutput(123, 'km').should.equal('76'),
                // l -> gal
                testOutput(123, 'l').should.equal('32'),
                // c -> f
                testOutput(123, 'c').should.equal('253')
            ])
        })
    })

    it('should output the result to the given decimal point', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testOutput(123, 'l', 'gal', '2').should.equal('32.49'),
                testOutput(123, 'c', 'f', '2').should.equal('253.40')
            ])
        })
    })

    it('should handle unknown units', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testOutput(123, 'Units').should.equal('123')
            ])
        })
    })

    it('should handle known labels', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testLabel('mi', 'short').should.equal('core.units.mi_short'),
                testLabel('mi', 'long').should.equal('core.units.mi_long')
            ])
        })
    })

    it('should handle unknown labels', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testLabel('Units', 'short').should.equal('Units')
            ])
        })
    })
    
    it('should handle string inputs', () => {
        return svc.loadPromise.then(() => {
            return Promise.all([
                testOutput('72', 'km', 'km').should.equal('72')
            ])
        })
    })
})
