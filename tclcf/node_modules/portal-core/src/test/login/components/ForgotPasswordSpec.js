describe('ForgotPassword', () => {
    var component
    var ctrl
    var $state
    var toastService
    var $log
    var $translate
    var Restangular

    beforeEach(() => {
        $log = {}
        $log.error = sinon.stub()

        Restangular = {}
        Restangular.all = sinon.stub().returnsThis()
        Restangular.post = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        $state = {}
        $state.go = sinon.stub()

        $translate = sinon.stub().returns({
            then: sinon.stub().callsArgWith(0, {
                'login.common.err_unexpected': 'err_unexpected_key'
            })
        })

        component = require('../../../main/login/components/ForgotPassword')
        ctrl = new component.controller($log, $state, $translate, toastService, Restangular)
        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.user.should.deep.equal({})
        $translate.should.have.been.calledOnce
        $translate.should.have.been.calledWith(sinon.match.array)
    })

    it('should mail password reset link with valid form', () => {
        ctrl.user = {user: true}
        Restangular.post.resolves({success: true})

        return ctrl.initiateResetPassword()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(ctrl.user)
                toastService.show.should.have.been.called
                $state.go.should.have.been.calledWith('auth.login')
            })
    })

    it('should show flash when server doesnt return success', () => {
        Restangular.post.resolves({errorMessage: 'Hello, world!'})

        return ctrl.initiateResetPassword()
            .then(() => {
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith('Hello, world!', {theme: 'warn'})
            })

    })

    it('should show flash on error callback', () => {
        Restangular.post.rejects('err!')

        return ctrl.initiateResetPassword()
            .then(() => {
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith('err_unexpected_key', {theme: 'warn'})
            })
    })
})
