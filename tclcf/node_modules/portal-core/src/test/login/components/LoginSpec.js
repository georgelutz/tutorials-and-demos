describe('Login', () => {
    var component
    var ctrl
    var $analytics
    var $log
    var $window
    var authService
    var dialogService
    var Restangular
    var toastService
    var $scope
    var $state

    beforeEach(() => {
        $analytics = {}
        $analytics.eventTrack = sinon.stub()

        $scope = {}
        $scope.$on = sinon.stub()

        $state = {}

        $log = {}
        $log.error = sinon.stub()

        authService = {}
        authService.login = sinon.stub()

        dialogService = {}

        toastService = {}
        toastService.show = sinon.stub()

        $window = {
            navigator: {}
        }

        Restangular = {}
        Restangular.all = sinon.stub().returnsThis()
        Restangular.customPOST = sinon.stub()

        component = require('../../../main/login/components/Login')
        ctrl = new component.controller($analytics, $log, Promise, $scope, $state, $window, authService, dialogService,
            Restangular, toastService)
        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.user.should.be.defined
    })

    it('should login', () => {
        authService.login.resolves({})
        ctrl.user = {user: true}

        return ctrl.login()
            .then(() => {
                authService.login.should.have.been.calledWith(ctrl.user)
            })
    })

    it('should support login failure', () => {
        ctrl.user = {user: true}
        authService.login.rejects('err')

        return ctrl.login()
            .then(() => {
                toastService.show.should.have.been.calledWith(sinon.match.string, {theme: 'warn'})
            })
    })

    it('should support login unverified accounts', () => {
        ctrl.user = {username: 'user'}
        authService.login.rejects({status: 403})
        dialogService.showConfirm = sinon.stub().resolves({})
        Restangular.customPOST.resolves({})

        return ctrl.login()
            .then(() => {
                dialogService.showConfirm.should.have.been.called

                Restangular.customPOST.should.have.been
                    .calledAfter(Restangular.all.withArgs('users'))
                    .and.calledWith({emailAddress: ctrl.user.username}, 'emailAddress/resendValidationLink')
                toastService.show.should.have.been.calledWith(sinon.match.string)
            })
    })

    it('should support login unverified accounts failure', () => {
        authService.login.rejects({status: 403})
        dialogService.showConfirm = sinon.stub().resolves({})
        Restangular.customPOST.rejects('err')

        return ctrl.login()
            .then(() => {
                dialogService.showConfirm.should.have.been.called

                toastService.show.should.have.been.calledWith(sinon.match.string, {theme: 'warn'})
            })
    })

    it('should support login unverified accounts cancellation', () => {
        authService.login.rejects({status: 403})
        dialogService.showConfirm = sinon.stub().rejects(false)

        return ctrl.login()
            .then(() => {
                Restangular.customPOST.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })

    it('should record non-403 rejects with Google Analytics', () => {
        authService.login.rejects({status: 401})
        dialogService.showConfirm = sinon.stub().rejects(false)

        return ctrl.login()
            .then(() => {
                $analytics.eventTrack.should.have.been.calledWith('Failed Login', {category: 'Security', label: 401})
                Restangular.customPOST.should.not.have.been.called
                toastService.show.should.have.been.called
            })
    })

    it('should handle redirect failures', () => {
        $state.go = sinon.stub()
        $scope.$on.should.have.been.calledWith('$stateChangeError', sinon.match.func)
        var func = $scope.$on.getCall(0).args[1]

        func('a', 'b', 'c', 'd', 'e', 'f')

        $state.go.should.have.been.calledWith('nav.welcome')
    })

    function testBrowser(agent) {
        $window.navigator.userAgent = agent
        return ctrl.isBrowserSupported()
    }

    it('should support IE11', () => {
        testBrowser('Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko').should.be.true
    })

    it('should not support IE10', () => {
        testBrowser('Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)').should.be.false
    })

    it('should not support IE9', () => {
        testBrowser('Mozilla/5.0 (Windows; U; MSIE 9.0; WIndows NT 9.0; en-US))').should.be.false
    })

    it('should not support IE8', () => {
        testBrowser('Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 3.3.69573; WOW64; en-US)').should.be.false
    })

    it('should not support IE7', () => {
        testBrowser('Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)').should.be.false
    })

    it('should support FireFox 33+', () => {
        testBrowser('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10; rv:33.0) Gecko/20100101 Firefox/33.0').should.be.true
    })

    it('should not support FireFox < 33', () => {
        testBrowser('Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0').should.be.false
    })

    it('should support Chrome 38+', () => {
        testBrowser('Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2224.3 Safari/537.36').should.be.true
    })

    it('should not support Chrome < 38', () => {
        testBrowser('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36').should.be.false
    })

    it('should not support AOL', () => {
        testBrowser('Mozilla/5.0 (compatible; AOL 9.7; AOLBuild 4343.19; Windows NT 6.1; WOW64; Trident/5.0; FunWebProducts)').should.be.false
    })

    it('should support Safari', () => {
        testBrowser('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/601.2.7 (KHTML, like Gecko) Version/9.0.1 Safari/601.2.7').should.be.true
    })

    it('should support iOS Chrome/Safari', () => {
        testBrowser('Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1').should.be.true
    })
})
