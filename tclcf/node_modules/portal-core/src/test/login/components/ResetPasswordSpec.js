describe('ResetPassword', () => {
    var component
    var ctrl
    var $log
    var $state
    var $stateParams
    var $translate
    var authService
    var toastService
    var Restangular

    beforeEach(() => {
        $log = {}
        $log.error = sinon.stub()

        $state = {}
        $state.go = sinon.stub()
        $state.current = {name: 'auth.activateaccount'}

        Restangular = {}
        Restangular.all = sinon.stub().returnsThis()
        Restangular.post = sinon.stub().resolves({success: true})

        $stateParams = {}
        $stateParams.resetCode = 'reset code!'

        authService = {}
        authService.login = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        $translate = sinon.stub().returns({
            then: sinon.stub().callsArgWith(0, {
                'login.reset.account_activated': 'account_activated_key',
                'login.reset.password_changed': 'password_changed_key',
                'login.common.err_unexpected': 'err_unexpected_key'
            })
        })

        component = require('../../../main/login/components/ResetPassword')
        ctrl = new component.controller($log, $state, $stateParams, $translate, authService, toastService, Restangular)
        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.activate.should.be.true
        ctrl.resetCode.should.equal($stateParams.resetCode)
        ctrl.user.should.deep.equal({resetCode: $stateParams.resetCode})
        ctrl.loading.should.be.true
        $translate.should.have.been.calledOnce
        $translate.should.have.been.calledWith(sinon.match.array)
    })

    it('should handle valid reset codes', () => {
        Restangular.post.resolves({success: true})

        return ctrl.validateResetCode($log, $state, $stateParams, $translate, Restangular, toastService)
            .then(() => {
                $translate.should.have.been.calledOnce
                $translate.should.have.been.calledWith(sinon.match.array)
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith({resetCode: $stateParams.resetCode})
                $state.go.should.not.have.been.called
            })
    })

    it('should handle invalid reset codes', () => {
        Restangular.post.resolves({success: false})

        return ctrl.validateResetCode($log, $state, $stateParams, $translate, Restangular, toastService)
            .then(() => {
                $translate.should.have.been.calledOnce
                $translate.should.have.been.calledWith(sinon.match.array)
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith({resetCode: $stateParams.resetCode})
                $state.go.should.have.been.called
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith('err_unexpected_key', {theme: 'warn'})
            })
    })

    it('should handle reset code errors', () => {
        Restangular.post.rejects('err')

        return ctrl.validateResetCode($log, $state, $stateParams, $translate, Restangular, toastService)
            .then(() => {
                $translate.should.have.been.calledOnce
                $translate.should.have.been.calledWith(sinon.match.array)
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith({resetCode: $stateParams.resetCode})
                $state.go.should.have.been.called
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith('err_unexpected_key', {theme: 'warn'})
            })
    })

    it('should support resetPassword success', () => {
        ctrl.user.password = 'secret'
        Restangular.post.resolves({success: true, userName: 'user'})
        authService.login.resolves({})

        return ctrl.submit()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(
                    {password: 'secret', resetCode: $stateParams.resetCode}
                )
                toastService.show.should.have.been.calledWith('account_activated_key')
                authService.login.should.have.been.calledWith({ username: 'user', password: 'secret'})
                $state.go.should.have.been.calledWith('nav.welcome')
            })
    })

    it('should support resetPassword success, login failure', () => {
        ctrl.user.password = 'secret'
        Restangular.post.resolves({success: true, userName: 'user'})
        authService.login.rejects('err')

        return ctrl.submit()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(
                    {password: 'secret', resetCode: $stateParams.resetCode}
                )
                toastService.show.should.have.been.calledWith('account_activated_key')
                authService.login.should.have.been.calledWith({ username: 'user', password: 'secret'})
                $state.go.should.have.been.calledWith('auth.login')
            })
    })

    it('should support resetPassword error response', () => {
        Restangular.post.resolves({success: false})

        return ctrl.submit()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(
                    {resetCode: $stateParams.resetCode}
                )
                toastService.show.should.have.been.calledWith('err_unexpected_key', {theme: 'warn'})
                authService.login.should.not.have.been.called
                $state.go.should.not.have.been.called
            })
    })

    it('should support resetPassword failure', () => {
        Restangular.post.rejects('err')

        return ctrl.submit()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(
                    {resetCode: $stateParams.resetCode}
                )
                toastService.show.should.have.been.calledWith('err_unexpected_key', {theme: 'warn'})
                authService.login.should.not.have.been.called
                $state.go.should.not.have.been.called
            })
    })

    it('should support compareFields with same passwords', () => {
        ctrl.user.password = 'password'
        ctrl.confirmPassword = 'password'
        _.set(ctrl, 'form.confirmPassword.$setValidity', sinon.stub())

        ctrl.compareFields()

        ctrl.form.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', true)
    })

    it('should support compareFields with different passwords', () => {
        ctrl.user.password = 'password'
        ctrl.confirmPassword = 'different'
        _.set(ctrl, 'form.confirmPassword.$setValidity', sinon.stub())

        ctrl.compareFields()

        ctrl.form.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', false)
    })

    it('should support resetPassword success when ctrl is not activated', () => {
        ctrl.activate = false
        ctrl.user.password = 'secret'
        Restangular.post.resolves({success: true, userName: 'user'})
        authService.login.resolves({})

        return ctrl.submit()
            .then(() => {
                Restangular.all.should.have.been.calledWith('users')
                Restangular.post.should.have.been.calledWith(
                    {password: 'secret', resetCode: $stateParams.resetCode}
                )
                toastService.show.should.have.been.calledWith('password_changed_key')
                authService.login.should.have.been.calledWith({ username: 'user', password: 'secret'})
                $state.go.should.have.been.calledWith('nav.welcome')
            })
    })
})
