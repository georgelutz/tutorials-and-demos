describe('UserEditSecurity', () => {
    var component
    var ctrl
    var user
    var currentUser
    var $state

    beforeEach(() => {
        user = {
            firstName: 'Jon',
            id: 'userUid',
            uid: 'userUid',
            lastName: 'Doe',
            middleName: '',
            realmId: 1,
            status: 1,
            userEmails: [{type: 'Primary', emailAddress: 'originalEmail', preferred: true, verified: false}],
            userName: 'jdoe',
            userOrganizations: [{organizationId: '133', organizationTypeId: 'OEM'}],
            userPhones: [{type: 'Primary', phone: '4443333333', preferred: true}],
            userRoles: [{roleId: 101}],
            subscribedTags: ['customer1|tag1', 'customer1|tag2', 'customer1|all']
        }

        currentUser = {}
        currentUser.uid = '123'

        $state = {}
        _.set($state, '$current.locals.globals', {
            currentUser, user
        })

        component = require('../../../main/login/components/UserEditSecurity')
        ctrl = new component.controller($state)

        ctrl.passwordForm = {
            $valid: true,
            currentPassword: {
                $setValidity: sinon.stub()
            },
            newPassword: {
                $setValidity: sinon.stub()
            },
            confirmPassword: {
                $setValidity: sinon.stub()
            }
        }
        ctrl.clearPasswordFields = sinon.stub()

        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.user.should.equal(user)
        ctrl.editingSelf.should.be.false
    })

    it('should require current password', () => {
        ctrl.passwordForm.confirmPassword.$dirty = true
        ctrl.currentPassword = ''
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'xx'

        ctrl.comparePasswordFields()

        ctrl.passwordForm.newPassword.$setValidity.should.have.been.calledWith('different', true)
        ctrl.passwordForm.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', true)
    })

    it('should compare identical passwords', () => {
        ctrl.passwordForm.confirmPassword.$dirty = true
        ctrl.currentPassword = 'xx'
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'xx'

        ctrl.comparePasswordFields()

        ctrl.passwordForm.newPassword.$setValidity.should.have.been.calledWith('different', false)
        ctrl.passwordForm.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', true)
    })

    it('should compare different passwords', () => {
        ctrl.passwordForm.confirmPassword.$dirty = true
        ctrl.currentPassword = 'ab'
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'aa'

        ctrl.comparePasswordFields()

        ctrl.passwordForm.newPassword.$setValidity.should.have.been.calledWith('different', true)
        ctrl.passwordForm.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', false)
    })

    it('should pass comparePasswordFields validation', () => {
        ctrl.passwordForm.confirmPassword.$dirty = true
        ctrl.currentPassword = 'ab'
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'xx'

        ctrl.comparePasswordFields()

        ctrl.passwordForm.newPassword.$setValidity.should.have.been.calledWith('different', true)
        ctrl.passwordForm.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', true)
    })
})
