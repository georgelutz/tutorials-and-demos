const proxyquire = require('proxyquire').noCallThru()

describe('auth0Lock', () => {
    let init
    let urlConfig
    let Auth0Lock
    let result

    beforeEach(() => {
        urlConfig = {}
        urlConfig.getEnv = sinon.stub()

        result = {abc: 123}
        Auth0Lock = sinon.stub().returns(result)
        global.Auth0Lock = Auth0Lock

        init = () => {
            let constructor = proxyquire('../../../main/loginNew/factories/auth0Lock', {Auth0Lock})
            return constructor(urlConfig)
        }
    })

    afterEach(() => {
        global.Auth0Lock = undefined
    })

    it('should setup auth0 dev', () => {
        urlConfig.getEnv.returns({name: 'dev'})

        init().should.equal(result)

        Auth0Lock.should.have.been.calledWith('d8WzjSZlhHddE0fwJaM4QV1a9g2rIL4f', 'trimble-dev.auth0.com')
    })

    it('should setup auth0 qa', () => {
        urlConfig.getEnv.returns({name: 'qa'})

        init().should.equal(result)

        Auth0Lock.should.have.been.calledWith('osIxh0rnkSP44lG68rSVEvQOZbE7LJNw', 'trimble-qa.auth0.com')
    })

    it('should setup auth0 staging', () => {
        urlConfig.getEnv.returns({name: 'staging'})

        init().should.equal(result)

        Auth0Lock.should.have.been.calledWith('gjPMVyOkLSmnxMqABvBn3qRKZGkzcErJ', 'trimble-staging.auth0.com')
    })

    it('should setup auth0 prod', () => {
        urlConfig.getEnv.returns({name: 'prod'})

        init().should.equal(result)

        Auth0Lock.should.have.been.calledWith('jkKXzuS05JNQb8lb3TZCY03c6FGFsHtC', 'trimble.auth0.com')
    })
})
