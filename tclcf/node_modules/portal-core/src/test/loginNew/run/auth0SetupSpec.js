describe('auth0Setup', () => {
    let $http
    let $state
    let $timeout
    let authConfig
    let authService
    let fieldErrorService
    let Restangular
    let tokenService
    let urlConfig

    beforeEach(() => {
        $http = {}
        $state = {}
        $timeout = sinon.stub().callsArg(0)
        
        authConfig = {}
        authConfig.requireLogin = 'abcd'

        authService = {}
        authService.tokenUpdated = sinon.stub()

        fieldErrorService = {}

        Restangular = {}
        Restangular.setFullRequestInterceptor = sinon.stub()
        Restangular.setErrorInterceptor = sinon.stub()

        tokenService = {}
        tokenService.getToken = sinon.stub().returns('token')
        tokenService.getEncodedToken = sinon.stub().returns('enctok')

        urlConfig = {}
        urlConfig.getEnv = sinon.stub()

        let constructor = require('../../../main/loginNew/run/auth0Setup')
        constructor($http, $state, $timeout, authConfig, authService, fieldErrorService, Restangular, tokenService, urlConfig)
    })

    it('should initialize', () => {
        Restangular.setFullRequestInterceptor.should.have.been.calledWith(sinon.match.func)
        Restangular.setErrorInterceptor.should.have.been.calledWith(sinon.match.func)
        authService.tokenUpdated.should.have.been.calledWith('token', authConfig.requireLogin)
    })

    it('should handle requests', () => {
        let func = Restangular.setFullRequestInterceptor.getCall(0).args[0]
        func('element', 'operation', 'route', 'url', {}, 'params', 'httpConfig').should.deep.equal({
            element: 'element',
            params: 'params',
            headers: {
                Authorization: 'Bearer enctok'
            },
            httpConfig: 'httpConfig'
        })
    })

    it('should not handle other errors', () => {
        let func = Restangular.setErrorInterceptor.getCall(0).args[0]
        func({status: 'wee'}).should.be.true
    })

    it('should handle 422 errors', () => {
        let func = Restangular.setErrorInterceptor.getCall(0).args[0]

        func({status: 422, data: {fieldErrors: 'abc'}})

        fieldErrorService.fieldErrors.should.equal('abc')
    })

    it('should handle 420 errors', () => {
        let func = Restangular.setErrorInterceptor.getCall(0).args[0]

        func({status: 420, data: {fieldErrors: 'abc'}})

        fieldErrorService.fieldErrors.should.equal('abc')
    })
})
