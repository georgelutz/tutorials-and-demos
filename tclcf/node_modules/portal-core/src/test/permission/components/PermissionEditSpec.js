describe('PermissionEdit', () => {
    let $log
    let $state
    let $translate
    let $translatePromise
    let $translateDefaultInterpolation
    let loadingService
    let permission
    let perm
    let resources
    let toastService
    let component
    let ctrl

    beforeEach(() => {
        $log = {}
        $log.error = sinon.stub()

        resources = {
            'permission.permissionEdit.confirm_save': 'value',
            'permission.permissionEdit.err_while_saving': 'value'
        }

        $translatePromise = Promise.resolve(resources)
        $translate = sinon.stub().returns($translatePromise)

        $translateDefaultInterpolation = {}
        $translateDefaultInterpolation.interpolate = sinon.stub()

        loadingService = {}
        loadingService.loading = sinon.stub()

        perm = {id: '1234', name: 'ROLE_NAME', description: 'description'}

        toastService = {}
        toastService.show = sinon.stub()

        $state = {}
        _.set($state, '$current.locals.globals', {
            permission, perm
        })
        $state.go = sinon.stub()

        component = require('../../../main/permission/components/PermissionEdit')
        ctrl = new component.controller($log, $state, $translate, $translateDefaultInterpolation, loadingService, toastService)

        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.$log.should.equal($log)
        ctrl.$state.should.equal($state)
        ctrl.$translateDefaultInterpolation.should.equal($translateDefaultInterpolation)
        ctrl.loadingService.should.equal(loadingService)
        ctrl.perm.should.equal(perm)
        ctrl.save.should.exist
        ctrl.confirmDelete.should.exist
        return $translatePromise.should.be.fulfilled
            .then(() => {
                $translate.should.have.been.calledWith(sinon.match.array)
                ctrl.res.should.equal(resources)
            })
    })

    it('should support save', () => {
        perm.put = sinon.stub().resolves({})
        $state.go.resolves('state.went')
        ctrl.res = resources

        return ctrl.save()
            .then(result => {
                $translateDefaultInterpolation.interpolate.should.have.been.called
                result.should.equal('state.went')
                perm.put.should.have.been.called
                toastService.show.should.have.been.called
                $state.go.should.have.been.calledWith('nav.permission.list')
            })
    })

    it('should support confirming delete', () => {
        perm.deleted = true
        perm.confirmDelete = sinon.stub().resolves({})

        return ctrl.confirmDelete(123)
            .then(() => {
                perm.confirmDelete.should.have.been.calledWith(123)
                $state.go.should.have.been.calledWith('nav.permission.list')
            })
    })

    it('should support confirming delete when permission is not deleted', () => {
        perm.deleted = false
        perm.confirmDelete = sinon.stub().resolves({})

        return ctrl.confirmDelete(123)
            .then(() => {
                $state.go.should.not.have.been.calledWith('nav.permission.list')
            })
    })

    it('should error on save', () => {
        perm.put = sinon.stub().rejects({})
        $state.go.resolves('state.went')
        ctrl.res = resources

        return ctrl.save()
            .then(() => {
                loadingService.loading.should.have.been.calledWith(false)
                $log.error.should.have.been.called
                toastService.show.should.have.been.called
            })
    })

})
