describe('permissionRouteConfig', () => {
    let $stateProvider
    let routeHelper
    let Restangular
    let listService

    beforeEach(() => {
        listService = {}

        Restangular = {}
        Restangular.all = sinon.stub().returnsThis()
        Restangular.getList = sinon.stub()

        $stateProvider = {}
        $stateProvider.state = sinon.stub().returns($stateProvider)

        routeHelper = {}
        routeHelper.get = sinon.stub().returnsArg(0)
        routeHelper.hasPermission = sinon.stub().returnsArg(0)

        require('../../../main/permission/config/permissionRouteConfig')($stateProvider, routeHelper)
    })

    it('should provide routes', () => {
        $stateProvider.state.should.have.been.calledWith('nav.permission')
        $stateProvider.state.should.have.been.calledWith('nav.permission.add')
        $stateProvider.state.should.have.been.calledWith('nav.permission.edit')
        $stateProvider.state.should.have.been.calledWith('nav.permission.list')
    })

    it('should resolve permissions on base route', () => {
        const resolve = $stateProvider.state.withArgs('nav.permission').getCall(0).args[1].resolve
        routeHelper.hasPermission.should.have.been.calledWith('ROLE_PERMISSION_READ')
        resolve.permission.should.equal('ROLE_PERMISSION_READ')
    })

    it('should load permissions to list', () => {
        Restangular.getList.returns('abc')

        const resolve = $stateProvider.state.withArgs('nav.permission.list').getCall(0).args[1].resolve
        resolve.permissions(listService, Restangular).should.equal('abc')
        Restangular.all.should.have.been.calledWith('permissions')
        Restangular.getList.should.have.been.calledWith(sinon.match.object)
    })

    it('should resolve for edit route', () => {
        Restangular.restangularizeElement = sinon.stub().returns('el')
        Restangular.getList.onCall(0).returns('perms')
        const resolve = $stateProvider.state.withArgs('nav.permission.edit').getCall(0).args[1].resolve

        routeHelper.hasPermission.should.have.been.calledWith('ROLE_PERMISSION_WRITE')
        resolve.permission.should.equal('ROLE_PERMISSION_WRITE')
        resolve.perm.should.equal('permissions')
    })

    it('should resolve for add route', () => {
        Restangular.restangularizeElement = sinon.stub().returns('el')
        Restangular.getList.onCall(0).returns('perms')
        const resolve = $stateProvider.state.withArgs('nav.permission.add').getCall(0).args[1].resolve

        routeHelper.hasPermission.should.have.been.calledWith('ROLE_PERMISSION_WRITE')
        resolve.permission.should.equal('ROLE_PERMISSION_CREATE')
        resolve.perm(Restangular).should.equal('el')
        Restangular.restangularizeElement.should.have.been.calledWith(null, {
            adding: true
        }, 'permissions')
    })
})
