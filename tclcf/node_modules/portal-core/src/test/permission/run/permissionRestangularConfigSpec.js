describe('permissionRestangularConfig', () => {
    let $log
    let $translate
    let Restangular
    let dialogService
    let toastService

    let init
    let permission
    let event

    beforeEach(() => {
        $log = {}
        $log.error = sinon.stub()

        Restangular = {}
        Restangular.addElementTransformer = sinon.stub()

        dialogService = {}
        dialogService.showConfirmDelete = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        event = {event: true}

        $translate = sinon.stub().resolves('translated')

        init = () => {
            const constructor = require('../../../main/permission/run/permissionRestangularConfig')
            constructor($log, $translate, Restangular, dialogService, toastService)
            permission = {
                id: '1234',
                name: 'ROLE_I_AM_A_PERMISSION'
            }
            Restangular.addElementTransformer.getCall(0).args[2](permission)
        }
        init()
    })

    it('should initialize', () => {
        Restangular.addElementTransformer.should.have.been.calledWith('permissions')
        permission.key.should.equal(permission.id)
        permission.displayName.should.equal('I Am A Permission')
        permission.confirmDelete.should.exist
    })

    it('should confirm deletes', () => {
        var deleteArgs = {
            entityName: permission.displayName,
            targetEvent: event
        }
        dialogService.showConfirmDelete.withArgs(deleteArgs).resolves({})
        permission.remove = sinon.stub().resolves({})

        return permission.confirmDelete(event)
            .then(() => {
                permission.remove.should.have.been.called
                permission.deleted.should.be.true
            })
    })

    it('should handle delete errors', () => {
        var deleteArgs = {
            entityName: permission.displayName,
            targetEvent: event
        }
        dialogService.showConfirmDelete.withArgs(deleteArgs).resolves({})
        permission.remove = sinon.stub().rejects('error')

        return permission.confirmDelete(event)
            .then(() => {
                $log.error.should.have.been.called
                toastService.show.should.have.been.called
            })
    })

    it('should handle delete cancels', () => {
        var deleteArgs = {
            entityName: permission.displayName,
            targetEvent: event
        }
        dialogService.showConfirmDelete.withArgs(deleteArgs).rejects(false)

        return permission.confirmDelete(event)
            .then(() => {
                $log.error.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })
})
