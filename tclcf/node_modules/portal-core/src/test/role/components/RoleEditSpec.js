describe('RoleEdit', () => {
    var $log
    var $state
    var $translate
    var $translateDefaultInterpolation
    var toastService
    var permissions
    var organizationTypes
    var applications
    var role
    var ctrl
    var component
    var loadingService
    
    beforeEach(() => {
        $log = {}
        $log.error = sinon.stub()

        $state = {}
        $state.go = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        permissions = [{permissions: true}]
        organizationTypes = [{orgTypes: true}]
        applications = [{apps: true}]
        role = {}

        loadingService = {}
        loadingService.loading = sinon.stub()

        $translate = sinon.stub().returns({
            then: sinon.stub().callsArgWith(0, {
                'role.roleEdit.err_while_saving': 'err_while_saving_key',
                'role.roleEdit.confirm_save': 'confirm_save_key'
            })
        })

        $state = {}
        _.set($state, '$current.locals.globals', {
            role, permissions, organizationTypes, applications
        })
        $state.go = sinon.stub()

        $translateDefaultInterpolation = {}
        $translateDefaultInterpolation.interpolate = sinon.stub()

        component = require('../../../main/role/components/RoleEdit')
        ctrl = new component.controller($log, $state, $translate, $translateDefaultInterpolation, toastService, loadingService)

        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.role.should.equal(role)
        ctrl.permissions.should.deep.equal(permissions)
        ctrl.organizationTypes.should.equal(organizationTypes)
        ctrl.applications.should.equal(applications)

        $translate.should.have.been.calledOnce
        $translate.should.have.been.calledWith(sinon.match.array)

        ctrl.res['role.roleEdit.err_while_saving'].should.equal('err_while_saving_key')
        ctrl.res['role.roleEdit.confirm_save'].should.equal('confirm_save_key')
    })

    it('should support save', () => {
        _.set(ctrl, 'form.$valid', true)
        ctrl.organizationTypes = [
            {selected: true},
            {selected: false}
        ]
        ctrl.applications = [
            {selected: false},
            {selected: true}
        ]
        ctrl.permissions.push({name: '1', selected: true})
        ctrl.permissions.push({name: '2', selected: false})
        ctrl.permissions.push({name: '3', selected: true})
        role.put = sinon.stub().resolves({})
        $state.go.resolves('state.went')

        return ctrl.save()
            .then(result => {
                result.should.equal('state.went')
                role.put.should.have.been.called
                ctrl.role.organizationTypes.should.deep.equal([ctrl.organizationTypes[0]])
                ctrl.role.applications.should.deep.equal([ctrl.applications[1]])
                ctrl.role.permissions.should.contain(ctrl.permissions[1]).and.contain(ctrl.permissions[3])
                toastService.show.should.have.been.called
                $state.go.should.have.been.calledWith('nav.role.list')
            })
    })

    it('should support confirming delete', () => {
        role.deleted = true
        role.confirmDelete = sinon.stub().resolves({})

        return ctrl.confirmDelete(123)
            .then(() => {
                role.confirmDelete.should.have.been.calledWith(123)
                $state.go.should.have.been.calledWith('nav.role.list')
            })
    })

    it('should support confirming delete when role is not deleted', () => {
        role.deleted = false
        role.confirmDelete = sinon.stub().resolves({})

        return ctrl.confirmDelete(123)
            .then(() => {
                $state.go.should.not.have.been.calledWith('nav.role.list')
            })
    })

    it('should error on save', () => {
        _.set(ctrl, 'form.$valid', true)
        ctrl.organizationTypes = [
            {selected: true},
            {selected: false}
        ]
        ctrl.applications = [
            {selected: false},
            {selected: true}
        ]
        ctrl.permissions.push({name: '1', selected: true})
        ctrl.permissions.push({name: '2', selected: false})
        ctrl.permissions.push({name: '3', selected: true})
        role.put = sinon.stub().rejects({})
        $state.go.resolves('state.went')

        return ctrl.save()
            .then(() => {
                loadingService.loading.should.have.been.calledWith(false)
                $log.error.should.have.been.called
                toastService.show.should.have.been.called
            })
    })
})
