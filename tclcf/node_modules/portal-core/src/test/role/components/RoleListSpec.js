const _ = require('lodash')
describe('RoleList', () => {
    let $state
    let roles
    let ctrl
    let component
    let currentUser
    let $filter
    let filter
    let listService

    beforeEach(() => {
        roles = [
            {name: 'name1', key: 'key1'},
            {name: 'name2', key: 'key2'}
        ]

        currentUser = {}
        currentUser.hasPermission = sinon.stub().returnsArg(0)

        $state = {}
        _.set($state, '$current.locals.globals', {
            roles, currentUser
        })

        filter = sinon.stub()
        $filter = sinon.stub().withArgs('filter').returns(filter)

        listService = {
            page: 1,
            pageSize: 10
        }

        component = require('../../../main/role/components/RoleList')
        ctrl = new component.controller($filter, $state, listService)

        ctrl.$onInit()
    })

    it('should initialize', () => {
        ctrl.roles.should.deep.equal(roles)
        ctrl.currentUser.should.equal(currentUser)
        ctrl.staticResults.should.deep.equal([
            {
                icon: 'people_outline',
                name: 'name1',
                type: 'static',
                key: 'key1',
                term: 'key1',
                param: 'app'
            }, {
                icon: 'people_outline',
                name: 'name2',
                type: 'static',
                key: 'key2',
                term: 'key2',
                param: 'app'
            }
        ])
    })

    it('should not filter with no chips', () => {
        let chips = {}
        ctrl.chipsUpdated(chips).should.be.true

        ctrl.rows.should.deep.equal(ctrl.roles)
        filter.should.not.have.been.called
    })

    it('should work with a single chip', () => {
        let chips = {
            selectedChips: [
                {term: 'myTerm'}
            ]
        }
        filter.withArgs(ctrl.rows, 'myTerm').returns(['abc', 'def'])
        ctrl.chipsUpdated(chips).should.be.true

        ctrl.rows.should.deep.equal(['abc', 'def'])
    })

    it('should work with a multiple chips', () => {
        let chips = {
            selectedChips: [
                {term: 'myTerm1'},
                {term: 'myTerm2'}
            ]
        }

        filter.withArgs(ctrl.rows, 'myTerm1').returns(['abc', 'def'])
        filter.withArgs(ctrl.rows, 'myTerm2').returns(['def', 'ghi'])

        ctrl.chipsUpdated(chips).should.be.true

        ctrl.rows.should.deep.equal(['def', 'abc', 'ghi'])
    })
})
