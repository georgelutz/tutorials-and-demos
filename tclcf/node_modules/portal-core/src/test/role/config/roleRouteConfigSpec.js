describe('roleRouteConfig', function() {
    let $stateProvider
    let routeHelper
    let Restangular
    let listService

    beforeEach(function() {
        listService = {}

        Restangular = {}
        Restangular.all = sinon.stub().returnsThis()
        Restangular.getList = sinon.stub()

        $stateProvider = {}
        $stateProvider.state = sinon.stub().returns($stateProvider)

        routeHelper = {}
        routeHelper.get = sinon.stub().returnsArg(0)
        routeHelper.hasPermission = sinon.stub().returnsArg(0)

        require('../../../main/role/config/roleRouteConfig')($stateProvider, routeHelper)
    })

    it('should provide routes', function() {
        $stateProvider.state.should.have.been.calledWith('nav.role')
        $stateProvider.state.should.have.been.calledWith('nav.role.add')
        $stateProvider.state.should.have.been.calledWith('nav.role.edit')
        $stateProvider.state.should.have.been.calledWith('nav.role.list')
    })

    it('should resolve permissions on base route', function() {
        let resolve = $stateProvider.state.getCall(0).args[1].resolve
        routeHelper.hasPermission.should.have.been.calledWith('ROLE_ROLE_READ')
        resolve.permission.should.equal('ROLE_ROLE_READ')
    })

    it('should load roles to list', function() {
        Restangular.getList.returns('abc')

        let resolve = $stateProvider.state.withArgs('nav.role.list').getCall(0).args[1].resolve
        resolve.roles(listService, Restangular).should.equal('abc')
        Restangular.all.should.have.been.calledWith('roles')
        Restangular.getList.should.have.been.calledWith(sinon.match.object)
    })

    it('should resolve for add route', function() {
        Restangular.restangularizeElement = sinon.stub().returns('el')
        Restangular.getList.onCall(0).returns('perms')
        Restangular.getList.onCall(1).returns('orgs')
        Restangular.getList.onCall(2).returns('apps')

        let resolve = $stateProvider.state.withArgs('nav.role.add').getCall(0).args[1].resolve

        resolve.role(Restangular).should.deep.equal('el')
        Restangular.restangularizeElement.should.have.been.calledWith(null, {
            adding: true
        }, 'roles')
        resolve.permissions(Restangular).should.equal('perms')
        resolve.organizationTypes(Restangular).should.equal('orgs')
        resolve.applications(Restangular).should.equal('apps')
    })

    it('should resolve for edit route', function() {
        let role = {
            permissions: [
                {id: 1}
            ],
            organizationTypes: [
                {id: 2}
            ],
            applications: [
                {id: 3}
            ]
        }
        Restangular.getList.onCall(0).resolves([{id: 1}, {id: 2}, {id: 3}])
        Restangular.getList.onCall(1).resolves([{id: 1}, {id: 2}, {id: 3}])
        Restangular.getList.onCall(2).resolves([{id: 1}, {id: 2}, {id: 3}])

        let resolve = $stateProvider.state.withArgs('nav.role.edit').getCall(0).args[1].resolve

        return Promise.all([
            resolve.role.should.equal('roles'),
            resolve.permissions(Restangular, role).should.eventually.deep.equal([
                {id: 1, selected: true},
                {id: 2, selected: false},
                {id: 3, selected: false}
            ]),
            resolve.organizationTypes(Restangular, role).should.eventually.deep.equal([
                {id: 1, selected: false},
                {id: 2, selected: true},
                {id: 3, selected: false}
            ]),
            resolve.applications(Restangular, role).should.eventually.deep.equal([
                {id: 1, selected: false},
                {id: 2, selected: false},
                {id: 3, selected: true}
            ])
        ])
    })
})
