describe('roleRestangularConfig', function() {
    var init
    var role
    var $log
    var Restangular
    var dialogService
    var toastService
    var event

    beforeEach(function() {
        Restangular = {}
        Restangular.addElementTransformer = sinon.stub()

        $log = {}
        $log.error = sinon.stub()

        dialogService = {}
        dialogService.showConfirmDelete = sinon.stub()

        toastService = {}
        toastService.show = sinon.stub()

        event = {event: true}

        init = function() {
            var constructor = require('../../../main/role/run/roleRestangularConfig')
            constructor($log, Restangular, dialogService, toastService)
            role = {}
            Restangular.addElementTransformer.getCall(0).args[2](role)
        }
        init()
    })

    it('should add a role element transformer', function() {
        Restangular.addElementTransformer.should.have.been.calledWith('roles')
    })

    it('should confirm deletes', function() {
        role.remove = sinon.stub().resolves({})
        dialogService.showConfirmDelete.resolves({})

        return role.confirmDelete(event)
            .then(function() {
                dialogService.showConfirmDelete.should.have.been.called
                role.remove.should.have.been.called
                role.deleted.should.be.true
            })
    })

    it('should handle delete errors', function() {
        role.remove = sinon.stub().rejects('error')
        dialogService.showConfirmDelete.resolves({})

        return role.confirmDelete(event)
            .then(function() {
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith(sinon.match.string, {theme: 'warn'})
            })
    })

    it('should handle delete cancels', function() {
        dialogService.showConfirmDelete.rejects(false)

        return role.confirmDelete(event)
            .then(function() {
                $log.error.should.not.have.been.called
                toastService.show.should.not.have.been.called
            })
    })
})
