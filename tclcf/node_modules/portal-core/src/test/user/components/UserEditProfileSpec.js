const units = require('../../../main/core/constants/units')

describe('UserEditProfile', () => {
    let component
    let ctrl
    let $log
    let $state
    let $translate
    let $translateDefaultInterpolation
    let toastService
    let user
    let currentUser
    let userOrgTypes
    let loadingService
    let newUser
    let Restangular
    let authConfig
    let i18nService
    let localeHelper

    beforeEach(() => {
        Restangular = {}

        authConfig = {}
        authConfig.adminOrgs = {
            Administrative: {
                key: 'peoplenet',
                name: 'Peoplenet'
            }
        }

        $log = {}
        $log.error = sinon.stub()

        user = {}
        user.deleteUser = sinon.stub().returns({then: sinon.stub().callsArg(0)})

        toastService = {}
        user = {
            adding: false,
            firstName: 'Jon',
            id: 'userUid',
            uid: 'userUid',
            lastName: 'Doe',
            middleName: '',
            realmId: 1,
            status: 1,
            userEmails: [{type: 'Primary', emailAddress: 'originalEmail', preferred: true, verified: false}],
            userName: 'jdoe',
            userOrganizations: [{organizationId: '133', organizationTypeId: 'OEM'}],
            userPhones: [{type: 'Primary', phone: '4443333333', preferred: true}],
            userRoles: [{roleId: 101}],
            subscribedTags: ['customer1|tag1', 'customer1|tag2', 'customer1|all']
        }

        newUser = {
            id: 'newUserId',
            adding: true,
            userEmails: [
                {
                    type: 'Primary',
                    emailAddress: '',
                    preferred: true
                }
            ],
            userPhones: [
                {
                    type: 'Primary',
                    phone: '',
                    preferred: true
                }
            ],
            userRoles: [],
            middleName: '',
            realmId: '3eca0893-23b5-4b00-a8c9-3d3ec6e6f2e7',
            status: 1,
            isOrgType: sinon.stub()
        }

        currentUser = {}
        currentUser.uid = '123'
        currentUser.hasPermission = sinon.stub()
        currentUser.isOrgType = sinon.stub()

        userOrgTypes = [
            {id: 'OEM', shortCode: 'OEM'},
            {id: 'Manufacturer', shortCode: 'Manufacturer'},
            {id: 'Dealer', shortCode: 'Dealer'},
            {id: 'Customer', shortCode: 'Customer'},
            {id: 'PFMCustomer', shortCode: 'PFMCustomer'},
            {id: 'EDriverOrganization', shortCode: 'EDriverOrganization'}
        ]

        toastService.show = sinon.stub()

        //promise mocks - add chain
        user.save = sinon.stub().resolves(newUser)
        Restangular.all = sinon.stub().returnsThis()
        Restangular.one = sinon.stub().returnsThis()
        Restangular.get = sinon.stub().resolves({})
        Restangular.getList = sinon.stub().resolves({})
        Restangular.customGETLIST = sinon.stub().resolves({})

        //promise mocks - edit chain
        user.editUser = sinon.stub().resolves({})

        user.getUserRolesType = sinon.stub().returns({then: sinon.stub().callsArgWith(0, [{id: 'Administrative'}])})
        user.isOrgType = sinon.stub()

        user.getTagByKey = sinon.stub()
        user.setTagByKey = sinon.stub()
        newUser.getTagByKey = sinon.stub()
        newUser.setTagByKey = sinon.stub()

        loadingService = {}
        loadingService.loading = sinon.stub()

        $translate = sinon.stub().resolves({})

        i18nService = {}
        i18nService.updateCurrentLocale = sinon.stub().returns({then: sinon.stub().returnsThis()}).resolves({
            uid: 'userUid',
            locale: 'en-US'
        })

        localeHelper = {
            defaultLocale: 'en-US',
            locales: ['en-US', 'es-MX', 'fr-CA', 'pt-BR'],
            languageKeys: {
                'en*': 'en-US',
                'es*': 'es-MX',
                'fr*': 'fr-CA',
                'pt*': 'pt-BR'
            }
        }

        $translateDefaultInterpolation = {}
        $translateDefaultInterpolation.interpolate = sinon.stub()

        $state = {}
        $state.go = sinon.stub().resolves('state.went')
        _.set($state, '$current.locals.globals', {
            user, currentUser, userOrgTypes
        })

        component = require('../../../main/user/components/UserEditProfile')
        ctrl = new component.controller($log, Promise, $state, $translate, $translateDefaultInterpolation,
            toastService, loadingService, Restangular, authConfig, localeHelper, i18nService, units)

        ctrl.form = {
            $valid: true,
            newPassword: {
                $setValidity: sinon.stub()
            },
            confirmPassword: {
                $setValidity: sinon.stub()
            }
        }

        ctrl.$onInit()
    })

    //initialize
    it('should initialize (localization)', () => {
        $translate.should.have.been.calledOnce
        $translate.should.have.been.calledWith(sinon.match.array)
    })

    it('should initialize (edit)', () => {
        ctrl.edit.should.be.true
        ctrl.user.should.equal(user)
        ctrl.editingSelf.should.be.false
        ctrl.userOrgTypes.should.equal(userOrgTypes)
        ctrl.curOrgType.should.deep.equal({id: 'OEM', shortCode: 'OEM'})
        ctrl.editingPFMUser.should.be.false
    })

    it('should initialize (add)', () => {
        _.set($state, '$current.locals.globals.user', newUser)

        currentUser.orgId = 'PeopleNet'
        currentUser.orgType = 'Dealer'

        ctrl.$onInit()

        ctrl.edit.should.be.false
        ctrl.user.should.equal(newUser)
        ctrl.editingSelf.should.be.false
        ctrl.userOrgTypes.should.equal(userOrgTypes)
        ctrl.user.userOrganizations[0].organizationTypeId.should.equal(currentUser.orgType)
        ctrl.user.userOrganizations[0].organizationId.should.equal(currentUser.orgId)
        ctrl.editingPFMUser.should.be.false
    })

    it('should initialize (edit) PFMCustomer org type', () => {
        user.userOrganizations = [{organizationId: '57', organizationTypeId: 'PFMCustomer'}]
        _.set($state, '$current.locals.globals.user', user)
        _.set($state, '$current.locals.globals.userOrgTypes', userOrgTypes)

        ctrl.$onInit()

        ctrl.edit.should.be.true
        ctrl.user.should.equal(user)
        ctrl.editingSelf.should.be.false
        ctrl.userOrgTypes.should.equal(userOrgTypes)
        ctrl.curOrgType.should.deep.equal({id: 'PFMCustomer', shortCode: 'PFMCustomer'})
        ctrl.editingPFMUser.should.be.true
    })

    it('should initialize (add) PFMCustomer org type', () => {
        _.set($state, '$current.locals.globals.user', newUser)
        _.set($state, '$current.locals.globals.userOrgTypes', userOrgTypes)
        ctrl.currentUser.orgId = '57'
        ctrl.currentUser.orgType = 'PFMCustomer'
        ctrl.getOrg = sinon.stub()

        ctrl.$onInit()

        ctrl.edit.should.be.false
        ctrl.user.should.equal(newUser)
        ctrl.editingSelf.should.be.false
        ctrl.userOrgTypes.should.equal(userOrgTypes)
        ctrl.user.userOrganizations[0].organizationTypeId.should.equal(currentUser.orgType)
        ctrl.user.userOrganizations[0].organizationId.should.equal(currentUser.orgId)
        ctrl.editingPFMUser.should.be.true

    })

    it('should return users for Administrative orgType on searchOrgList', () => {
        let q = 'admin'
        let response

        ctrl.curOrgType = {id: 'Administrative', shortCode: 'Administrative'}

        response = ctrl.searchOrgList(q)

        response[0].key.should.equal('peoplenet')
        response[0].name.should.equal('Peoplenet')
    })

    it('should return oems for OEM orgType on searchOrgList', () => {
        let q = 'oem'
        let data = [{name: 'oem entity'}]

        ctrl.curOrgType = {id: 'OEM', shortCode: 'OEM'}

        Restangular.getList.resolves(data)

        return ctrl.searchOrgList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('oems')
                Restangular.getList.should.have.been.calledWith({q: q, globalsearch: true})
                result[0].name.should.equal('oem entity')
            })
    })

    it('should return manufacturers for Manufacturer orgType on searchOrgList', () => {
        let q = 'manufacturer'
        let data = [{name: 'manufacturer entity'}]

        ctrl.curOrgType = {id: 'Manufacturer', shortCode: 'Manufacturer'}

        Restangular.getList.resolves(data)

        return ctrl.searchOrgList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('manufacturers')
                Restangular.getList.should.have.been.calledWith({q: q, globalsearch: true})
                result[0].name.should.equal('manufacturer entity')
            })
    })

    it('should return customers for Customer orgType on searchOrgList', () => {
        let q = 'customer'
        let data = [{name: 'customer entity'}]

        ctrl.curOrgType = {id: 'Customer', shortCode: 'Customer'}

        Restangular.getList.resolves(data)

        return ctrl.searchOrgList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('customers')
                Restangular.getList.should.have.been.calledWith({q: q, globalsearch: true})
                result[0].name.should.equal('customer entity')
            })
    })

    it('should return dealers for Dealer orgType on searchOrgList', () => {
        let q = 'dealer'
        let data = [{name: 'dealer entity', dealerIds: ['id001']}]
        let params = {
            q: q,
            globalsearch: true
        }

        ctrl.curOrgType = {id: 'Dealer', shortCode: 'Dealer'}

        Restangular.getList.resolves(data)

        return ctrl.searchOrgList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('dealers')
                Restangular.getList.should.have.been.calledWith(params)
                result[0].name.should.equal('dealer entity - id001')
            })

    })

    it('should return pfm customers for PFMCustomer orgType on searchOrgList', () => {
        let q = 'PFMCustomer'
        let response

        ctrl.curOrgType = {id: 'PFMCustomer', shortCode: 'PFMCustomer'}

        response = ctrl.searchOrgList(q)

        response.should.deep.equal([])
    })

    it('should return edriver organizations for EDriverOrganization orgType on searchOrgList', () => {
        let q = 'Bob\'s Trucking'
        let data = [{name: q, id: 'EDriverOrganization'}]
        let params = {q}

        ctrl.curOrgType = {id: 'EDriverOrganization'}

        Restangular.getList.resolves(data)

        return ctrl.searchOrgList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('edriver/organizations')
                Restangular.getList.should.have.been.calledWith(params)
                result[0].name.should.equal(q)
                result[0].id.should.equal(data[0].id)
                result[0].key.should.equal(data[0].id)
            })
    })

    it('should concatenate dealer code when org type is dealer on edit', () => {
        ctrl.curOrgType = {id: 'Dealer', shortCode: 'Dealer'}
        let response = [
            {name: 'testDealer', dealerIds: ['testId']},
            {name: 'testDealer2', dealerIds: ['testId2']}
        ]
        let responsePromise = Promise.resolve(response)
        Restangular.getList.resolves(responsePromise)

        ctrl.getOrg()

        return responsePromise.should.be.fulfilled
            .then(data => {
                data[0].name.should.equal('testDealer - testId')
            })
    })

    it('should setup the PFM org/role correctly', () => {
        ctrl.user.userOrganizations = [{organizationId: '57', organizationTypeId: 'PFMCustomer'}]
        ctrl.curOrgType = {id: 'PFMCustomer', shortCode: 'PFMCustomer'}
        let response = [{id: 'x', name: 'PMG Driver'}]
        let responsePromise = Promise.resolve(response)
        ctrl.user.getUserRolesType.resolves(responsePromise)

        ctrl.getOrg()

        ctrl.organization.key.should.equal('57')
        ctrl.organization.name.should.equal('CID 57')
        ctrl.user.getUserRolesType.should.have.been.calledWith('PFMCustomer')
        return responsePromise.should.be.fulfilled
            .then(data => {
                data[0].name.should.equal('PMG Driver')
            })
    })

    it('should setup the EDriverOrganization org/role correctly', () => {
        ctrl.curOrgType = {id: 'uuid here', shortCode: 'EDriverOrganization'}
        let response = [
            {name: 'Bob\'s Trucking', id: 'uuid here'},
            {name: 'Roberta\'s Trucks', id: 'another uuid here'}
        ]
        let responsePromise = Promise.resolve(response)
        Restangular.get.resolves(responsePromise)

        ctrl.getOrg()

        return responsePromise.should.be.fulfilled
            .then(data => {
                data[0].name.should.equal('Bob\'s Trucking')
                data[1].name.should.equal('Roberta\'s Trucks')
            })
    })

    it('should support search for roles', () => {
        let q = 'role 1'
        let data = [{name: 'role 1'}, {name: 'role 2'}]

        ctrl.curOrgType = {id: 'orgKey'}

        Restangular.customGETLIST.resolves({plain: sinon.stub().returns(data)})

        return ctrl.searchRoleList(q)
            .then(result => {
                Restangular.all.should.have.been.calledWith('roles')
                Restangular.customGETLIST.should.have.been.calledWith('realms/OEM/orgType/orgKey')
                result.should.deep.equal([{name: 'role 1'}])
            })
    })

    it('should support saving a new user', () => {
        user.adding = true
        ctrl.$onInit()

        //change password
        ctrl.newPassword = 'new!'
        ctrl.confirmPassword = 'new!'
        ctrl.form.confirmPassword.$dirty = true

        //change email
        user.userEmails = [{emailAddress: '1@1.1'}]

        //set role
        ctrl.userRole = {id: 'roleId'}

        ctrl.curOrgType = {id: 'orgKey'}

        return ctrl.submit()
            .then(result => {
                //submit
                user.save.should.have.been.called
                $state.go.should.have.been.calledWith('nav.user.edit', {id: 'newUserId'})
                result.should.equal('state.went')
            })
    })

    it('should support saving a new user without password', () => {
        user.adding = true
        ctrl.$onInit()
        //change email
        user.userEmails = [{emailAddress: '1@1.1'}]

        //set role
        ctrl.userRole = {id: 'roleId'}

        ctrl.curOrgType = {id: 'orgKey'}

        return ctrl.submit()
            .then(result => {
                //submit
                user.userCredential.username.should.equal('1@1.1')
                user.save.should.have.been.called
                $state.go.should.have.been.calledWith('nav.user.edit', {id: 'newUserId'})
                result.should.equal('state.went')
            })
    })

    it('should support saving self user', () => {
        user.adding = false
        user.id = currentUser.uid

        ctrl.$onInit()
        //change locale
        ctrl.locale = _.find(ctrl.locales, {value: 'pt-BR'})

        //set role
        ctrl.userRole = {id: 'roleId'}

        return ctrl.submit().then(() => {
            //submit
            user.save.should.have.been.called
            i18nService.updateCurrentLocale.should.have.been.calledWith(user)
            $state.go.should.have.been.calledWith('nav.user.edit', {id: 'newUserId'})
        })
    })

    //compareFields
    it('should compare identical passwords', () => {
        ctrl.form.confirmPassword.$dirty = true
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'xx'

        ctrl.compareFields()

        ctrl.form.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', true)
    })

    it('should compare different passwords', () => {
        ctrl.form.confirmPassword.$dirty = true
        ctrl.newPassword = 'xx'
        ctrl.confirmPassword = 'aa'

        ctrl.compareFields()

        ctrl.form.confirmPassword.$setValidity.should.have.been.calledWith('fieldEquality', false)
    })

    it('should confirm the deletion of users', () => {
        let event = 123
        user.deleted = true
        user.confirmDelete = sinon.stub().resolves({})
        $state.go = sinon.stub()

        return ctrl.confirmDelete(event)
            .then(() => {
                user.confirmDelete.should.have.been.calledWith(event)
                $state.go.should.have.been.calledWith('nav.user.list')
            })
    })

    it('should check for password change', () => {
        ctrl.currentPassword = 'test'

        let result = ctrl.passwordHasChanged()
        result.should.be.true
    })

    it('should reset the organization name and user role type when org type changes', () => {
        ctrl.cleanOrg()

        should.equal(ctrl.organization, null)
        should.equal(ctrl.orgNameSearchText, null)
        should.equal(ctrl.userOrganization, null)
        should.equal(ctrl.userRole, null)
        should.equal(ctrl.userRoleSearchText, null)
    })

    it('should not set a verify message value if email is already verified', () => {
        _.set($state, '$current.locals.globals.user', {
            userEmails: [{type: 'Primary', emailAddress: 'originalEmail', preferred: true, verified: true}],
            isOrgType: sinon.stub(),
            getUserRolesType: sinon.stub(),
            getTagByKey: sinon.stub(),
            setTagByKey: sinon.stub()
        })

        ctrl.$onInit()

        should.not.exist(ctrl.verifyMessage)
    })

    it('should confirm when user is not deleted', () => {
        let event = 123
        user.deleted = false
        user.confirmDelete = sinon.stub().resolves({})
        $state.go = sinon.stub()

        return ctrl.confirmDelete(event)
            .then(() => {
                user.confirmDelete.should.have.been.calledWith(event)
                $state.go.should.not.have.been.called
            })
    })

    it('should concatenate dealer code when org type is empty', () => {
        ctrl.curOrgType = {}
        ctrl.getRole = sinon.stub()
        let response = [
            {name: 'testDealer', dealerIds: ['testId']},
            {name: 'testDealer2', dealerIds: ['testId2']}
        ]
        let responsePromise = Promise.resolve(response)
        Restangular.getList.resolves(responsePromise)

        ctrl.getOrg()

        ctrl.getRole.should.have.been.called
        return responsePromise.should.be.fulfilled
            .then(() => {
                ctrl.getRole.should.have.been.called
            })
    })

    it('should check for organization change', () => {
        let expectedResult = {
            userOrganizations: [
                {
                    organizationId: _.get(ctrl, 'organization.key'),
                    organizationTypeId: ctrl.curOrgType.id
                }
            ]
        }
        ctrl.userOrganization = {}
        ctrl.$onInit()

        ctrl.organizationChanged()
        ctrl.userOrganization.should.deep.equal(expectedResult)
    })

    it('should check for organization change when org type is PFMCustomer', () => {
        ctrl.curOrgType = {id: 'PFMCustomer'}
        ctrl.orgNameSearchText = 456
        let expectedResult = {
            userOrganizations: [
                {
                    organizationId: _.trimStart(ctrl.orgNameSearchText, 'CID '),
                    organizationTypeId: ctrl.curOrgType.id
                }
            ]
        }
        ctrl.userOrganization = {}

        ctrl.organizationChanged()

        ctrl.userOrganization.should.deep.equal(expectedResult)
    })

    it('should error if promise is rejected', () => {
        user.adding = true
        ctrl.$onInit()

        //change password
        ctrl.newPassword = 'new!'
        ctrl.confirmPassword = 'new!'
        ctrl.form.confirmPassword.$dirty = true

        //change email
        user.userEmails = [{emailAddress: '1@1.1'}]

        //set role
        ctrl.userRole = {id: 'roleId'}
        ctrl.curOrgType = {id: 'orgKey'}

        user.save = sinon.stub()
        user.save.rejects({})

        return ctrl.submit()
            .then(() => {
                //submit
                $log.error.should.have.been.called
                toastService.show.should.have.been.calledWith(ctrl.res['user.userEditProfile.err_while_saving'], {theme: 'warn'})
            })
    })


    it('should ignore type ahead for orgs if curOrgType does not exist', () => {
        ctrl.curOrgType = undefined
        ctrl.getRole = sinon.stub()

        ctrl.searchOrgList()
        should.equal(ctrl.curOrgType, undefined)
    })

    it('should skip adding q as a paramater if q is undefined', () => {
        ctrl.getRole = sinon.stub()
        let q = undefined

        ctrl.searchOrgList(q)
        Restangular.all.should.have.been.calledWith('oems')
    })

    it('should get customer list if current user org type is customer', () => {
        ctrl.curOrgType.id = 'Customer'
        currentUser.orgType = 'Customer'
        ctrl.getRole = sinon.stub()
        let q = 'admin'

        ctrl.searchOrgList(q)
        Restangular.all.should.have.been.calledWith('customers')
    })

    it('should return nothing if invalid org type id is used', () => {
        ctrl.curOrgType.id = 'test'
        ctrl.getRole = sinon.stub()
        let q = undefined

        let result = ctrl.searchOrgList(q)
        should.equal(result, undefined)
    })

    it('should not set validity of passwords if new or confirm password do not exist', () => {
        ctrl.form.newPassword = 'test'
        ctrl.form.confirmPassword = ''

        ctrl.compareFields()
        should.equal(ctrl.form.confirmPassword.$setValidity, undefined)
    })

    it('should initialize preferences with default values', () => {
        ctrl.sidenavCollapse.should.be.false
        ctrl.distanceUnit.value.should.equal('mi')
        ctrl.volumeUnit.value.should.equal('gal')
        ctrl.temperatureUnit.value.should.equal('f')
        ctrl.pressureUnit.value.should.equal('psi')
        ctrl.massUnit.value.should.equal('lb')
    })

    it('should update tags for preferences', () => {
        ctrl.distanceUnit.value = 'km'
        ctrl.volumeUnit.value = 'li'
        ctrl.temperatureUnit.value = 'c'
        ctrl.pressureUnit.value = 'psi'
        ctrl.massUnit.value = 'lb'

        ctrl.submit().then(() => {
            user.setTagByKey.should.have.been.calledWith('sidenavCollapse', false)
            user.setTagByKey.should.have.been.calledWith('distanceUnit', 'km')
            user.setTagByKey.should.have.been.calledWith('volumeUnit', 'li')
            user.setTagByKey.should.have.been.calledWith('temperatureUnit', 'c')
            user.setTagByKey.should.have.been.calledWith('pressureUnit', 'psi')
            user.setTagByKey.should.have.been.calledWith('massUnit', 'lb')
        })
    })
})
