describe('userGlobalSearchConfig', function() {
    var globalSearchProvider

    beforeEach(function() {
        globalSearchProvider = {}
        globalSearchProvider.addSearchItem = sinon.stub()
        globalSearchProvider.addStaticPage = sinon.stub()
        globalSearchProvider.addCommonSearchFunction = sinon.stub()

        require('../../../main/user/config/userGlobalSearchConfig')(globalSearchProvider)
    })

    it('should register for global search', function() {
        //given some mocks
        var $state = {}
        $state.go = sinon.stub()

        //and a search item was added
        globalSearchProvider.addCommonSearchFunction.should.have.been.calledWith('entities', 'search')
        globalSearchProvider.addSearchItem.should.have.been.calledWith('user',
            'nav.user.list', sinon.match.func, sinon.match.func, 'user.common.type')

        //when response handler is called
        var responseHandler = globalSearchProvider.addSearchItem.getCall(0).args[2]
        var result = responseHandler({
            user: {
                data: [
                    {firstName: 'firstname', lastName: 'lastname', userName: 'username', id: 'onekey'},
                    {firstName: 'twoname', id: 'twokey'}
                ]
            }
        })

        //then result should be correct
        result.should.deep.equal([
            {icon: 'person', name: 'firstname lastname username', type: 'user', key: 'onekey'},
            {icon: 'person', name: 'twoname', type: 'user', key: 'twokey'}
        ])

        //when select handler is called
        var selectHandler = globalSearchProvider.addSearchItem.getCall(0).args[3]
        selectHandler({
            type: 'user',
            key: 'key'
        }, $state)

        //then
        $state.go.should.have.been.calledWith('nav.user.details', {id: 'key'}, {reload: true})
    })

    it('should register for global search even if no users are found', function() {
        var $state = {}
        $state.go = sinon.stub()

        //when select handler is called with no type
        var selectHandler = globalSearchProvider.addSearchItem.getCall(0).args[3]
        selectHandler({
            key: 'key'
        }, $state)

        $state.go.should.not.have.been.called
    })

    it('should add static pages', function() {
        globalSearchProvider.addStaticPage.should.have.been.calledWith(sinon.match.string, sinon.match.array,
            'ROLE_USER.+_WRITE', 'nav.user.add')
        globalSearchProvider.addStaticPage.should.have.been.calledWith(sinon.match.string, sinon.match.array,
            'ROLE_USER.+_READ', 'nav.user.list')
    })

})
