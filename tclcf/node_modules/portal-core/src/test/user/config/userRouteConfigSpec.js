describe('userRouteConfig', () => {
    let $stateProvider
    let routeHelper

    beforeEach(() => {
        $stateProvider = {}
        $stateProvider.state = sinon.stub().returns($stateProvider)

        routeHelper = {}
        routeHelper.fetch = sinon.stub().returns('fetch')
        routeHelper.fetchEntities = sinon.stub().returns('fetchEntities')
        routeHelper.hasPermission = sinon.stub().returnsArg(0)
        routeHelper.get = sinon.stub()
        routeHelper.entityChips = sinon.stub().returnsArg(0)

        require('../../../main/user/config/userRouteConfig')($stateProvider, routeHelper)
    })
    
    it('should add tags to the user', () => {
        let user = {
            adding: true,
            userEmails: [
                {
                    type: 'Primary',
                    emailAddress: '',
                    preferred: true
                }
            ],
            userPhones: [
                {
                    type: 'Primary',
                    phone: '',
                    preferred: true
                }
            ],
            userRoles: [],
            middleName: '',
            realmId: '3eca0893-23b5-4b00-a8c9-3d3ec6e6f2e7',
            status: 1,
            tags: []
        }

        let Restangular = {}
        Restangular.restangularizeElement = sinon.stub().returns(123)

        let resolve = $stateProvider.state.withArgs('nav.user.add').getCall(0).args[1].resolve
        resolve.user(Restangular).should.equal(123)

        Restangular.restangularizeElement.should.have.been.calledWith(null, user, 'users')
    })

    it('should have a base route', () => {
        $stateProvider.state.should.have.been.calledWith('nav.user')
    })

    it('should resolve details tab route for administrative org', () => {
        let user = {
            userOrganizations : [{organizationId : 'orgId', organizationTypeId : 'Administrative'}]
        }
        let userOrgTypes = [{id : 'Administrative'}]
        let authConfig = {
            adminOrgs : {
                Administrative : {
                    key : 'peoplenet',
                    name : 'Peoplenet'
                }
            }
        }

        let Restangular = {}
       
        let resolve = $stateProvider.state.withArgs('nav.user.details').getCall(0).args[1].resolve
        let data = resolve.currentOrg(user, userOrgTypes, Restangular, authConfig)
        data.should.equal('Peoplenet')
    })

    it('should resolve details tab route for non administrative org', () => {
        let user = {
            userOrganizations : [{organizationId : 'orgId', organizationTypeId : 'Dealer'}]
        }
        let userOrgTypes = [{id : 'Dealer'}]
        let authConfig = {
            adminOrgs : {
                Administrative : {
                    key : 'someDealer',
                    name : 'Some Dealer'
                }
            }
        }

        let Restangular = {}
        Restangular.one = sinon.stub().returnsThis()
        Restangular.get = sinon.stub().returnsThis()
        Restangular.then = sinon.stub().returns('Some Dealer')
   
        let resolve = $stateProvider.state.withArgs('nav.user.details').getCall(0).args[1].resolve
        let data = resolve.currentOrg(user, userOrgTypes, Restangular, authConfig)
        data.should.equal('Some Dealer')
    })

    it('should resolve details PFMCustomer org', () => {
        let user = {
            userOrganizations : [{organizationId : '57', organizationTypeId : 'PFMCustomer'}]
        }
        let userOrgTypes = [{id : 'PFMCustomer'}]
        let authConfig = {
            adminOrgs : {
                Administrative : {
                    key : 'someDealer',
                    name : 'Some Dealer'
                }
            }
        }
        let Restangular = {}

        let resolve = $stateProvider.state.withArgs('nav.user.details').getCall(0).args[1].resolve
        let data = resolve.currentOrg(user, userOrgTypes, Restangular, authConfig)
        data.should.equal('CID 57')
    })

    it('should resolve details EDriverOrganization org', () => {
        let user = {
            userOrganizations : [{
                organizationId : '27380492-565e-49c6-b420-13beef5354c6', 
                organizationTypeId : 'EDriverOrganization'
            }]
        }
        let userOrgTypes = [{id : 'EDriverOrganization'}]
        let authConfig = {
            adminOrgs : {
                Administrative : {
                    key : 'peoplenet',
                    name : 'Peoplenet'
                }
            }
        }
        let Restangular = {}
        Restangular.one = sinon.stub().returnsThis()
        Restangular.get = sinon.stub().returnsThis()
        Restangular.then = sinon.stub().returns('Some Edriver Org')
        
        let resolve = $stateProvider.state.withArgs('nav.user.details').getCall(0).args[1].resolve
        let data = resolve.currentOrg(user, userOrgTypes, Restangular, authConfig)
        
        data.should.equal('Some Edriver Org')
    })

})
